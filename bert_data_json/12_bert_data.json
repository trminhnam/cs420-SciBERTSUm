{"src": [101, 2057, 2265, 2008, 1996, 21641, 5337, 2944, 2005, 2330, 3617, 2157, 2653, 1006, 1051, 13626, 2140, 1007, 1011, 2241, 2916, 10656, 6043, 2064, 2022, 16348, 1998, 5228, 2004, 1037, 5257, 1997, 3031, 21615, 1998, 3513, 1010, 1041, 29625, 2290, 29625, 1010, 21641, 4773, 3627, 2653, 1006, 25430, 12190, 1007, 1012, 102, 101, 2241, 2006, 1051, 13626, 2140, 1005, 2015, 11423, 1998, 2951, 9206, 1010, 1037, 2916, 10656, 3031, 6483, 2003, 3818, 1999, 2023, 2817, 1012, 102, 101, 7297, 1010, 2057, 4671, 1996, 2916, 10656, 3343, 2004, 1037, 2275, 1997, 3031, 6483, 8635, 1010, 3513, 1010, 1998, 8866, 2005, 8192, 1998, 4651, 2916, 10656, 1012, 102, 101, 2043, 20410, 2075, 1051, 13626, 2140, 5337, 28081, 1010, 2256, 25430, 12190, 3921, 2003, 6020, 2000, 1996, 12391, 7775, 2034, 2344, 7961, 1006, 1042, 4747, 1007, 2944, 2138, 2057, 2031, 2019, 3305, 3085, 5337, 28081, 1997, 6043, 2005, 6882, 3698, 6364, 1998, 1037, 3020, 22570, 2373, 2005, 3343, 12646, 9361, 1012, 102, 101, 2006, 1996, 2060, 2192, 1010, 1996, 2916, 10656, 28081, 3491, 2004, 1037, 12391, 2440, 1042, 4747, 2453, 2031, 1037, 3020, 11619, 1997, 6105, 22616, 1010, 2029, 3463, 1999, 1037, 3343, 12646, 9361, 2008, 2003, 4298, 6151, 8586, 8524, 3468, 1012, 102, 101, 1037, 2613, 8192, 2916, 10656, 11967, 2005, 3617, 4180, 2003, 7645, 1999, 2344, 2000, 16114, 1996, 24010, 1997, 2256, 5337, 21641, 2944, 2005, 3617, 2916, 10656, 1012, 102, 101, 2057, 3246, 2023, 2817, 2097, 8328, 2070, 2422, 2006, 2925, 7591, 2592, 8192, 1998, 10656, 2916, 4758, 2013, 1037, 9394, 3860, 7339, 1012, 102, 101, 1996, 7209, 3125, 1997, 10910, 1037, 5500, 3617, 2916, 2968, 1006, 2852, 2213, 1007, 2291, 2003, 4180, 5608, 2064, 2622, 6043, 8677, 2037, 4180, 2046, 6556, 10058, 2007, 7023, 2008, 2216, 6043, 2097, 2022, 9768, 2011, 6556, 14164, 1031, 2410, 1033, 1012, 102, 101, 1037, 13045, 2003, 1037, 9480, 2291, 2008, 21208, 2015, 1996, 3423, 8192, 1997, 3617, 2573, 2008, 2064, 2022, 13538, 2006, 2000, 3582, 3056, 3513, 1998, 16306, 2049, 3423, 2916, 10656, 3343, 1031, 2539, 1033, 1012, 102, 101, 5919, 1997, 1996, 2852, 2213, 2916, 20104, 1998, 7285, 3291, 2421, 5675, 3436, 10656, 6043, 1998, 1037, 7337, 2005, 1000, 13946, 1000, 2008, 1037, 5227, 2000, 3229, 2916, 4012, 24759, 3111, 2007, 7882, 6043, 1012, 102, 101, 1037, 2236, 1011, 3800, 2916, 3670, 2653, 1006, 2128, 2140, 1007, 2003, 1037, 2828, 1997, 3343, 10656, 2653, 2073, 1996, 3579, 1997, 1996, 2653, 2003, 2006, 1996, 3670, 1998, 4651, 10127, 1997, 8192, 2916, 2030, 9859, 2013, 2028, 2283, 2000, 2178, 1999, 2019, 6970, 25918, 3085, 5450, 1012, 102, 101, 2009, 2097, 2022, 1037, 4119, 2000, 2640, 1037, 2236, 1011, 3800, 2128, 2140, 2005, 1996, 2852, 2213, 2291, 2008, 16783, 2916, 10656, 6043, 1998, 7711, 3617, 4180, 1031, 2410, 1033, 1012, 102, 101, 8361, 11701, 3068, 2128, 2140, 2024, 6219, 2046, 2048, 2350, 7958, 1024, 2330, 3617, 2157, 2653, 1006, 1051, 13626, 2140, 1007, 1998, 4654, 25808, 7028, 2916, 2928, 6279, 2653, 1006, 1060, 10867, 2140, 1007, 1012, 102, 101, 6854, 1010, 1996, 28081, 1997, 2119, 1997, 2122, 2128, 4877, 2024, 2593, 2649, 1999, 2394, 2030, 2004, 3274, 13792, 1010, 3568, 1010, 2027, 3768, 3698, 3305, 3085, 5337, 28081, 29625, 12399, 2063, 2024, 2048, 4563, 6177, 2005, 1037, 2852, 2213, 2916, 10656, 3343, 1024, 2019, 2128, 2140, 2653, 2005, 14026, 6043, 1998, 2019, 9345, 7630, 8844, 2008, 2064, 2191, 102, 101, 1996, 3343, 9345, 7630, 8844, 2442, 2022, 2583, 2000, 3114, 11178, 7175, 2035, 4127, 1997, 3343, 2009, 2089, 8087, 2043, 2437, 1037, 9480, 3247, 2000, 3946, 2916, 1012, 102, 101, 2947, 1010, 1996, 2640, 1997, 1037, 3343, 9345, 7630, 8844, 2003, 2183, 2000, 2022, 5105, 2011, 1996, 2640, 1997, 1996, 2128, 2140, 2653, 1012, 102, 101, 1037, 2852, 2213, 3343, 9345, 7630, 8844, 2442, 5630, 2005, 2169, 7303, 3229, 3251, 1996, 3343, 1006, 2030, 6043, 1007, 2003, 7882, 2000, 1996, 5227, 1998, 3251, 2030, 2025, 2000, 3499, 2009, 2000, 5258, 2005, 1037, 2445, 6105, 1012, 102, 101, 2023, 20219, 1997, 1037, 2852, 2213, 3343, 9312, 2064, 2022, 5240, 2004, 1037, 1000, 12646, 9361, 1000, 3247, 3291, 1999, 1037, 3404, 2968, 2291, 1031, 1015, 1033, 1012, 102, 101, 1996, 6105, 2003, 5173, 2013, 1037, 3423, 3206, 2008, 2163, 1996, 2566, 26770, 10540, 2104, 2029, 3617, 8417, 2064, 2022, 11476, 2135, 11570, 1012, 102, 101, 1996, 4155, 2005, 3015, 15943, 1006, 2030, 2566, 26770, 10540, 1007, 2788, 2991, 2046, 2093, 7236, 1024, 1037, 2529, 3191, 3085, 3019, 2653, 1010, 1037, 4007, 3191, 3085, 20950, 1011, 2241, 2653, 1010, 1998, 1037, 3698, 3305, 3085, 2653, 1031, 2324, 1033, 1012, 102, 101, 2043, 2057, 5136, 3617, 8417, 2004, 5123, 1010, 7591, 1010, 3167, 2592, 2029, 2453, 2022, 4487, 11393, 26972, 2058, 1996, 2972, 4773, 1010, 2059, 1996, 8192, 1998, 10656, 2916, 2491, 3314, 2057, 2024, 5307, 2024, 2074, 1996, 2168, 2004, 2216, 4493, 1999, 1996, 2852, 2213, 2291, 1012, 102, 101, 4487, 11393, 26972, 3617, 4180, 1006, 2030, 2592, 1007, 2007, 3378, 15943, 2024, 4372, 26775, 22571, 3064, 2007, 6413, 3036, 6309, 1012, 102, 101, 2065, 1037, 13045, 2007, 1037, 2326, 5227, 2064, 11703, 2854, 13876, 1996, 22817, 2592, 1998, 6105, 1010, 2059, 1996, 13045, 1005, 2015, 11157, 6105, 9345, 7630, 8844, 2097, 11633, 2135, 17841, 1996, 6105, 28081, 1998, 16306, 1996, 6105, 10540, 1010, 2164, 3031, 6483, 1010, 3513, 1010, 1998, 8866, 1010, 2000, 5630, 3251, 1037, 5227, 2323, 2022, 4379, 102, 101, 1996, 3125, 1997, 2023, 2470, 2003, 2000, 3066, 2007, 1996, 3291, 2008, 6105, 10540, 2517, 1999, 1051, 13626, 2140, 2128, 2140, 1010, 2024, 2330, 2000, 7613, 2008, 3463, 1999, 21641, 27637, 1012, 102, 101, 2023, 2003, 2138, 1996, 3090, 3785, 2005, 2029, 4219, 3229, 11476, 6105, 2024, 2517, 1999, 2394, 1012, 102, 101, 2057, 2342, 2019, 10061, 21641, 6741, 2008, 2064, 2022, 2058, 24393, 2006, 4493, 1051, 13626, 2140, 2951, 4275, 2000, 4671, 2037, 6105, 1998, 2326, 28081, 2612, 1997, 2478, 3019, 2653, 1010, 2107, 2004, 2394, 29625, 7716, 12190, 2003, 2028, 1997, 1996, 2087, 2759, 2128, 4877, 2005, 14026, 3617, 6105, 3863, 1998, 6631, 1010, 2009, 2036, 2038, 2019, 102, 101, 2004, 2057, 2113, 1010, 20950, 2038, 1996, 3977, 1997, 10060, 2039, 15943, 1998, 2951, 2005, 3698, 6364, 2021, 2515, 2025, 2031, 1996, 10673, 1997, 17181, 1996, 6105, 28081, 1012, 102, 101, 1996, 12391, 1051, 13626, 2140, 3192, 2944, 3774, 1997, 2093, 4563, 11422, 1024, 7045, 1010, 2916, 1010, 1998, 4243, 1012, 102, 101, 2057, 2024, 2183, 2000, 18077, 2023, 2944, 2011, 4531, 2041, 2029, 3033, 1997, 6105, 28081, 2064, 2022, 3491, 2004, 3031, 6483, 2653, 1998, 2029, 3033, 2064, 2022, 3491, 2004, 3627, 2653, 29625, 12399, 12879, 5686, 1010, 2852, 2213, 3031, 6483, 1998, 2916, 10656, 6043, 2097, 2022, 2478, 6681, 2000, 5676, 2037, 6105, 28081, 1012, 102, 101, 2633, 1010, 2057, 2265, 2008, 2256, 12379, 2916, 10656, 2944, 2071, 12045, 13520, 1998, 16306, 2035, 7957, 1997, 2916, 10656, 28081, 2083, 4493, 1051, 13626, 2140, 11423, 1998, 2951, 4487, 7542, 12086, 1012, 102, 101, 1996, 5337, 28081, 2057, 16599, 2024, 2241, 2006, 21641, 4773, 3627, 2653, 1006, 25430, 12190, 1007, 1031, 1023, 1033, 1012, 102, 101, 25430, 12190, 2003, 1037, 2653, 2008, 13585, 6412, 7961, 13547, 2007, 7961, 2565, 3627, 2653, 1010, 2107, 2004, 3627, 19968, 5507, 2063, 1006, 2156, 8299, 29627, 29626, 29626, 2860, 2860, 2860, 29625, 6820, 16930, 2140, 29625, 21759, 29626, 29614, 22779, 1012, 1007, 102, 101, 1010, 2073, 1037, 7109, 11075, 3513, 2007, 1996, 5331, 2000, 13547, 2008, 9462, 2015, 2116, 12546, 1997, 3200, 4677, 2075, 1031, 1023, 1033, 1012, 102, 101, 3200, 4677, 2075, 2838, 3499, 2149, 2000, 1000, 4651, 2916, 1000, 2013, 2028, 2465, 1997, 3633, 2000, 2178, 3081, 10656, 5144, 2060, 2084, 4942, 26266, 11253, 2916, 12839, 29625, 2378, 1051, 13626, 2140, 1010, 2825, 6656, 8192, 2916, 2024, 4653, 1010, 6140, 1010, 2377, 1010, 1998, 15389, 1012, 102, 101, 2825, 6656, 4651, 2916, 2024, 2788, 4225, 2004, 2916, 2005, 2916, 1010, 2164, 5271, 1010, 18496, 1010, 2507, 1010, 1998, 10084, 1010, 4385, 1031, 2184, 1033, 1012, 102, 101, 3200, 4677, 2075, 2003, 1037, 4072, 3444, 2005, 4352, 2916, 10656, 6043, 2000, 11849, 2916, 2013, 2028, 2283, 2000, 2178, 2043, 2027, 7141, 2000, 2367, 4280, 1012, 102, 101, 2023, 2590, 3444, 2003, 2025, 3569, 2011, 2060, 3031, 6483, 1011, 2241, 21641, 4773, 3343, 4155, 1010, 2107, 2004, 10556, 2891, 1010, 24964, 1031, 2322, 1033, 1012, 102, 101, 2174, 1010, 2045, 2024, 2070, 12546, 2043, 2478, 25430, 12190, 2349, 2000, 3653, 16467, 2015, 2108, 3132, 2000, 2108, 13547, 4280, 1998, 5144, 2008, 2069, 2031, 1037, 4555, 11968, 3012, 1997, 2048, 1010, 2007, 2053, 2328, 1011, 1999, 20204, 3653, 16467, 2015, 2030, 2512, 8202, 25862, 2594, 2838, 1031, 1019, 1033, 1031, 1023, 1033, 1012, 102, 101, 3568, 1010, 2057, 2224, 13547, 1005, 2015, 3668, 5509, 2951, 13874, 2015, 2007, 14477, 2854, 1998, 12441, 20204, 9224, 1999, 6105, 3820, 22616, 2061, 2008, 1996, 2310, 3089, 8873, 2121, 2064, 20410, 3251, 3653, 2890, 24871, 5918, 1998, 14679, 1999, 1037, 6105, 2024, 24577, 2007, 2049, 2916, 10656, 3343, 1031, 2385, 1033, 1012, 102, 101, 2043, 20410, 2075, 1051, 13626, 2140, 5337, 28081, 1010, 1996, 3031, 6483, 1009, 3627, 1006, 25430, 12190, 1007, 3921, 2003, 6020, 2000, 1996, 12391, 7775, 2034, 2344, 7961, 1006, 1042, 4747, 1007, 5337, 28081, 2944, 1031, 2324, 1033, 1012, 102, 101, 2034, 1010, 12391, 7775, 1042, 4747, 1011, 2241, 2916, 10656, 6043, 2064, 2025, 2022, 8073, 13995, 2011, 2019, 4005, 2138, 2122, 1042, 4747, 1011, 2241, 6043, 3768, 1037, 21641, 2916, 2928, 6279, 2653, 1012, 102, 101, 2117, 1010, 4406, 2256, 25430, 12190, 1006, 3031, 21615, 1009, 3513, 1007, 6043, 1010, 7775, 12391, 1042, 4747, 6043, 2079, 2025, 2031, 1037, 2152, 2504, 1997, 22570, 2373, 1999, 2037, 10656, 6043, 1031, 1022, 1033, 1012, 102, 101, 2006, 1996, 2060, 2192, 1010, 1996, 2916, 10656, 28081, 3491, 2004, 1037, 12391, 2440, 1042, 4747, 2944, 2453, 2031, 1037, 3020, 11619, 1997, 6105, 22616, 1010, 2029, 3463, 1999, 1037, 3343, 12646, 9361, 2008, 2003, 4298, 6151, 8586, 8524, 3468, 1012, 102, 101, 2633, 1010, 4078, 26775, 4183, 22071, 2078, 7961, 1006, 21469, 1007, 1999, 25430, 12190, 2003, 4298, 19335, 2011, 14477, 2854, 1998, 12441, 20204, 9224, 2000, 11598, 2049, 5509, 2951, 13874, 3169, 1031, 1016, 1033, 1012, 102, 101, 2852, 2213, 1998, 2060, 2715, 3229, 7711, 1010, 2107, 2004, 9394, 3860, 1010, 21144, 6305, 1010, 4385, 1010, 2024, 2035, 5240, 2004, 1057, 9530, 5925, 4275, 2029, 17409, 20104, 1006, 1037, 1007, 1010, 14422, 1006, 1038, 1007, 1010, 1998, 3785, 1006, 1039, 1007, 3787, 1012, 102, 101, 8192, 2491, 2003, 1037, 2236, 3989, 1997, 3229, 2491, 2008, 4472, 20104, 1010, 14987, 1010, 3785, 1010, 13717, 1006, 7552, 7711, 1007, 1010, 1998, 14163, 2696, 8553, 1031, 2459, 1033, 1012, 102, 101, 1999, 1031, 2538, 1033, 1010, 1037, 3627, 1011, 2241, 3343, 2968, 2291, 2064, 2022, 7333, 1999, 2019, 2330, 1998, 5500, 7479, 2609, 2011, 4526, 1037, 1000, 3343, 5204, 1000, 6502, 1012, 102, 101, 2023, 3084, 1996, 6923, 10813, 1997, 3513, 1998, 6947, 2015, 2006, 1996, 4773, 2000, 2468, 1037, 4507, 1012, 102, 101, 2174, 1010, 2023, 8241, 1011, 2241, 3229, 2491, 6502, 2064, 2025, 2022, 4162, 2000, 2852, 2213, 2030, 2060, 4725, 1997, 9394, 3860, 2005, 8192, 1998, 2916, 10656, 2491, 2073, 2592, 2453, 2022, 4487, 11393, 26972, 2058, 1996, 2972, 4773, 1012, 102, 101, 10656, 7961, 1010, 1037, 2951, 21197, 1011, 3668, 12859, 3085, 7961, 1011, 2241, 2653, 2007, 3670, 1997, 10656, 5995, 1998, 3375, 27928, 2001, 3818, 2000, 5050, 6043, 1010, 22496, 1010, 1998, 11186, 1999, 5500, 20104, 1012, 102, 101, 2174, 1010, 2009, 2106, 2025, 2031, 1037, 2916, 2928, 6279, 2653, 2000, 12045, 4372, 16044, 2916, 10656, 3031, 6483, 2005, 6882, 4005, 6364, 1997, 2049, 2916, 10656, 28081, 1031, 2403, 1033, 1012, 102, 101, 1060, 10867, 2140, 2515, 2025, 2031, 5337, 28081, 1031, 1017, 1033, 1012, 102, 101, 2612, 1010, 1996, 1060, 10867, 2140, 12827, 7534, 28081, 1999, 2048, 3971, 1024, 2004, 2019, 2394, 6412, 1997, 1996, 2653, 2030, 2004, 2019, 9896, 2008, 16463, 2065, 2916, 2024, 2566, 26770, 2013, 1037, 2275, 1997, 15943, 1012, 102, 101, 1037, 5337, 3192, 2944, 2005, 1060, 10867, 2140, 28081, 2003, 3491, 2004, 1042, 4747, 1011, 2241, 2916, 3670, 8635, 1031, 1021, 1033, 1012, 102, 101, 1051, 13626, 2140, 2003, 2178, 2759, 20950, 1011, 2241, 2128, 2140, 2653, 2109, 2000, 2110, 1996, 3785, 2104, 2029, 4219, 2064, 2022, 11476, 2135, 11570, 1031, 2184, 1033, 1012, 102, 101, 1051, 13626, 2140, 2515, 2025, 2031, 5337, 28081, 2593, 1012, 102, 101, 1996, 3574, 1997, 1996, 2653, 1005, 2015, 20231, 2003, 2649, 1999, 2394, 1025, 6105, 10540, 2517, 1999, 1051, 13626, 2140, 2024, 2330, 2000, 7613, 2008, 3463, 1999, 21641, 27637, 1012, 102, 101, 1999, 2344, 2000, 10663, 2023, 3291, 1010, 1037, 5337, 3192, 2944, 2005, 1051, 13626, 2140, 28081, 2003, 3491, 2004, 1037, 12391, 7775, 1042, 4747, 2021, 2009, 2038, 2625, 22570, 2373, 2006, 2916, 3670, 1998, 10656, 2004, 2256, 25430, 12190, 3921, 1031, 2324, 1033, 1012, 102, 101, 1999, 1031, 1020, 1033, 1010, 2027, 2069, 3073, 1037, 12391, 6630, 1997, 3206, 2592, 2006, 2327, 1997, 2128, 4877, 2061, 2008, 1996, 7285, 1997, 3229, 2916, 2064, 2022, 15901, 2013, 1051, 13626, 2140, 1011, 2241, 3617, 6105, 8311, 1012, 102, 101, 2021, 1010, 3698, 3305, 3085, 5337, 28081, 2064, 2025, 2022, 3421, 1998, 13995, 1999, 2023, 2817, 1012, 102, 101, 1999, 1031, 1018, 1033, 1010, 2019, 13547, 1011, 2241, 1051, 13626, 2140, 5337, 21641, 2944, 2003, 2881, 1998, 7333, 2021, 2009, 2515, 2025, 2031, 8192, 1998, 4651, 2916, 10656, 2326, 10673, 1012, 102, 101, 1999, 12654, 1010, 1037, 5337, 3192, 2005, 1051, 13626, 2140, 2030, 1060, 10867, 2140, 28081, 2024, 3491, 2004, 2593, 1042, 4747, 2030, 13547, 1010, 2021, 2027, 2035, 3768, 21641, 1011, 5533, 7285, 1997, 2916, 10656, 6043, 1031, 1018, 1033, 1031, 2324, 1033, 1012, 102, 101, 1996, 2430, 9570, 1997, 1051, 13626, 2140, 2003, 1037, 6105, 3820, 1012, 102, 101, 1037, 6105, 3820, 7127, 1996, 6043, 1006, 3513, 1007, 2104, 2029, 1037, 4054, 1052, 15544, 2078, 1051, 4473, 2178, 4054, 1052, 15544, 2078, 21318, 2000, 2224, 2019, 11412, 1054, 10712, 3079, 2011, 1052, 15544, 2078, 1051, 1010, 2073, 1052, 15544, 2078, 1051, 2003, 2019, 11412, 3954, 1998, 1052, 15544, 2078, 1057, 1045, 2003, 2028, 1997, 102, 101, 1037, 6105, 3820, 5218, 2000, 1037, 3343, 2275, 4760, 2151, 2193, 1997, 3653, 2890, 24871, 2015, 1998, 6043, 1012, 102, 101, 1037, 3653, 2890, 24871, 2003, 2593, 1037, 27142, 1010, 1037, 9095, 1010, 2030, 1037, 4650, 1012, 102, 101, 14679, 2024, 8866, 2008, 2024, 2648, 1996, 1052, 15544, 2078, 1057, 1045, 1005, 2015, 3747, 2021, 2024, 4225, 2011, 1996, 11412, 3954, 1052, 15544, 2078, 1051, 1010, 2107, 2004, 10320, 2030, 15850, 9259, 2005, 3617, 11412, 8192, 2916, 1012, 102, 101, 5918, 2024, 8866, 2008, 2024, 2306, 1996, 1052, 15544, 2078, 1057, 1045, 5310, 1005, 2015, 2373, 2000, 3113, 1010, 2107, 2004, 17463, 14326, 9883, 2077, 2478, 1037, 3327, 11412, 1012, 102, 101, 3785, 2024, 14679, 2008, 2442, 2025, 2907, 11790, 1031, 2324, 1033, 1012, 102, 101, 2065, 2035, 1997, 1996, 3653, 2890, 24871, 2015, 2024, 2777, 1010, 2059, 1037, 3343, 2758, 2008, 1996, 3820, 1005, 2015, 5198, 2089, 4685, 1996, 2895, 2005, 1996, 6105, 3820, 1005, 2015, 7045, 1012, 102, 101, 1051, 13626, 2140, 2515, 2025, 16306, 2030, 11405, 2151, 6043, 2005, 2852, 2213, 1010, 2021, 3640, 10595, 2000, 4671, 2107, 6043, 1012, 102, 101, 1051, 13626, 2140, 15480, 5383, 3670, 2653, 1010, 2951, 9206, 3787, 1010, 1998, 20950, 20231, 2000, 4372, 16044, 1996, 1051, 13626, 2140, 11423, 1998, 3787, 1031, 2184, 1033, 1012, 102, 101, 2057, 2024, 2183, 2000, 2224, 2122, 1051, 13626, 2140, 3670, 2653, 1998, 2951, 9206, 3787, 2004, 2256, 2916, 10656, 3031, 6483, 1005, 2015, 11422, 1006, 2156, 20965, 29625, 1015, 1007, 1012, 102, 101, 1996, 3120, 1997, 2023, 3031, 6483, 17158, 3989, 2003, 2241, 2006, 1996, 1051, 13626, 2140, 1015, 29625, 2487, 12827, 12045, 12854, 1996, 1051, 13626, 2140, 1005, 2015, 2916, 10656, 28081, 2005, 1037, 6105, 1999, 2023, 3031, 6483, 1031, 2184, 1033, 1012, 102, 101, 1996, 2465, 1998, 3200, 3408, 4225, 1999, 2023, 2916, 10656, 3031, 6483, 2097, 2022, 2641, 2004, 14405, 26005, 28986, 2030, 7091, 1006, 1055, 1007, 1999, 1996, 2206, 8192, 2916, 10656, 6043, 2000, 16306, 2035, 7957, 1997, 2613, 2916, 10656, 28937, 1006, 2156, 2930, 1019, 29625, 2475, 1007, 1012, 102, 101, 2057, 9375, 2038, 2226, 10878, 15950, 2015, 2004, 2019, 10061, 3200, 7851, 1996, 12391, 8192, 2916, 2005, 1037, 4054, 1060, 2000, 2224, 2019, 11412, 1054, 1012, 102, 101, 1996, 5884, 2465, 1997, 2038, 2226, 10878, 15950, 2015, 3200, 2003, 1052, 2396, 2100, 1010, 1998, 1996, 2846, 2465, 2003, 11412, 1006, 2156, 20965, 29625, 1016, 1007, 1012, 102, 101, 1996, 5884, 2465, 1997, 11849, 3200, 2003, 1052, 15544, 2078, 1051, 1998, 1996, 2846, 2465, 2003, 1052, 15544, 2078, 1057, 1010, 2073, 1996, 11849, 2515, 2031, 4942, 2361, 8164, 5339, 7677, 2546, 1006, 11849, 1043, 1010, 11849, 1056, 1010, 1087, 1087, 1087, 1007, 1012, 102, 101, 1996, 11849, 1043, 5836, 12391, 8192, 2916, 10656, 3200, 1998, 1996, 11849, 1056, 5836, 2916, 4651, 10656, 3200, 1012, 102, 101, 2057, 2079, 2025, 3499, 1037, 4054, 1060, 2022, 2583, 2000, 11849, 2010, 2030, 2014, 12391, 2916, 2000, 2178, 4054, 1061, 2065, 2008, 4054, 1060, 2069, 2038, 2070, 8192, 2916, 2021, 2515, 2025, 2031, 2151, 2566, 26770, 4651, 2916, 1012, 102, 101, 1996, 10656, 6194, 2005, 4651, 2916, 6105, 10540, 2024, 8878, 2478, 11849, 1056, 3200, 1010, 2073, 1996, 2916, 8393, 8617, 1996, 11849, 2094, 2916, 2021, 1996, 2916, 3954, 2453, 4558, 1996, 2916, 8184, 2030, 8642, 1012, 102, 101, 2023, 2003, 2025, 2995, 2005, 2070, 2916, 10656, 16820, 2073, 1996, 2916, 3954, 1998, 1996, 2916, 8393, 2453, 2031, 2037, 2916, 15442, 1012, 102, 101, 2947, 1010, 2057, 3443, 1037, 2916, 24473, 10656, 1010, 5393, 2004, 11849, 1040, 2013, 1037, 3528, 1997, 4651, 2916, 1012, 102, 101, 1999, 2023, 2916, 24473, 10656, 3200, 11849, 1040, 1010, 1996, 2916, 2434, 3954, 1010, 15442, 2038, 2010, 2030, 2014, 2219, 2916, 2007, 1996, 2916, 8393, 2044, 1996, 2916, 24473, 10656, 2832, 2003, 2949, 1012, 102, 101, 2057, 2179, 2008, 13248, 2916, 19278, 2024, 4909, 2625, 2916, 1999, 1996, 2916, 10656, 4677, 1012, 102, 101, 2019, 2434, 4180, 8543, 2788, 27171, 2010, 2030, 2014, 8192, 1998, 4651, 2916, 10656, 2007, 1037, 9608, 2193, 1997, 5995, 1040, 2011, 27142, 1997, 1608, 100, 1040, 2038, 2102, 2743, 22747, 9413, 3597, 16671, 1010, 2073, 1040, 2003, 1037, 5377, 1998, 2003, 10548, 2011, 2028, 2005, 2169, 10656, 1012, 102, 101, 2947, 1010, 1996, 2916, 10656, 2832, 2064, 2022, 9124, 2004, 2146, 2004, 1996, 4650, 1609, 1015, 2038, 2102, 2743, 22747, 9413, 3597, 16671, 2003, 3606, 1999, 1037, 10656, 3343, 1006, 2156, 3627, 1006, 1051, 2549, 1007, 1999, 2930, 1019, 29625, 2475, 1007, 1012, 102, 101, 1999, 12654, 1010, 2057, 2224, 3668, 13547, 1005, 2015, 14477, 2854, 20204, 9224, 2000, 4671, 1037, 3653, 2890, 24871, 2008, 2064, 2022, 1037, 27142, 1010, 1037, 9095, 1010, 1037, 4650, 1010, 2030, 2130, 1037, 10656, 5995, 29625, 8663, 20528, 18447, 2015, 2005, 3653, 2890, 24871, 2107, 2004, 1010, 17463, 14326, 3785, 1010, 2566, 26770, 4175, 1997, 3356, 1006, 2030, 6635, 1007, 5787, 1997, 102, 101, 11412, 1011, 4098, 11522, 13290, 3012, 1024, 1608, 100, 1056, 2038, 2102, 2743, 22747, 9413, 3597, 16671, 100, 1052, 1012, 102, 101, 11412, 1011, 7185, 3012, 1024, 1027, 100, 1037, 2038, 2361, 16360, 14326, 100, 1052, 1012, 102, 101, 1052, 2396, 2100, 1011, 16406, 1997, 2051, 13483, 100, 1056, 10047, 2063, 1596, 1006, 1056, 1015, 1010, 1056, 1016, 1007, 1024, 1609, 100, 1056, 1015, 2038, 13701, 2102, 10047, 2063, 100, 1052, 1012, 102, 101, 1056, 10047, 2063, 1602, 100, 1608, 1056, 1016, 2038, 13701, 2102, 10047, 2063, 100, 1052, 1012, 102, 101, 1056, 10047, 2229, 8462, 7292, 2015, 1010, 1996, 8192, 2916, 3653, 2890, 24871, 2003, 16348, 2011, 1037, 4054, 2040, 2003, 1999, 3715, 1997, 1037, 10320, 2895, 2008, 17427, 2035, 4072, 14163, 10880, 8866, 2013, 1996, 13248, 2916, 19278, 1999, 1996, 10656, 4677, 1012, 102, 101, 2057, 2265, 3785, 2004, 1996, 2206, 1010, 2073, 100, 1027, 100, 1057, 2038, 2226, 10878, 3597, 16671, 100, 1052, 1012, 102, 101, 11412, 1010, 100, 1609, 100, 1056, 1015, 2038, 13701, 2102, 10047, 2063, 100, 1052, 1012, 102, 101, 1056, 10047, 2063, 1010, 100, 1608, 100, 1056, 1016, 2038, 13701, 2102, 10047, 2063, 100, 1052, 1012, 102, 101, 1056, 10047, 2063, 1010, 1998, 100, 2038, 2361, 16360, 14326, 100, 1052, 1012, 102, 101, 1052, 2396, 2100, 1010, 5769, 2029, 4054, 1052, 2003, 1999, 3715, 1997, 14163, 10880, 27142, 16381, 22334, 2015, 1998, 3343, 12646, 9361, 1031, 2321, 1033, 1012, 102, 101, 2035, 1997, 2122, 2097, 2022, 7645, 1999, 2930, 1019, 29625, 2509, 1012, 102, 101, 1996, 2038, 2102, 2743, 22747, 9413, 15950, 2015, 2003, 2019, 10061, 3200, 7851, 1996, 4651, 2916, 10656, 1997, 8192, 2916, 2005, 1037, 4054, 1060, 2005, 2019, 11412, 1054, 1012, 102, 101, 1996, 5884, 2465, 1997, 3200, 2038, 2102, 2743, 22747, 9413, 15950, 2015, 2003, 1052, 2396, 2100, 1998, 1996, 2846, 2465, 2003, 11412, 1012, 102, 101, 1052, 15544, 2078, 1051, 2453, 2224, 11849, 1043, 2000, 4651, 8192, 2916, 2069, 2000, 1052, 15544, 2078, 21318, 1010, 2073, 1045, 1596, 1006, 1015, 1010, 1087, 1087, 1087, 1010, 1050, 1007, 1010, 2021, 2515, 2025, 11849, 2010, 4651, 2916, 2000, 1052, 15544, 2078, 21318, 1010, 2073, 4651, 2916, 1596, 1006, 2038, 23836, 1056, 2916, 102, 101, 3568, 1010, 2169, 1052, 15544, 2078, 1057, 1045, 2064, 2025, 2582, 11849, 2010, 8192, 2916, 2000, 2178, 1052, 15544, 2078, 1057, 1046, 1006, 2156, 3627, 1006, 1051, 2475, 1007, 1007, 1012, 102, 101, 2065, 2057, 2224, 11849, 1056, 3200, 1010, 2059, 2151, 2028, 1997, 1996, 4651, 2916, 6656, 2015, 1596, 1006, 2038, 23836, 1056, 2916, 1010, 1087, 1087, 1087, 1007, 1998, 8192, 2916, 2064, 2022, 2582, 17678, 16098, 3064, 1006, 2156, 3627, 1006, 1051, 2549, 1007, 1007, 1012, 102, 101, 1996, 5995, 1997, 4651, 10656, 2064, 2022, 9675, 1999, 2465, 11412, 2007, 7185, 3012, 3491, 2004, 100, 1027, 100, 1050, 2038, 2102, 2743, 22747, 9413, 3597, 16671, 29625, 15878, 14659, 1010, 2029, 7127, 2008, 1996, 4651, 2916, 6656, 2005, 26885, 2064, 2022, 17678, 16098, 3064, 2007, 1996, 6635, 10656, 5995, 1997, 1050, 1024, 1011, 2065, 2283, 1060, 2038, 2119, 8192, 102, 101, 2005, 4436, 1997, 2686, 1010, 1037, 6851, 6594, 1997, 1996, 13494, 1997, 2256, 3143, 6515, 28081, 2005, 2023, 11967, 2003, 2187, 2000, 1996, 2440, 3259, 2005, 2582, 2817, 1012, 102, 101, 2023, 2453, 2342, 1037, 4613, 1011, 2552, 4005, 4807, 2653, 2000, 5050, 4471, 4458, 3031, 6483, 1010, 2029, 2052, 2059, 3499, 2256, 6074, 2000, 8073, 3863, 9123, 2592, 2426, 3209, 2004, 3491, 1999, 1031, 2340, 1033, 1024, 1011, 3019, 2653, 1006, 17953, 1007, 7939, 17287, 3508, 1997, 6105, 3820, 1024, 4180, 16632, 4918, 102, 101, 2044, 2169, 7079, 2274, 6363, 1010, 1998, 2059, 2119, 4909, 13399, 3672, 2013, 4918, 1010, 5650, 1998, 3960, 2024, 2445, 1996, 8192, 2916, 1998, 2089, 2169, 4653, 2019, 26885, 11412, 1010, 4302, 10693, 1998, 1996, 2331, 2135, 2534, 15568, 1010, 2039, 2000, 2274, 2335, 1012, 102, 101, 2027, 2089, 2169, 6140, 2009, 2069, 2320, 1012, 102, 101, 2174, 1010, 1996, 2561, 2193, 1997, 4506, 1010, 2593, 8834, 2030, 11204, 2589, 2011, 5650, 1998, 3960, 1010, 2089, 2022, 2012, 2087, 2702, 1012, 102, 101, 100, 1060, 1006, 1006, 1060, 1027, 5650, 1603, 1060, 1027, 3960, 1007, 1027, 1591, 100, 1056, 1015, 100, 1056, 1016, 1006, 1056, 1015, 1026, 1056, 1016, 1602, 1052, 4681, 1006, 1019, 1010, 1056, 1015, 1007, 1602, 7108, 1006, 4918, 1010, 1056, 1016, 1007, 1007, 1007, 1027, 1591, 100, 1056, 1602, 102, 101, 1999, 1996, 6879, 6494, 14853, 2754, 1010, 4918, 1039, 2038, 2035, 1997, 1996, 8192, 1998, 4651, 1006, 2030, 24473, 1007, 2916, 2005, 1996, 26885, 2465, 1010, 2164, 4302, 11008, 3334, 1998, 1996, 2331, 2135, 2534, 15568, 1010, 2029, 2024, 3491, 2004, 1996, 8866, 1999, 1996, 2206, 3931, 1012, 102, 101, 3031, 6483, 8635, 1006, 27723, 1007, 1011, 1006, 1039, 2509, 1007, 5769, 1996, 14679, 1997, 3378, 8192, 9294, 3491, 1999, 1996, 2682, 1042, 4747, 5675, 1012, 102, 101, 2044, 10390, 5650, 1037, 1998, 3960, 1038, 7079, 2274, 6363, 1010, 2059, 2057, 2224, 3513, 1006, 1039, 2549, 1007, 1011, 1006, 1039, 2581, 1007, 2000, 18547, 8866, 1006, 1039, 2620, 1007, 1998, 1006, 1039, 2683, 1007, 2008, 2468, 5650, 1055, 1037, 8866, 1006, 1037, 2549, 1007, 1998, 1006, 1037, 2629, 1007, 1998, 18547, 8866, 1006, 27723, 2692, 102, 101, 3513, 1006, 1039, 2549, 1007, 1998, 1006, 1039, 2629, 1007, 2024, 7772, 3572, 2005, 3627, 1006, 1051, 2487, 1007, 1010, 2096, 3513, 1006, 1039, 2575, 1007, 1998, 1006, 1039, 2581, 1007, 2024, 7772, 3572, 2005, 3627, 1006, 1051, 2475, 1007, 1010, 3491, 1999, 2930, 1019, 29625, 2475, 1012, 102, 101, 1996, 14163, 10880, 8866, 1006, 27723, 2475, 1007, 1011, 1006, 27723, 2549, 1007, 5769, 1037, 20057, 12326, 1997, 2783, 8192, 1010, 4653, 1010, 1998, 6140, 9294, 5067, 2013, 2119, 5650, 1037, 1998, 3960, 1038, 1025, 2027, 2097, 2022, 2579, 2046, 7680, 28649, 2011, 4918, 1039, 29625, 1011, 25430, 12190, 1006, 3031, 21615, 1009, 3513, 1007, 7939, 17287, 3508, 1997, 6105, 102, 101, 1063, 4302, 2361, 22279, 1065, 1007, 1010, 1045, 1596, 1063, 1037, 1010, 1038, 1065, 1010, 2073, 1155, 1024, 100, 2038, 10521, 13068, 3597, 16671, 1039, 1012, 102, 101, 1063, 4302, 2361, 22279, 1065, 1583, 1597, 1006, 27723, 1007, 100, 1027, 1156, 100, 1027, 7680, 1006, 100, 1608, 1015, 2038, 2361, 15544, 3372, 3597, 16671, 1045, 1012, 102, 101, 1063, 4302, 2361, 22279, 1065, 1007, 1010, 1045, 1596, 1063, 1037, 1010, 1038, 1065, 1010, 2073, 1156, 1024, 100, 2038, 2361, 15544, 3372, 3597, 16671, 1039, 1012, 102, 101, 1063, 4302, 2361, 22279, 1065, 1583, 1597, 1006, 29248, 1007, 100, 1027, 1158, 7680, 1006, 1155, 1010, 1156, 1007, 1010, 2073, 1158, 1024, 100, 2038, 2226, 10878, 3597, 16671, 1039, 1063, 4302, 2361, 22279, 1065, 1583, 1597, 1006, 1039, 2509, 1007, 1008, 3513, 1024, 2038, 10521, 13068, 15950, 2015, 1006, 1029, 102, 101, 1054, 1007, 1602, 2038, 23836, 1040, 2916, 1006, 1029, 102, 101, 1054, 1007, 1027, 1591, 2038, 10521, 13068, 23836, 1040, 2916, 1006, 1029, 102, 101, 1054, 1007, 1583, 1597, 1006, 1039, 2549, 1007, 2038, 2361, 15544, 3372, 15950, 2015, 1006, 1029, 102, 101, 1054, 1007, 1602, 2038, 23836, 1040, 2916, 1006, 1029, 102, 101, 1054, 1007, 1027, 1591, 2038, 2361, 15544, 7666, 5349, 1040, 2916, 1006, 1029, 102, 101, 1054, 1007, 1583, 1597, 1006, 1039, 2629, 1007, 2038, 10521, 13068, 23836, 1040, 2916, 1006, 1029, 102, 101, 1054, 1007, 1602, 11849, 1043, 1006, 1029, 102, 101, 1061, 1007, 1602, 2038, 2361, 16360, 14326, 1006, 1029, 102, 101, 1037, 1007, 1602, 1027, 1591, 2038, 10521, 13068, 15950, 2015, 1006, 1029, 102, 101, 1054, 1007, 1583, 1597, 1006, 1039, 2575, 1007, 1583, 1597, 1006, 27723, 2487, 1007, 11849, 1043, 1006, 4918, 1010, 5650, 1007, 11849, 1043, 1006, 4918, 1010, 3960, 1007, 100, 1027, 1021, 2038, 2226, 10878, 3597, 16671, 1039, 1006, 4302, 2361, 22279, 1007, 1583, 1597, 1006, 27723, 2475, 1007, 100, 1027, 1020, 2038, 10521, 13068, 3597, 16671, 1039, 1006, 4302, 2361, 22279, 1007, 102, 101, 1999, 2755, 1010, 3513, 1006, 17350, 1007, 1998, 1006, 22441, 1007, 2024, 7772, 3572, 1997, 3627, 1006, 1051, 2509, 1007, 1999, 2930, 1019, 29625, 2475, 1012, 102, 101, 2005, 2742, 1010, 2065, 5650, 1037, 5176, 6656, 2000, 6140, 4302, 2361, 22279, 1010, 2014, 5227, 2097, 2022, 4379, 2138, 8866, 1006, 1037, 2629, 1007, 1010, 1006, 1037, 2581, 1007, 1010, 1998, 1006, 1037, 2620, 1007, 19515, 2008, 2035, 1997, 1996, 3785, 2006, 3627, 1006, 22441, 1007, 1055, 14405, 26005, 28986, 2024, 2035, 2995, 1012, 102, 101, 3568, 1010, 1996, 7091, 1052, 9413, 22930, 3064, 1037, 1006, 1052, 15544, 3372, 1010, 4302, 2361, 22279, 1007, 2003, 2995, 1012, 102, 101, 2006, 1996, 2060, 2192, 1010, 2065, 3960, 1038, 5176, 6656, 2000, 6140, 4302, 2361, 22279, 1010, 2009, 2097, 2025, 2022, 4379, 2138, 14163, 10880, 2755, 1006, 1038, 2629, 1007, 12748, 2008, 1026, 1015, 2038, 2361, 15544, 3372, 3597, 16671, 1038, 1006, 4302, 2361, 22279, 1007, 2003, 6270, 1010, 2061, 1996, 7091, 1052, 9413, 22930, 3064, 1038, 1006, 1052, 15544, 3372, 1010, 102, 101, 1999, 2256, 3343, 7705, 1010, 2057, 7868, 2008, 2054, 2003, 2025, 12045, 7936, 2003, 10386, 1012, 102, 101, 3568, 1010, 1037, 6656, 5227, 2000, 6140, 2097, 2022, 6380, 1012, 102, 101, 1528, 100, 1027, 1019, 2038, 10521, 13068, 3597, 16671, 1038, 1006, 4302, 2361, 22279, 1007, 1583, 1597, 1006, 1038, 2549, 1007, 100, 1027, 1015, 2038, 2361, 15544, 3372, 3597, 16671, 1038, 1006, 4302, 2361, 22279, 1007, 1583, 1597, 1006, 1038, 2629, 1007, 100, 1027, 1021, 2038, 2226, 10878, 3597, 16671, 1039, 1006, 4302, 2361, 22279, 1007, 1583, 1597, 1006, 1038, 2575, 1007, 1999, 20965, 1017, 1010, 1996, 102, 101, 3568, 1010, 6043, 2241, 2006, 2122, 2128, 4877, 2000, 6235, 1037, 6105, 3820, 1006, 2030, 3206, 1007, 2024, 2788, 2517, 1999, 3019, 2653, 2000, 5769, 2037, 3574, 2005, 1996, 22616, 1997, 3229, 2916, 6656, 1012, 102, 101, 2004, 1037, 2765, 1010, 2122, 3019, 2653, 6043, 2823, 2024, 2330, 2000, 7613, 1010, 2029, 2765, 1999, 27637, 1997, 3343, 28081, 1012, 102, 101, 1999, 2344, 2000, 6366, 2023, 3291, 1010, 2111, 2224, 1042, 4747, 2000, 5050, 1998, 3114, 3229, 2916, 2491, 6043, 1006, 2156, 20965, 1017, 1007, 1012, 102, 101, 2004, 2057, 2113, 1010, 1042, 4747, 1011, 2241, 6043, 2031, 1037, 5337, 1998, 3154, 20231, 1998, 28081, 1010, 2130, 2122, 1042, 4747, 1011, 2241, 6043, 2788, 2031, 2000, 5787, 2037, 22570, 2373, 1999, 2344, 2000, 5425, 2216, 6105, 10540, 2008, 2024, 2761, 2517, 1999, 2394, 1012, 102, 101, 6854, 1010, 6043, 3491, 2004, 1042, 4747, 2467, 5478, 3343, 4898, 1998, 8141, 2000, 2022, 7961, 7066, 1012, 102, 101, 7297, 1010, 6043, 5393, 2004, 1037, 12391, 2440, 1042, 4747, 2089, 3444, 12646, 9361, 2008, 2089, 2022, 6151, 8586, 8524, 3468, 2005, 2037, 22334, 2051, 29625, 3406, 10663, 2023, 21883, 1010, 2057, 2024, 2183, 2000, 8849, 1996, 22570, 2373, 1997, 2367, 1042, 4747, 1011, 2241, 6043, 15066, 2000, 5630, 2029, 3785, 3499, 2149, 2000, 2031, 2119, 11703, 8524, 3468, 102, 101, 1999, 2344, 2000, 2031, 1037, 11703, 8524, 3468, 1998, 12859, 3085, 15778, 1997, 1042, 4747, 1011, 2241, 6043, 2000, 16306, 7972, 12646, 9361, 1010, 2057, 2788, 21573, 6043, 2004, 2951, 21197, 7109, 3513, 1010, 2073, 2027, 2024, 11265, 12540, 1011, 2489, 1010, 3853, 1011, 2489, 1010, 1998, 2007, 3132, 2193, 1997, 16381, 11968, 6447, 1012, 102, 101, 6412, 7961, 1006, 21469, 1007, 2003, 1037, 11703, 8524, 3468, 15778, 1997, 1042, 4747, 1998, 7961, 2565, 1006, 6948, 1007, 2003, 4876, 3141, 2000, 1996, 7109, 15778, 1997, 1042, 4747, 1012, 102, 101, 1999, 2236, 1010, 1037, 2440, 1042, 4747, 2003, 6151, 8586, 8524, 3468, 1998, 26721, 23576, 2130, 2104, 1996, 2951, 21197, 16840, 1012, 102, 101, 2004, 3491, 1999, 1031, 1019, 1033, 1010, 6412, 7961, 3454, 1006, 21469, 2361, 1007, 2003, 2019, 22570, 15778, 1997, 1042, 4747, 1998, 2009, 3640, 1037, 3278, 3014, 1997, 22570, 2791, 1998, 12381, 3618, 2373, 2084, 1996, 16428, 2546, 1011, 1055, 15778, 1997, 21469, 1012, 102, 101, 2241, 2006, 21469, 2361, 1010, 1996, 21641, 4773, 3627, 2653, 1006, 25430, 12190, 1007, 2003, 9839, 2062, 3928, 2084, 2593, 1996, 13547, 21469, 3031, 6483, 2653, 2030, 1996, 2951, 21197, 7109, 2806, 3627, 2653, 2894, 2138, 25430, 12190, 8908, 13547, 2007, 1996, 3937, 7957, 1997, 2951, 21197, 7109, 3627, 1010, 2029, 2163, 2004, 3653, 16467, 2015, 2024, 3132, 102, 101, 6043, 1999, 2951, 21197, 7109, 3513, 2467, 7868, 2008, 2054, 2003, 2025, 12045, 7936, 2003, 10386, 1012, 102, 101, 1999, 2008, 2553, 1010, 2057, 2064, 2025, 10782, 10386, 3229, 2916, 2013, 4895, 2890, 24848, 4383, 3229, 2916, 1999, 1037, 6105, 3820, 1012, 102, 101, 7297, 1010, 2057, 2453, 2342, 3853, 10673, 1999, 1042, 4747, 1011, 2241, 6043, 2000, 2490, 22969, 2394, 6043, 2000, 1042, 4747, 3924, 1012, 102, 101, 3568, 1010, 1037, 12859, 3085, 4942, 25023, 6692, 3351, 1010, 22157, 1010, 2007, 29398, 2015, 16840, 1010, 1041, 29625, 2290, 29625, 1010, 2053, 29398, 18204, 2015, 1999, 1996, 1042, 4747, 3513, 1010, 2001, 3818, 1999, 1031, 1022, 1033, 2000, 2490, 2049, 6630, 1997, 16039, 6043, 1998, 3132, 4972, 1999, 2037, 6105, 3820, 6043, 1012, 102, 101, 2130, 2295, 1996, 22157, 6043, 2024, 2241, 2006, 1996, 23370, 1997, 1996, 2951, 21197, 7109, 3513, 1010, 2057, 2145, 2903, 2008, 2023, 12859, 3085, 3343, 2653, 2003, 2069, 2284, 4873, 1999, 1037, 2235, 16745, 1997, 1042, 4747, 2653, 1012, 102, 101, 3568, 1010, 2009, 2145, 14087, 1037, 2312, 4664, 1997, 13547, 1011, 21469, 1998, 2951, 21197, 7109, 3627, 22570, 2373, 2000, 3710, 2119, 2157, 10656, 3031, 6483, 1998, 8192, 1006, 2030, 4651, 1007, 2916, 10656, 3513, 1010, 2004, 3491, 1999, 2930, 1018, 1998, 2930, 1019, 29625, 2475, 1012, 102, 101, 1999, 1031, 2322, 1033, 1010, 10556, 2891, 1998, 24964, 3343, 4155, 2020, 3491, 2004, 2761, 2013, 5477, 2140, 1585, 13547, 1998, 16428, 2546, 1011, 1055, 2061, 2009, 2003, 3243, 20610, 2008, 2122, 2048, 3343, 4155, 2024, 6414, 1037, 16745, 1997, 25430, 12190, 1012, 102, 101, 3568, 1010, 1996, 22570, 2373, 1997, 10556, 2891, 1998, 24964, 2024, 2625, 2084, 25430, 12190, 2138, 1996, 2916, 10656, 6043, 2064, 2025, 2022, 3491, 2004, 1037, 5760, 13547, 1011, 21469, 3031, 6483, 2653, 2894, 1012, 102, 101, 1999, 1031, 2260, 1033, 1010, 24964, 2001, 3668, 2000, 2022, 1037, 3343, 1998, 10656, 7705, 2008, 2950, 6970, 29624, 16570, 4383, 4219, 1010, 6043, 1010, 3343, 4155, 1010, 1998, 18804, 1011, 6043, 1012, 102, 101, 2174, 1010, 20104, 10656, 6043, 2020, 2025, 12045, 2464, 1999, 2023, 2817, 29625, 2378, 2023, 3259, 1010, 2057, 16462, 1996, 2373, 1997, 25430, 12190, 4117, 2653, 2000, 10580, 1996, 6061, 1997, 21641, 1011, 5533, 7285, 1997, 2916, 10656, 6043, 1012, 102, 101, 1037, 6105, 3820, 2005, 1037, 2916, 10656, 3343, 2003, 1037, 3343, 2275, 4760, 2151, 2193, 1997, 3653, 2890, 24871, 2015, 1998, 7882, 6043, 1012, 102, 101, 1037, 3343, 2275, 2003, 3605, 1997, 8866, 1010, 3031, 21615, 1010, 1998, 3513, 1012, 102, 101, 2122, 6105, 10540, 2024, 5500, 2011, 16632, 4918, 2000, 10390, 5650, 1998, 3960, 1012, 102, 101, 1999, 2023, 10656, 11967, 1010, 1996, 8192, 2916, 2024, 4162, 2000, 1996, 2972, 26885, 2465, 2612, 1997, 6414, 2000, 1996, 6013, 1997, 4302, 2361, 22279, 1005, 2015, 26885, 1012, 102, 101, 1999, 2023, 3343, 1011, 5204, 5500, 2852, 2213, 2291, 1010, 2169, 9480, 2852, 2213, 13045, 2323, 11633, 2135, 16306, 2049, 2916, 10656, 6043, 3081, 2049, 1000, 12646, 9361, 1000, 28937, 3194, 29625, 12399, 2063, 2024, 2195, 14163, 10880, 8866, 1999, 2169, 13045, 2008, 4671, 1037, 3653, 2890, 24871, 1005, 2015, 8790, 3570, 1012, 102, 101, 2122, 14163, 10880, 8866, 2097, 2022, 7172, 1998, 2979, 2090, 16632, 1998, 10390, 7188, 1037, 8192, 2916, 6656, 2003, 4379, 1998, 10202, 1012, 102, 101, 1996, 14163, 10880, 8866, 2039, 16616, 4023, 2097, 2022, 7531, 2004, 2019, 2724, 1011, 4650, 18908, 3258, 1006, 14925, 2050, 1007, 4668, 3627, 1010, 2073, 2724, 2453, 2022, 13330, 2011, 1037, 5310, 1005, 2015, 5227, 2030, 1037, 4471, 1005, 2015, 5508, 1012, 102, 101, 1996, 4650, 2003, 9675, 1999, 2169, 7882, 2916, 10656, 3627, 1998, 1996, 2895, 2950, 8192, 2916, 7285, 1998, 14163, 10880, 2755, 2039, 16616, 4506, 1012, 102, 101, 2057, 2031, 3491, 2008, 1996, 21641, 5337, 2944, 2005, 2019, 1051, 13626, 2140, 1011, 2241, 2916, 10656, 3343, 2064, 2022, 16348, 2011, 14026, 2068, 2004, 1037, 5257, 1997, 3031, 21615, 1998, 3513, 1012, 102, 101, 2241, 2006, 1051, 13626, 2140, 1005, 2015, 11423, 1998, 2951, 9206, 1010, 1037, 2916, 10656, 3031, 6483, 2003, 3818, 1999, 2023, 2817, 1012, 102, 101, 7297, 1010, 2057, 2036, 4671, 1996, 2916, 10656, 3343, 2004, 1037, 2275, 1997, 3513, 2005, 8192, 1998, 4651, 1006, 2030, 24473, 1007, 2916, 10656, 2015, 1012, 102, 101, 2043, 20410, 2075, 1051, 13626, 2140, 5337, 28081, 1010, 2256, 25430, 12190, 3921, 2003, 2172, 2062, 6020, 2000, 1996, 12391, 7775, 1042, 4747, 2944, 2138, 1997, 1996, 3618, 11343, 1997, 1037, 2916, 2928, 6279, 2653, 1998, 1996, 3020, 22570, 2373, 1997, 3343, 12646, 9361, 2013, 2256, 25430, 12190, 2653, 1012, 102, 101, 1037, 2613, 8192, 2916, 10656, 11967, 2003, 7645, 1999, 2023, 3259, 2000, 16114, 2256, 5337, 21641, 2944, 1012, 102], "tgt": [1, 21641, 1011, 5533, 7285, 1997, 2916, 10656, 6043, 3081, 1996, 5257, 1997, 3513, 1998, 3031, 21615, 11268, 29625, 1006, 2852, 29625, 1007, 9805, 2232, 1011, 18528, 15876, 2285, 1011, 17134, 29624, 28332, 2581, 15876, 29633, 6169, 29625, 12273, 10841, 29625, 2098, 2226, 29625, 2102, 2860, 8361, 2897, 2974, 1006, 4372, 2102, 1007, 6845, 1012, 3, 2533, 1997, 3274, 2671, 2120, 15898, 5428, 2118, 1010, 14004, 1010, 6629, 12685, 4955, 2470, 3125, 2256, 3921, 3141, 2147, 6105, 3820, 2005, 8192, 1006, 2030, 4651, 1007, 2916, 8192, 2916, 10656, 1037, 2916, 10656, 3031, 6483, 4651, 2916, 10656, 3653, 2890, 24871, 2015, 11423, 2916, 4651, 10656, 3513, 1037, 8192, 2916, 10656, 11967, 6594, 7091, 4955, 20950, 1011, 2241, 3617, 2157, 3670, 1006, 2030, 12157, 1007, 4155, 1010, 2107, 2004, 1051, 13626, 2140, 1010, 1060, 10867, 2140, 1010, 1052, 2509, 2361, 1010, 3768, 3698, 3305, 3085, 5337, 28081, 1997, 6105, 10540, 2005, 6882, 4005, 6364, 1012, 3, 12391, 2034, 2344, 7961, 1006, 1042, 4747, 1007, 3640, 5337, 28081, 2005, 1996, 2682, 10318, 20950, 1011, 2241, 4781, 2021, 2009, 2003, 3698, 4895, 19699, 9013, 18718, 1012, 3, 2195, 3031, 21615, 1009, 3513, 14930, 3073, 21641, 1011, 5533, 7285, 1997, 9353, 8292, 4757, 2916, 2491, 1998, 10656, 6043, 2005, 1996, 2566, 26770, 2326, 10540, 2021, 2029, 2003, 1996, 2157, 2028, 1029, 3, 2470, 3125, 2000, 10663, 1996, 3291, 1997, 6105, 10540, 2517, 1999, 20950, 1011, 2241, 1051, 13626, 2140, 2916, 3670, 2653, 2008, 14087, 1997, 5337, 28081, 1012, 3, 2000, 9570, 2019, 10061, 5337, 21641, 6741, 2058, 24393, 2006, 1051, 13626, 2140, 2005, 6105, 3820, 28081, 2612, 1997, 2478, 21641, 27637, 3019, 2653, 1010, 2107, 2004, 2394, 1012, 3, 2000, 8849, 1996, 2825, 21641, 1011, 5533, 7285, 1997, 3617, 2916, 2968, 1006, 2852, 2213, 1007, 3229, 2491, 1998, 10656, 6043, 3081, 2028, 1997, 1996, 3031, 21615, 1009, 3513, 14930, 1010, 1045, 29625, 2063, 29625, 1010, 25430, 12190, 1012, 3, 2000, 2236, 4697, 2256, 3463, 2000, 2060, 3617, 3229, 2916, 2491, 1998, 10656, 13100, 1010, 2107, 2004, 9394, 3860, 1012, 3, 2256, 3921, 18077, 2075, 20950, 1011, 2241, 1051, 13626, 2140, 15480, 1010, 2164, 3670, 2653, 1010, 2951, 9206, 3787, 1010, 1998, 20950, 20231, 1012, 3, 12697, 2916, 3670, 1998, 10656, 3031, 6483, 2058, 24393, 2006, 1051, 13626, 2140, 15480, 1012, 3, 21991, 8192, 2916, 1998, 4651, 2916, 10656, 6043, 2004, 25430, 12190, 3513, 1012, 3, 2129, 2055, 1996, 2060, 8893, 8346, 8107, 1010, 2107, 2004, 2632, 1011, 8833, 1010, 2482, 2378, 1010, 8893, 1049, 14161, 1042, 1010, 4385, 2612, 1997, 25430, 12190, 1029, 3, 3141, 2147, 1037, 5337, 3192, 2005, 1051, 13626, 2140, 1031, 16405, 29109, 2721, 2692, 2549, 1033, 1027, 5760, 1042, 4747, 28081, 1037, 5337, 28081, 2005, 1052, 2509, 2361, 1031, 9805, 2692, 2549, 1033, 1027, 2951, 1011, 9358, 7277, 28771, 28081, 12379, 20104, 7705, 1006, 6904, 2546, 1007, 1031, 14855, 5558, 9032, 24096, 1033, 1027, 6948, 28081, 1041, 29624, 2361, 2509, 2361, 1998, 2049, 6332, 19044, 2140, 1031, 9321, 2692, 2509, 1033, 1027, 6904, 2546, 28081, 24964, 1010, 10556, 2891, 1031, 10228, 3775, 2692, 2509, 1033, 1027, 21469, 1011, 2241, 1042, 4747, 28081, 1060, 6305, 19968, 1031, 18128, 1033, 1027, 20950, 2061, 2053, 28081, 21641, 4773, 2092, 1011, 2124, 6741, 9850, 1006, 2289, 29626, 2692, 2509, 1007, 6105, 3820, 2005, 8192, 1006, 4651, 1007, 2916, 1037, 6105, 3820, 7127, 1996, 6043, 1006, 3513, 1007, 2104, 2029, 1037, 4054, 1052, 15544, 3630, 4473, 2178, 4054, 1052, 15544, 11231, 2072, 2000, 2224, 2019, 11412, 1054, 10712, 3079, 2011, 1052, 15544, 3630, 1010, 2073, 1052, 15544, 3630, 2003, 2019, 11412, 3954, 1010, 1052, 15544, 11231, 2072, 2003, 2028, 1997, 1050, 11412, 5198, 1010, 2073, 1045, 1006, 1015, 1010, 1010, 1050, 1007, 1012, 3, 1037, 6105, 3820, 5218, 2004, 1037, 3343, 2275, 4760, 2151, 2193, 1997, 3653, 2890, 24871, 2015, 1998, 6043, 1012, 3, 1037, 3653, 2890, 24871, 2003, 2593, 1037, 27142, 1010, 1037, 9095, 1010, 2030, 1037, 4650, 1012, 3, 2065, 2035, 1997, 1996, 3653, 2890, 24871, 2015, 2024, 2777, 1010, 2059, 6043, 2360, 2008, 1996, 10540, 5198, 2089, 4685, 1996, 2895, 2005, 1996, 6105, 10540, 7045, 1012, 3, 8192, 2916, 10656, 2057, 9375, 2038, 2226, 10878, 15950, 2015, 2004, 2019, 10061, 3200, 7851, 1996, 12391, 8192, 2916, 2005, 1037, 4054, 1060, 2000, 2224, 2019, 11412, 1054, 1012, 3, 1996, 5884, 2465, 1997, 2038, 2226, 10878, 15950, 2015, 3200, 2003, 1052, 2396, 2100, 1010, 1998, 1996, 2846, 2465, 2003, 11412, 1012, 3, 1996, 5884, 2465, 1997, 11849, 3200, 2003, 1052, 15544, 3630, 1998, 1996, 2846, 2465, 2003, 1052, 15544, 11231, 1010, 2073, 1996, 11849, 2515, 2031, 4942, 2361, 8164, 5339, 7677, 2546, 1006, 11849, 2290, 1010, 11849, 2102, 1010, 1007, 1012, 3, 1996, 11849, 2290, 5836, 12391, 8192, 2916, 10656, 3200, 1998, 1996, 11849, 2102, 5836, 2916, 4651, 10656, 3200, 1012, 3, 8192, 2916, 10656, 1006, 9530, 3775, 1012, 1007, 3, 1051, 13626, 2140, 2515, 2025, 16306, 2030, 11405, 2151, 6043, 2005, 2852, 2213, 1010, 2021, 3640, 10595, 2000, 4671, 2107, 6043, 1012, 3, 2478, 1051, 13626, 2140, 3670, 2653, 1998, 2951, 9206, 3787, 2004, 2916, 10656, 3031, 6483, 2015, 11422, 1012, 3, 1996, 2465, 1998, 3200, 3408, 1999, 2023, 2916, 10656, 3031, 6483, 2097, 2022, 2641, 2004, 14405, 26005, 28986, 2030, 7091, 1006, 1055, 1007, 1999, 1996, 8192, 1998, 25283, 7512, 2916, 10656, 6043, 1006, 2030, 3513, 1007, 2000, 16306, 2613, 2916, 10656, 28937, 1012, 3, 1037, 2916, 10656, 3031, 6483, 1037, 2916, 10656, 20057, 12326, 4651, 2916, 10656, 1996, 2038, 2102, 2743, 22747, 9413, 15950, 2015, 2003, 2019, 10061, 3200, 7851, 1996, 4651, 2916, 10656, 1997, 8192, 2916, 2005, 1037, 4054, 1060, 2005, 2019, 11412, 1054, 1012, 3, 1996, 5884, 2465, 1997, 3200, 2038, 2102, 2743, 22747, 9413, 15950, 2015, 2003, 1052, 2396, 2100, 1998, 1996, 2846, 2465, 2003, 11412, 1012, 3, 1052, 15544, 3630, 2453, 2224, 11849, 2290, 2000, 4651, 8192, 2916, 2069, 2000, 1052, 15544, 11231, 2072, 1010, 2073, 1045, 1006, 1015, 1010, 1010, 1050, 1007, 1010, 2021, 2515, 2025, 11849, 2010, 4651, 2916, 2000, 1052, 15544, 11231, 2072, 1010, 2073, 4651, 2916, 1006, 2038, 23836, 18886, 13900, 2015, 1010, 1007, 1012, 3, 1052, 15544, 3630, 2453, 2224, 11849, 2102, 3200, 1010, 2059, 2151, 2028, 1997, 1996, 4651, 2916, 6656, 2015, 1006, 2038, 23836, 18886, 13900, 2015, 1010, 1007, 1998, 8192, 2916, 2064, 2022, 2582, 17678, 16098, 3064, 1012, 3, 3653, 2890, 24871, 2015, 11423, 4098, 11522, 13290, 3012, 1024, 1057, 2038, 2226, 10878, 3597, 16671, 2361, 29625, 27241, 2102, 4098, 11522, 13290, 3012, 1024, 1056, 2038, 2102, 2743, 22747, 9413, 3597, 16671, 2361, 29625, 27241, 2102, 7185, 3012, 1024, 1027, 1037, 2038, 2361, 16360, 14326, 2361, 29625, 2361, 2396, 2100, 16406, 1997, 2051, 13483, 1056, 10047, 2063, 1006, 1056, 2487, 1010, 1056, 2475, 1007, 1024, 1056, 2487, 2038, 13701, 2102, 10047, 13699, 29625, 2102, 10047, 2063, 1056, 2475, 2038, 13701, 2102, 10047, 13699, 29625, 2102, 10047, 2063, 2916, 4651, 10656, 3513, 2038, 2226, 10878, 15950, 2015, 1006, 1029, 3, 1060, 1010, 1029, 3, 1054, 1007, 2038, 2102, 2743, 22747, 9413, 15950, 2015, 1006, 1029, 3, 1060, 1010, 1029, 3, 1054, 1007, 1027, 2038, 2226, 10878, 2102, 2743, 22747, 9413, 15950, 2015, 1006, 1029, 3, 1060, 1010, 1029, 3, 1054, 1007, 1006, 1051, 2487, 1007, 2038, 2226, 10878, 2102, 2743, 22747, 9413, 15950, 2015, 1006, 1029, 3, 1060, 1010, 1029, 3, 1054, 1007, 11849, 2290, 1006, 1029, 3, 1060, 1010, 1029, 3, 1061, 1007, 2038, 2361, 16360, 14326, 1006, 1029, 3, 1061, 1010, 1029, 3, 1037, 1007, 1026, 1057, 2038, 2226, 10878, 3597, 16671, 1006, 1029, 3, 1054, 1007, 1027, 2038, 2226, 10878, 15950, 2015, 1006, 1029, 3, 1061, 1010, 1029, 3, 1054, 1007, 1006, 1051, 2475, 1007, 2038, 2226, 10878, 15950, 2015, 1006, 1029, 3, 1060, 1010, 1029, 3, 1054, 1007, 1026, 1057, 2038, 2226, 10878, 3597, 16671, 1006, 1029, 3, 1054, 1007, 1056, 2487, 2038, 13701, 2102, 10047, 2063, 1006, 1029, 3, 1056, 1007, 1056, 2475, 2038, 13701, 2102, 10047, 2063, 1006, 1029, 3, 1056, 1007, 1027, 1052, 9413, 22930, 3064, 1006, 1057, 10878, 1010, 1029, 3, 1054, 1007, 1006, 1051, 2509, 1007, 2038, 2226, 10878, 2102, 2743, 22747, 9413, 15950, 2015, 1006, 1029, 3, 1060, 1010, 1029, 3, 1054, 1007, 11849, 2102, 1006, 1029, 3, 1060, 1010, 1029, 3, 1061, 1007, 2038, 2361, 16360, 14326, 1006, 1029, 3, 1061, 1010, 1029, 3, 1037, 1007, 1015, 2038, 2102, 2743, 22747, 9413, 3597, 16671, 1006, 1029, 3, 1054, 1007, 1027, 2038, 2226, 10878, 2102, 2743, 22747, 9413, 15950, 2015, 1006, 1029, 3, 1061, 1010, 1029, 3, 1054, 1007, 1006, 1051, 2549, 1007, 1037, 8192, 2916, 10656, 11967, 3019, 2653, 2005, 6105, 3820, 1024, 4180, 16632, 4918, 1039, 3084, 2019, 3820, 2007, 2048, 4180, 10390, 1010, 5650, 1037, 1998, 3960, 1038, 1012, 3, 2044, 2169, 7079, 2274, 6363, 1010, 1998, 2059, 2119, 4909, 9353, 2243, 19779, 2140, 3341, 3672, 2013, 4918, 1010, 5650, 1998, 3960, 2024, 2445, 1996, 8192, 2916, 1998, 2089, 2169, 4653, 2019, 26885, 11412, 1010, 4302, 10693, 1998, 1996, 2331, 2135, 2534, 15568, 1010, 2039, 2000, 2274, 2335, 1012, 3, 2027, 2089, 2169, 6140, 2009, 2069, 2320, 1012, 3, 2174, 1010, 1996, 2561, 2193, 1997, 4506, 1010, 2593, 8834, 2030, 11204, 2589, 2011, 5650, 1998, 3960, 1010, 2089, 2022, 2012, 2087, 2702, 1012, 3, 1996, 8192, 2916, 16406, 2558, 2003, 2090, 2289, 29626, 2692, 2629, 29626, 2692, 2581, 1013, 5641, 29627, 8889, 1011, 2289, 29626, 2692, 2629, 29626, 10790, 1013, 2484, 29627, 8889, 1012, 3, 1037, 8192, 2916, 10656, 11967, 10061, 20231, 2005, 6105, 3820, 1024, 3820, 2090, 4918, 1998, 1063, 5650, 1010, 3960, 1065, 2055, 4302, 10693, 1998, 1996, 2331, 2135, 2534, 15568, 2007, 16021, 2063, 4226, 5897, 1031, 17463, 4710, 1031, 1019, 29625, 8889, 1033, 1010, 2012, 18886, 29446, 1031, 4918, 1033, 1033, 1027, 2025, 1031, 1998, 1031, 2051, 1026, 2289, 29626, 2692, 2629, 29626, 2692, 2581, 1013, 5641, 29627, 8889, 1010, 2051, 1028, 2289, 29626, 2692, 2629, 29626, 10790, 1013, 2484, 29627, 8889, 1033, 1033, 1027, 2007, 4175, 1031, 2184, 1033, 1027, 1998, 1031, 18921, 6776, 4168, 21784, 1031, 5650, 1010, 3960, 1025, 4175, 1031, 1019, 1033, 1033, 1027, 4653, 1010, 18921, 6776, 4168, 21784, 1031, 5650, 1010, 3960, 1025, 4175, 1031, 1015, 1033, 1033, 1027, 6140, 1033, 1037, 8192, 2916, 10656, 11967, 2034, 2344, 7961, 1006, 1042, 4747, 1007, 2005, 6105, 3820, 1024, 1060, 1006, 1006, 1060, 1027, 5650, 1060, 1027, 3960, 1007, 1027, 1056, 2487, 2102, 2475, 1006, 1056, 2487, 1026, 1056, 2475, 1052, 4681, 1006, 1019, 1010, 1056, 2487, 1007, 7108, 1006, 4918, 1010, 1056, 2475, 1007, 1007, 1007, 1027, 1056, 2038, 13701, 2102, 10047, 2063, 1006, 1056, 1007, 2289, 29626, 2692, 2629, 29626, 2692, 2581, 1013, 5641, 1024, 4002, 2038, 13701, 2102, 10047, 2063, 1006, 1056, 1007, 2289, 29626, 2692, 2629, 29626, 10790, 1013, 2484, 1024, 4002, 1027, 4175, 1006, 5650, 1010, 8909, 2487, 1007, 1009, 4175, 1006, 5650, 1010, 8909, 2475, 1007, 1009, 4175, 1006, 3960, 1010, 8909, 2487, 1007, 1009, 4175, 1006, 3960, 1010, 8909, 2475, 1007, 1026, 2184, 1027, 1006, 4175, 1006, 5650, 1010, 8909, 2487, 1007, 1026, 1019, 3597, 16671, 1006, 3960, 1010, 8909, 2487, 1007, 1026, 1019, 1027, 7936, 1006, 1060, 1010, 4653, 1010, 26885, 1007, 1007, 1006, 4175, 1006, 5650, 1010, 8909, 2475, 1007, 1026, 1015, 3597, 16671, 1006, 3960, 1010, 8909, 2475, 1007, 1026, 1015, 1027, 7936, 1006, 1060, 1010, 6140, 1010, 26885, 1007, 1007, 1007, 1037, 8192, 2916, 10656, 11967, 3031, 21615, 1009, 3513, 1006, 25430, 12190, 1007, 2005, 6105, 3820, 1024, 3031, 6483, 2005, 4180, 16632, 4918, 2015, 1024, 2038, 10521, 13068, 15950, 2015, 1058, 2038, 2226, 10878, 15950, 2015, 2038, 2361, 15544, 3372, 15950, 2015, 1058, 2038, 2226, 10878, 15950, 2015, 1006, 2038, 10521, 13068, 3597, 16671, 1063, 1037, 1010, 1038, 1065, 1012, 3, 26885, 1010, 2038, 2226, 10878, 3597, 16671, 2278, 29625, 15878, 14659, 1007, 1006, 2038, 2361, 15544, 3372, 3597, 16671, 1063, 1037, 1010, 1038, 1065, 1012, 3, 26885, 1010, 2038, 2226, 10878, 3597, 16671, 2278, 29625, 15878, 14659, 1007, 1063, 5650, 1010, 3960, 1065, 5884, 2038, 2226, 10878, 15950, 2015, 2846, 1054, 2487, 1010, 2073, 1054, 2487, 1027, 2184, 2038, 2226, 10878, 3597, 16671, 2278, 2289, 29626, 2692, 2629, 29626, 2692, 2581, 1013, 5641, 8889, 2038, 13701, 2102, 10047, 8586, 29625, 2102, 10047, 2063, 2289, 29626, 2692, 2629, 29626, 10790, 1013, 11212, 2692, 2038, 13701, 2102, 10047, 8586, 29625, 2102, 10047, 2063, 1027, 1027, 7680, 1006, 1019, 2038, 10521, 13068, 3597, 16671, 2072, 1012, 3, 1063, 4302, 2361, 22279, 1065, 1007, 1010, 1045, 1063, 1037, 1010, 1038, 1065, 1010, 2073, 1024, 2038, 10521, 13068, 3597, 16671, 2278, 1012, 3, 1063, 4302, 2361, 22279, 1065, 1006, 27723, 1007, 1027, 1027, 7680, 1006, 1015, 2038, 2361, 15544, 3372, 3597, 16671, 2072, 1012, 3, 1063, 4302, 2361, 22279, 1065, 1007, 1010, 1045, 1063, 1037, 1010, 1038, 1065, 1010, 2073, 1024, 2038, 2361, 15544, 3372, 3597, 16671, 2278, 1012, 3, 1063, 4302, 2361, 22279, 1065, 1006, 29248, 1007, 1027, 7680, 1006, 1010, 1007, 1010, 2073, 1024, 2038, 2226, 10878, 3597, 16671, 2278, 1063, 4302, 2361, 22279, 1065, 1006, 1039, 2509, 1007, 1037, 8192, 2916, 10656, 11967, 3031, 21615, 1009, 3513, 1006, 25430, 12190, 1007, 2005, 6105, 3820, 1024, 3513, 2005, 4180, 16632, 4918, 2015, 1024, 2038, 10521, 13068, 15950, 2015, 1006, 1029, 3, 1060, 1010, 1029, 3, 1054, 1007, 2038, 23836, 13626, 18743, 2015, 1006, 1029, 3, 1060, 1010, 1029, 3, 1054, 1007, 1027, 2038, 10521, 13068, 23836, 13626, 18743, 2015, 1006, 1029, 3, 1060, 1010, 1029, 3, 1054, 1007, 1006, 1039, 2549, 1007, 2038, 2361, 15544, 3372, 15950, 2015, 1006, 1029, 3, 1060, 1010, 1029, 3, 1054, 1007, 2038, 23836, 13626, 18743, 2015, 1006, 1029, 3, 1060, 1010, 1029, 3, 1054, 1007, 1027, 2038, 2361, 15544, 7666, 5349, 13626, 18743, 2015, 1006, 1029, 3, 1060, 1010, 1029, 3, 1054, 1007, 1006, 1039, 2629, 1007, 2038, 10521, 13068, 23836, 13626, 18743, 2015, 1006, 1029, 3, 1060, 1010, 1029, 3, 1054, 1007, 11849, 2290, 1006, 1029, 3, 1060, 1010, 1029, 3, 1061, 1007, 2038, 2361, 16360, 14326, 1006, 1029, 3, 1061, 1010, 1029, 3, 1037, 1007, 1027, 2038, 10521, 13068, 15950, 2015, 1006, 1029, 3, 1061, 1010, 1029, 3, 1054, 1007, 1006, 1039, 2575, 1007, 2038, 2361, 15544, 7666, 5349, 13626, 18743, 2015, 1006, 1029, 3, 1060, 1010, 1029, 3, 1054, 1007, 11849, 2290, 1006, 1029, 3, 1060, 1010, 1029, 3, 1061, 1007, 2038, 2361, 16360, 14326, 1006, 1029, 3, 1061, 1010, 1029, 3, 1037, 1007, 1027, 2038, 2361, 15544, 3372, 15950, 2015, 1006, 1029, 3, 1061, 1010, 1029, 3, 1054, 1007, 1006, 1039, 2581, 1007, 1037, 8192, 2916, 10656, 11967, 3031, 21615, 1009, 3513, 1006, 25430, 12190, 1007, 2005, 6105, 3820, 1024, 8866, 2005, 4180, 16632, 4918, 2015, 1024, 26885, 1006, 4302, 2361, 22279, 1007, 2038, 10521, 13068, 15950, 2015, 1006, 4918, 1010, 4302, 2361, 22279, 1007, 2038, 2361, 15544, 3372, 15950, 2015, 1006, 4918, 1010, 4302, 2361, 22279, 1007, 2038, 23836, 13626, 18743, 2015, 1006, 4918, 1010, 4302, 2361, 22279, 1007, 2038, 10521, 13068, 23836, 13626, 18743, 2015, 1006, 4918, 1010, 4302, 2361, 22279, 1007, 2038, 2361, 15544, 7666, 5349, 13626, 18743, 2015, 1006, 4918, 1010, 4302, 2361, 22279, 1007, 1027, 1019, 2038, 2361, 16360, 14326, 1006, 5650, 1007, 2038, 10521, 13068, 15950, 2015, 1006, 5650, 1010, 4302, 2361, 22279, 1007, 1006, 1039, 2620, 1007, 2038, 2361, 15544, 3372, 15950, 2015, 1006, 5650, 1010, 4302, 2361, 22279, 1007, 1006, 1039, 2683, 1007, 1027, 1019, 2038, 2361, 16360, 14326, 1006, 3960, 1007, 2038, 10521, 13068, 15950, 2015, 1006, 3960, 1010, 4302, 2361, 22279, 1007, 1006, 27723, 2692, 1007, 2038, 2361, 15544, 3372, 15950, 2015, 1006, 3960, 1010, 4302, 2361, 22279, 1007, 1006, 27723, 2487, 1007, 6594, 1996, 4013, 2015, 1998, 9530, 2015, 1997, 2367, 6105, 3820, 3670, 4155, 1024, 3019, 2653, 1024, 4013, 2015, 2529, 3191, 3085, 1998, 3305, 3085, 2021, 9530, 2015, 3698, 4895, 19699, 9013, 18718, 1010, 2053, 5337, 28081, 1012, 3, 5760, 1042, 4747, 1024, 4013, 2015, 5337, 1998, 3154, 20231, 1998, 28081, 2021, 9530, 2015, 3698, 4895, 19699, 9013, 18718, 1010, 4298, 6151, 8586, 8524, 3468, 22334, 11619, 1010, 1998, 3343, 3213, 1006, 8068, 1007, 3791, 2000, 2022, 1037, 7961, 2937, 1012, 3, 3031, 21615, 1009, 3513, 1024, 4013, 2015, 5337, 28081, 2005, 6882, 3698, 6364, 1998, 4824, 2021, 9530, 2015, 3132, 14026, 2373, 1010, 2107, 2004, 11265, 12540, 1011, 2489, 1010, 3853, 23301, 1010, 1998, 2007, 3132, 2193, 1997, 16381, 11968, 6447, 1012, 3, 2916, 3670, 4155, 1024, 4013, 2015, 20950, 1011, 2241, 2005, 3698, 6364, 2021, 9530, 2015, 2053, 5337, 28081, 1012, 3, 3343, 4155, 2005, 3229, 2916, 6656, 7091, 1996, 21641, 5337, 2944, 2005, 1037, 6105, 3820, 2003, 2019, 1051, 13626, 2140, 1011, 2241, 2916, 10656, 3343, 2008, 2064, 2022, 16348, 2004, 1037, 5257, 1997, 3031, 21615, 1998, 3513, 1012, 3, 1037, 2916, 10656, 3031, 6483, 2003, 3818, 2241, 2006, 1051, 13626, 4877, 11423, 1998, 2951, 9206, 1010, 1996, 2916, 10656, 6043, 2024, 3818, 2004, 1037, 2275, 1997, 3513, 2005, 8192, 1998, 4651, 1006, 2030, 24473, 1007, 2916, 10656, 2015, 1012, 3, 1037, 2613, 8192, 2916, 10656, 11967, 2003, 7645, 2000, 16114, 2256, 5337, 21641, 2944, 1012, 2], "src_sent_labels": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], "segs": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "clss": [0, 52, 77, 106, 159, 201, 230, 255, 299, 336, 373, 423, 456, 493, 554, 584, 610, 651, 681, 707, 752, 801, 825, 884, 918, 937, 996, 1027, 1049, 1105, 1140, 1162, 1206, 1232, 1282, 1311, 1340, 1369, 1426, 1481, 1522, 1558, 1596, 1639, 1676, 1723, 1756, 1789, 1809, 1851, 1889, 1923, 1937, 1976, 2001, 2032, 2044, 2076, 2122, 2163, 2182, 2216, 2261, 2275, 2332, 2353, 2371, 2412, 2444, 2458, 2493, 2517, 2548, 2581, 2624, 2674, 2702, 2732, 2778, 2799, 2840, 2878, 2903, 2925, 2961, 2979, 3030, 3075, 3140, 3162, 3179, 3214, 3232, 3277, 3299, 3316, 3335, 3350, 3378, 3392, 3423, 3448, 3504, 3537, 3584, 3646, 3677, 3732, 3779, 3789, 3815, 3867, 3917, 3945, 4004, 4054, 4116, 4144, 4174, 4203, 4256, 4267, 4281, 4299, 4310, 4325, 4343, 4352, 4363, 4377, 4441, 4469, 4526, 4549, 4612, 4630, 4643, 4712, 4749, 4773, 4800, 4848, 4868, 4929, 4986, 5019, 5043, 5089, 5149, 5168, 5193, 5218, 5274, 5315, 5364, 5409, 5446, 5481, 5523, 5549, 5565, 5581, 5612, 5667, 5692, 5736, 5763, 5798, 5823, 5851, 5903], "src_txt": ["we show that the semantic formal model for open digital right language ( odrl ) - based rights delegation policies can be enforced and expressed as a combination of ontologies and rules , e.g. , semantic web rule language ( swrl ) .", "based on odrl 's expressions and data dictionary , a rights delegation ontology is proposed in this study .", "furthermore , we express the rights delegation policy as a set of ontology statements , rules , and facts for usage and transfer rights delegation .", "when verifying odrl formal semantics , our swrl approach is superior to the generic restricted first order logic ( fol ) model because we have an understandable formal semantics of policies for automatic machine processing and a higher expressive power for policy compliance checking .", "on the other hand , the rights delegation semantics shown as a generic full fol might have a higher complexity of license verification , which results in a policy compliance checking that is possibly undecidable .", "a real usage rights delegation scenario for digital content is demonstrated in order to justify the feasibility of our formal semantic model for digital rights delegation .", "we hope this study will shed some light on future sensitive information usage and delegation rights controlled from a privacy protection perspective .", "the ultimate goal of achieving a distributed digital rights management ( drm ) system is content owners can project policies governing their content into remote environments with confidence that those policies will be respected by remote nodes [ 13 ] .", "a node is a trusted system that governs the legal usage of digital works that can be relied on to follow certain rules and enforce its legal rights delegation policy [ 19 ] .", "aspects of the drm rights authorization and enforcement problem include formulating delegation policies and a mechanism for \" proving \" that a request to access rights complies with relevant policies .", "a general - purpose rights expression language ( rel ) is a type of policy delegation language where the focus of the language is on the expression and transference of usage rights or capabilities from one party to another in an interoperable manner .", "it will be a challenge to design a general - purpose rel for the drm system that expresses rights delegation policies and controls digital content [ 13 ] .", "emerging acceptable industry rel are classified into two major camps : open digital right language ( odrl ) and extensible rights markup language ( xrml ) .", "unfortunately , the semantics of both of these rels are either described in english or as computer algorithms , therefore , they lack machine understandable formal semantics.there are two core components for a drm rights delegation policy : an rel language for expressing policies and an evaluator that can make decisions based on such expressions .", "the policy evaluator must be able to reason correctly concerning all types of policy it may encounter when making a trusted decision to grant rights .", "thus , the design of a policy evaluator is going to be influenced by the design of the rel language .", "a drm policy evaluator must decide for each requested access whether the policy ( or policies ) is relevant to the request and whether or not to allow it to occur for a given license .", "this formulation of a drm policy evaluation can be regarded as a \" compliance checking \" decision problem in a trust management system [ 1 ] .", "the license is derived from a legal contract that states the permissible agreements under which digital contents can be legitimately accessed .", "the languages for writing licenses ( or permissible agreements ) usually fall into three categories : a human readable natural language , a software readable xml - based language , and a machine understandable language [ 18 ] .", "when we consider digital contents as protected , sensitive , personal information which might be disseminated over the entire web , then the usage and delegation rights control issues we are facing are just the same as those existing in the drm system .", "disseminated digital content ( or information ) with associated licenses are encrypted with appropriate security keys .", "if a node with a service request can decrypt the downloaded information and license , then the node 's embedded license evaluator will faithfully interpret the license semantics and enforce the license agreements , including ontology , rules , and facts , to decide whether a request should be granted or not .", "the goal of this research is to deal with the problem that license agreements written in odrl rel , are open to interpretation that results in semantic ambiguity .", "this is because the stated conditions for which resources access legitimate license are written in english .", "we need an abstract semantic layer that can be overlaid on existing odrl data models to express their license and service semantics instead of using natural language , such as english.odrl is one of the most popular rels for expressing digital license exchange and sharing , it also has an xml - based markup language .", "as we know , xml has the capacity of marking up licenses and data for machine processing but does not have the capability of encoding the license semantics .", "the generic odrl foundation model consists of three core entities : assets , rights , and parties .", "we are going to exploit this model by finding out which parts of license semantics can be shown as ontology language and which parts can be shown as rule language.therefore , drm ontology and rights delegation policies will be using machines to ensure their license semantics .", "finally , we show that our flexible rights delegation model could explicitly declare and enforce all kinds of rights delegation semantics through existing odrl expressions and data dictionaries .", "the formal semantics we propose are based on semantic web rule language ( swrl ) [ 9 ] .", "swrl is a language that combines description logic owl with logic program rule language , such as ruleml lite ( see http://www.ruleml.org/#lite . )", ", where a horn clause rules with the extension to owl that overcomes many limitations of property chaining [ 9 ] .", "property chaining features allow us to \" transfer rights \" from one class of individuals to another via delegation properties other than subclassof rights inheritance.in odrl , possible permission usage rights are display , print , play , and execute .", "possible permission transfer rights are usually defined as rights for rights , including sell , lend , give , and lease , etc [ 10 ] .", "property chaining is a necessary feature for allowing rights delegation policies to delegate rights from one party to another when they belong to different classes .", "this important feature is not supported by other ontology - based semantic web policy languages , such as kaos , rei [ 20 ] .", "however , there are some limitations when using swrl due to predicates being limited to being owl classes and properties that only have a maximum parity of two , with no built - in arithmetic predicates or nonmonotonic features [ 5 ] [ 9 ] .", "therefore , we use owl 's extended concrete datatypes with unary and binary arithmetic operators in license agreement verification so that the verifier can verify whether prerequisite requirements and constraints in a license are compliant with its rights delegation policy [ 16 ] .", "when verifying odrl formal semantics , the ontology + rule ( swrl ) approach is superior to the generic restricted first order logic ( fol ) formal semantics model [ 18 ] .", "first , generic restricted fol - based rights delegation policies can not be automatically processed by an agent because these fol - based policies lack a semantic rights markup language .", "second , unlike our swrl ( ontologies + rules ) policies , restricted generic fol policies do not have a high level of expressive power in their delegation policies [ 8 ] .", "on the other hand , the rights delegation semantics shown as a generic full fol model might have a higher complexity of license verification , which results in a policy compliance checking that is possibly undecidable .", "finally , descritpion logic ( dl ) in swrl is possibly augmented by unary and binary arithmetic operators to enhance its concrete datatype operation [ 2 ] .", "drm and other modern access controls , such as privacy protection , rbac , etc , are all regarded as u con abc models which integrate authorization ( a ) , obligations ( b ) , and conditions ( c ) elements .", "usage control is a generalization of access control that covers authorization , obligation , conditions , continuity ( ongoing controls ) , and mutability [ 17 ] .", "in [ 21 ] , a rule - based policy management system can be deployed in an open and distributed www site by creating a \" policy aware \" infrastructure .", "this makes the widespread deployment of rules and proofs on the web to become a reality .", "however , this server - based access control infrastructure can not be applied to drm or other methods of privacy protection for usage and rights delegation control where information might be disseminated over the entire web .", "delegation logic , a datalog - extended tractable logic - based language with expression of delegation depth and complex principals was proposed to represent policies , credentials , and requests in distributed authorization .", "however , it did not have a rights markup language to explicitly encode rights delegation ontology for automatic agent processing of its rights delegation semantics [ 14 ] .", "xrml does not have formal semantics [ 3 ] .", "instead , the xrml specification presents semantics in two ways : as an english description of the language or as an algorithm that determines if rights are permissible from a set of licenses .", "a formal foundation model for xrml semantics is shown as fol - based rights expression statements [ 7 ] .", "odrl is another popular xml - based rel language used to state the conditions under which resources can be legitimately accessed [ 10 ] .", "odrl does not have formal semantics either .", "the meaning of the language 's syntax is described in english ; license agreements written in odrl are open to interpretation that results in semantic ambiguity .", "in order to resolve this problem , a formal foundation model for odrl semantics is shown as a generic restricted fol but it has less expressive power on rights expression and delegation as our swrl approach [ 18 ] .", "in [ 6 ] , they only provide a generic representation of contract information on top of rels so that the enforcement of access rights can be extracted from odrl - based digital license contracts .", "but , machine understandable formal semantics can not be represented and processed in this study .", "in [ 4 ] , an owl - based odrl formal semantic model is designed and deployed but it does not have usage and transfer rights delegation service capability .", "in summary , a formal foundation for odrl or xrml semantics are shown as either fol or owl , but they all lack semantic - driven enforcement of rights delegation policies [ 4 ] [ 18 ] .", "the central construct of odrl is a license agreement .", "a license agreement indicates the policies ( rules ) under which a principal p rin o allows another principal p rin ui to use an asset r presumably owned by p rin o , where p rin o is an asset owner and p rin u i is one of n asset users , where i \u2208 ( 1 , \u00b7 \u00b7 \u00b7 , n ) .", "a license agreement refers to a policy set showing any number of prerequisites and policies .", "a prerequisite is either a constraint , a requirement , or a condition .", "constraints are facts that are outside the p rin u i 's influence but are defined by the asset owner p rin o , such as counting or temporal restrictions for digital asset usage rights .", "requirements are facts that are within the p rin u i user 's power to meet , such as prepaid fees before using a particular asset .", "conditions are constraints that must not hold exceptions [ 18 ] .", "if all of the prerequisites are met , then a policy says that the agreement 's users may perform the action for the license agreement 's assets .", "odrl does not enforce or mandate any policies for drm , but provides mechanisms to express such policies .", "odrl specifications contain expression language , data dictionary elements , and xml syntax to encode the odrl expressions and elements [ 10 ] .", "we are going to use these odrl expression language and data dictionary elements as our rights delegation ontology 's entities ( see fig. 1 ) .", "the source of this ontology conceptualization is based on the odrl 1.1 specification explicitly defining the odrl 's rights delegation semantics for a license in this ontology [ 10 ] .", "the class and property terms defined in this rights delegation ontology will be considered as antecedents or conclusion ( s ) in the following usage rights delegation policies to enforce all kinds of real rights delegation inference ( see section 5.2 ) .", "we define hasu sagerights as an abstract property describing the generic usage rights for a principal x to use an asset r .", "the domain class of hasu sagerights property is p arty , and the range class is asset ( see fig. 2 ) .", "the domain class of delegate property is p rin o and the range class is p rin u , where the delegate does have subp ropertyof ( delegate g , delegate t , \u00b7 \u00b7 \u00b7 ) .", "the delegate g represents generic usage rights delegation property and the delegate t represents rights transfer delegation property .", "we do not allow a principal x be able to delegate his or her generic rights to another principal y if that principal x only has some usage rights but does not have any permissible transfer rights .", "the delegation processes for transfer rights license agreements are activated using delegate t property , where the rights receiver owns the delegated rights but the rights owner might lose the rights temporarily or permanently .", "this is not true for some rights delegation scenarios where the rights owner and the rights receiver might have their rights concurrently .", "thus , we create a rights duplicate delegation , indicated as delegate d from a variety of transfer rights .", "in this rights duplicate delegation property delegate d , the rights original owner , concurrently has his or her own rights with the rights receiver after the rights duplicate delegation process is completed .", "we found that downstream rights receivers are receiving less rights in the rights delegation chain .", "an original content creator usually specifies his or her usage and transfer rights delegation with a reasonable number of depth d by constraint of \u2264 \u2203 d hast ransf ercount , where d is a constant and is decreased by one for each delegation .", "thus , the rights delegation process can be enabled as long as the condition \u2265 1 hast ransf ercount is truth in a delegation policy ( see rule ( o4 ) in section 5.2 ) .", "in summary , we use extended owl 's unary arithmetic operators to express a prerequisite that can be a constraint , a requirement , a condition , or even a delegation depth.constraints for prerequisite such as , prepaid conditions , permissible count of upper ( or exact ) limit of usage rights , permissible delegation depth of transfer rights , and the validity time interval of usage rights , are shown in the following : - maxcardinality : \u2264 \u2203 u hasu sagecount \u2203 p .", "asset - maxcardinality : \u2264 \u2203 t hast ransf ercount \u2203 p .", "asset - cardinality : = \u2203 a hasp repaid \u2203 p .", "p arty - validity of time interval \u2200 t ime \u2208 ( t 1 , t 2 ) : \u2265 \u2203 t 1 hasdatet ime \u2203 p .", "t ime \u2227 \u2203 \u2264 t 2 hasdatet ime \u2203 p .", "t imesometimes , the usage rights prerequisite is enforced by a principal who is in charge of a counting action that collects all necessary mutable facts from the downstream rights receivers in the delegation chain .", "we show conditions as the following , where \u2203 = \u2203 u hasu sagecount \u2203 p .", "asset , \u2203 \u2265 \u2203 t 1 hasdatet ime \u2203 p .", "t ime , \u2203 \u2264 \u2203 t 2 hasdatet ime \u2203 p .", "t ime , and \u2203 hasp repaid \u2203 p .", "p arty , indicate which principal p is in charge of mutable constraint parameter computations and policy compliance checking [ 15 ] .", "all of these will be demonstrated in section 5.3 .", "the hast ransf errights is an abstract property describing the transfer rights delegation of usage rights for a principal x for an asset r .", "the domain class of property hast ransf errights is p arty and the range class is asset .", "p rin o might use delegate g to transfer usage rights only to p rin ui , where i \u2208 ( 1 , \u00b7 \u00b7 \u00b7 , n ) , but does not delegate his transfer rights to p rin ui , where transfer rights \u2208 ( hassell t rights , \u00b7 \u00b7 \u00b7 ) .", "therefore , each p rin u i can not further delegate his usage rights to another p rin u j ( see rule ( o2 ) ) .", "if we use delegate t property , then any one of the transfer rights permissions \u2208 ( hassell t rights , \u00b7 \u00b7 \u00b7 ) and usage rights can be further propagated ( see rule ( o4 ) ) .", "the depth of transfer delegation can be specified in class asset with cardinality shown as \u2203 = \u2203 n hast ransf ercount.ebook , which indicates that the transfer rights permission for ebook can be propagated with the exact delegation depth of n : - if party x has both usage and transfer rights for asset r , then he or she is allowed to transfer full ( or partial ) of both rights to another party but he or she can not keep his or her own rights after delegation : hasu the following license agreement for a usage rights delegation scenario is adopted and modified from [ 18 ] .", "for reasons of space , a detailed discussion of the implications of our complete operational semantics for this scenario is left to the full paper for further study .", "this might need a speech - act agent communication language to represent message passing ontology , which would then allow our agents to automatically exchange interactive information among themselves as shown in [ 11 ] : - natural language ( nl ) denotation of license agreement : content distributor charlie c makes an agreement with two content consumers , alice a and bob b .", "after each paying five dollars , and then both receiving acknowledgement from charlie , alice and bob are given the usage rights and may each display an ebook asset , harry potter and the deathly hallows , up to five times .", "they may each print it only once .", "however , the total number of actions , either displays or prints done by alice and bob , may be at most ten .", "\u2200 x ( ( x = alice \u2228 x = bob ) = \u21d2 \u2203 t 1 \u2203 t 2 ( t 1 < t 2 \u2227 p aid ( 5 , t 1 ) \u2227 attributed ( charlie , t 2 ) ) ) = \u21d2 \u2200 t \u2227 hasdatet ) + count ( bob , id 1 ) + count ( bob , id 2 ) < 10 = \u21d2 ( count ( alice , id 1 ) < 5 \u2227 count ( bob , id 1 ) < 5 = \u21d2 permitted ( x , display , ebook ) ) \u2227 ( count ( alice , id 2 ) < 1 \u2227 count ( bob , id 2 ) < 1 = \u21d2 permitted ( x , print , ebook ) ) ) we use the ontologies + rules ( swrl ) approach to enforce the semantics of rights delegation policies instead of the above pure fol - based formula.the following ontology , rules , and facts are a partial view from distributor charlie c based on fig. 1 and fig. 2 .", "in the bootstrapping stage , charlie c has all of the usage and transfer ( or duplicate ) rights for the ebook class , including harrypotter and the deathly hallows , which are shown as the facts in the following page .", "ontology statements ( c1 ) - ( c3 ) indicate the constraints of associated usage counts shown in the above fol formula .", "after consumers alice a and bob b paying five dollars , then we use rules ( c4 ) - ( c7 ) to derive facts ( c8 ) and ( c9 ) that become alice s a facts ( a4 ) and ( a5 ) and derive facts ( c10 ) and ( c11 ) that become bob s b facts ( b2 ) and ( b3 ) .", "rules ( c4 ) and ( c5 ) are specialized cases for rule ( o1 ) , while rules ( c6 ) and ( c7 ) are specialized cases for rule ( o2 ) , shown in section 5.2 .", "the mutable facts ( c12 ) - ( c14 ) indicate a snapshot of current usage , display , and print counts collected from both alice a and bob b ; they will be taken into summation by charlie c. - swrl ( ontologies + rules ) denotation of license agreement : \u2022 content distributor charlie s c site : \u2203 = \u03b1 \u2203 = sum ( \u2203 \u2264 5 hasdisplaycount i .", "{ harryp otter } ) , i \u2208 { a , b } , where \u03b1 : \u2203 hasdisplaycount c .", "{ harryp otter } \u2190 \u2212 ( c1 ) \u2203 = \u03b2 \u2203 = sum ( \u2203 \u2264 1 hasp rintcount i .", "{ harryp otter } ) , i \u2208 { a , b } , where \u03b2 : \u2203 hasp rintcount c .", "{ harryp otter } \u2190 \u2212 ( c2 ) \u2203 = \u03b4 sum ( \u03b1 , \u03b2 ) , where \u03b4 : \u2203 hasu sagecount c { harryp otter } \u2190 \u2212 ( c3 ) * rules : hasdisplayrights ( ?", "r ) \u2227 hassell d rights ( ?", "r ) = \u21d2 hasdisplaysell d rights ( ?", "r ) \u2190 \u2212 ( c4 ) hasp rintrights ( ?", "r ) \u2227 hassell d rights ( ?", "r ) = \u21d2 hasp rintsell d rights ( ?", "r ) \u2190 \u2212 ( c5 ) hasdisplaysell d rights ( ?", "r ) \u2227 delegate g ( ?", "y ) \u2227 hasp repaid ( ?", "a ) \u2227 = \u21d2 hasdisplayrights ( ?", "r ) \u2190 \u2212 ( c6 ) \u2190 \u2212 ( c11 ) delegate g ( charlie , alice ) delegate g ( charlie , bob ) \u2203 = 7 hasu sagecount c ( harryp otter ) \u2190 \u2212 ( c12 ) \u2203 = 6 hasdisplaycount c ( harryp otter ) \u2190 \u2212 ( c13 ) \u2203 = 1 hasp rintcount c ( harryp otter ) \u2190 \u2212 ( c14 ) in the bootstrapping stage , all ontology statements , rules , and facts are described as license agreements and will be sent to alice a and bob b from charlie s c. facts ( a4 ) and ( a5 ) and facts ( b2 ) and ( b3 ) were previously inferenced on charlie c site via rule ( c6 ) and ( c7 ) , where they were separately sent to alice a and bob b. each time alice a requests to display or print permission for harryp otter , then associated rules ( a1 ) or ( a2 ) will be enforced to check whether conditions on the rule antecedents are all true .", "in fact , rules ( a1 ) and ( a2 ) are specialized cases of rule ( o3 ) in section 5.2 .", "for example , if alice a asks permission to print harryp otter , her request will be granted because facts ( a5 ) , ( a7 ) , and ( a8 ) imply that all of the conditions on rule ( a2 ) s antecedents are all true .", "therefore , the conclusion p ermitted a ( p rint , harryp otter ) is true .", "on the other hand , if bob b asks permission to print harryp otter , it will not be granted because mutable fact ( b5 ) implies that < 1 hasp rintcount b ( harryp otter ) is false , so the conclusion p ermitted b ( p rint , harryp otter ) can not be derived .", "in our policy framework , we assume that what is not explicitly permitted is forbidden .", "therefore , a permission request to print will be denied .", "\u2022 \u2203 = 5 hasdisplaycount b ( harryp otter ) \u2190 \u2212 ( b4 ) \u2203 = 1 hasp rintcount b ( harryp otter ) \u2190 \u2212 ( b5 ) \u2203 = 7 hasu sagecount c ( harryp otter ) \u2190 \u2212 ( b6 ) in fig 3 , the xml - based rights expression languages ( rels ) , such as odrl , xrml , and p3p , are convenient for automatic machine ( or agent ) processing but do not have formal semantics to represent and enforce access rights permission .", "therefore , policies based on these rels to describe a license agreement ( or contract ) are usually written in natural language to indicate their meaning for the verification of access rights permission .", "as a result , these natural language policies sometimes are open to interpretation , which result in ambiguity of policy semantics .", "in order to remove this problem , people use fol to represent and reason access rights control policies ( see fig 3 ) .", "as we know , fol - based policies have a formal and clear syntax and semantics , even these fol - based policies usually have to limit their expressive power in order to capture those license agreements that are originally written in english .", "unfortunately , policies shown as fol always require policy writers and readers to be logicians .", "furthermore , policies indicated as a generic full fol may feature compliance checking that may be undecidable for their computation time.to resolve this dilemma , we are going to explore the expressive power of different fol - based policies representations to decide which conditions allow us to have both decidable and enforceable semantics capability of rights delegation policies .", "in order to have a decidable and tractable fragment of fol - based policies to enforce respective compliance checking , we usually restrict policies as datalog horn rules , where they are negation - free , function - free , and with limited number of parameter parities .", "description logic ( dl ) is a decidable fragment of fol and logic program ( lp ) is closely related to the horn fragment of fol .", "in general , a full fol is undecidable and intractable even under the datalog restriction .", "as shown in [ 5 ] , description logic programs ( dlp ) is an expressive fragment of fol and it provides a significant degree of expressiveness and substantially greater power than the rdf - s fragment of dl .", "based on dlp , the semantic web rule language ( swrl ) is considerably more powerful than either the owl dl ontology language or the datalog horn style rule language alone because swrl extends owl with the basic kinds of datalog horn rule , which states as predicates are limited to being owl classes and properties with a maximum parity of two , etc [ 9 ] .", "policies in datalog horn rules always assume that what is not explicitly permitted is forbidden .", "in that case , we can not distinguish forbidden access rights from unregulated access rights in a license agreement .", "furthermore , we might need function capability in fol - based policies to support translating english policies to fol ones .", "therefore , a tractable sublanguage , lithium , with bipolars restriction , e.g. , no bipolar literals in the fol rules , was proposed in [ 8 ] to support its representation of denying policies and limited functions in their license agreement policies .", "even though the lithium policies are based on the relaxation of the datalog horn rules , we still believe that this tractable policy language is only located somewhere in a small subset of fol language .", "therefore , it still lacks a large portion of owl - dl and datalog horn rule expressive power to serve both right delegation ontology and usage ( or transfer ) rights delegation rules , as shown in section 4 and section 5.2 .", "in [ 20 ] , kaos and rei policy languages were shown as originally from daml \u2192 owl and rdf - s so it is quite trivial that these two policy languages are merely a subset of swrl .", "therefore , the expressive power of kaos and rei are less than swrl because the rights delegation policies can not be shown as a pure owl - dl ontology language alone .", "in [ 12 ] , rei was extended to be a policy and delegation framework that includes inter-related resources , policies , policy languages , and meta - policies .", "however , authorization delegation policies were not explicitly seen in this study.in this paper , we utilize the power of swrl combined language to demonstrate the possibility of semantic - driven enforcement of rights delegation policies .", "a license agreement for a rights delegation policy is a policy set showing any number of prerequisites and relevant policies .", "a policy set is composed of facts , ontologies , and rules .", "these license agreements are distributed by distributor charlie to consumers alice and bob .", "in this delegation scenario , the usage rights are applied to the entire ebook class instead of merely to the instance of harryp otter 's ebook .", "in this policy - aware distributed drm system , each trusted drm node should faithfully enforce its rights delegation policies via its \" compliance checking \" inference engine.there are several mutable facts in each node that express a prerequisite 's dynamic status .", "these mutable facts will be updated and passed between distributor and consumers whenever a usage rights permission is granted and consumed .", "the mutable facts updating activity will be initiated as an event - conditionaction ( eca ) reaction rule , where event might be triggered by a user 's request or a message 's arrival .", "the condition is specified in each relevant rights delegation rule and the action includes usage rights enforcement and mutable fact updating actions .", "we have shown that the semantic formal model for an odrl - based rights delegation policy can be enforced by expressing them as a combination of ontologies and rules .", "based on odrl 's expressions and data dictionary , a rights delegation ontology is proposed in this study .", "furthermore , we also express the rights delegation policy as a set of rules for usage and transfer ( or duplicate ) rights delegations .", "when verifying odrl formal semantics , our swrl approach is much more superior to the generic restricted fol model because of the greater availability of a rights markup language and the higher expressive power of policy compliance checking from our swrl language .", "a real usage rights delegation scenario is demonstrated in this paper to justify our formal semantic model ."], "tgt_txt": "semantic - driven enforcement of rights delegation policies via the combination of rules and ontologies prof. ( dr. ) yuh - jong hu december -13-2007 hu@cs.nccu.edu.tw emerging network technology ( ent ) lab .<q>department of computer science national chengchi university , taipei , taiwan outline introduction research goal our approach related work license agreement for usage ( or transfer ) rights usage rights delegation a rights delegation ontology transfer rights delegation prerequisites expressions rights transfer delegation rules a usage rights delegation scenario discussion conclusion introduction xml - based digital right expression ( or preference ) languages , such as odrl , xrml , p3p , lack machine understandable formal semantics of license agreements for automatic agent processing .<q>generic first order logic ( fol ) provides formal semantics for the above underlying xml - based standards but it is machine unfriendly .<q>several ontologies + rules combinations provide semantic - driven enforcement of ac cess rights control and delegation policies for the permissible service agreements but which is the right one ?<q>research goal to resolve the problem of license agreements written in xml - based odrl rights expression language that lacks of formal semantics .<q>to construct an abstract formal semantic layer overlaid on odrl for license agreement semantics instead of using semantic ambiguity natural language , such as english .<q>to explore the possible semantic - driven enforcement of digital rights management ( drm ) access control and delegation policies via one of the ontologies + rules combinations , i.e. , swrl .<q>to generalize our results to other digital access rights control and delegation domains , such as privacy protection .<q>our approach exploiting xml - based odrl specifications , including expression language , data dictionary elements , and xml syntax .<q>designing rights expression and delegation ontology overlaid on odrl specifications .<q>proposing usage rights and transfer rights delegation policies as swrl rules .<q>how about the other hybrid integration approaches , such as al - log , carin , hybrid m kn f , etc instead of swrl ?<q>related work a formal foundation for odrl [ pucella04 ] = pure fol semantics a formal semantics for p3p [ yu04 ] = data - centric relational semantics flexible authorization framework ( faf ) [ jajodia01 ] = lp semantics e-p3p and its successor epal [ ashley03 ] = faf semantics rei , kaos [ tonti03 ] = dl - based fol semantics xacml [ oasis ] = xml so no semantics semantic web well - known layer cake ( 2007/03 ) license agreement for usage ( transfer ) rights a license agreement indicates the policies ( rules ) under which a principal p rino allows another principal p rinui to use an asset r presumably owned by p rino , where p rino is an asset owner , p rinui is one of n asset users , where i ( 1 , , n ) .<q>a license agreement refers as a policy set showing any number of prerequisites and policies .<q>a prerequisite is either a constraint , a requirement , or a condition .<q>if all of the prerequisites are met , then policies say that the agreements users may perform the action for the license agreements assets .<q>usage rights delegation we define hasu sagerights as an abstract property describing the generic usage rights for a principal x to use an asset r .<q>the domain class of hasu sagerights property is p arty , and the range class is asset .<q>the domain class of delegate property is p rino and the range class is p rinu , where the delegate does have subp ropertyof ( delegateg , delegatet , ) .<q>the delegateg represents generic usage rights delegation property and the delegatet represents rights transfer delegation property .<q>usage rights delegation ( conti . )<q>odrl does not enforce or mandate any policies for drm , but provides mechanisms to express such policies .<q>using odrl expression language and data dictionary elements as rights delegation ontologys entities .<q>the class and property terms in this rights delegation ontology will be considered as antecedents or conclusion ( s ) in the usage and tranfer rights delegation policies ( or rules ) to enforce real rights delegation inference .<q>a rights delegation ontology a rights delegation snapshot transfer rights delegation the hast ransf errights is an abstract property describing the transfer rights delegation of usage rights for a principal x for an asset r .<q>the domain class of property hast ransf errights is p arty and the range class is asset .<q>p rino might use delegateg to transfer usage rights only to p rinui , where i ( 1 , , n ) , but does not delegate his transfer rights to p rinui , where transfer rights ( hasselltrights , ) .<q>p rino might use delegatet property , then any one of the transfer rights permissions ( hasselltrights , ) and usage rights can be further propagated .<q>prerequisites expressions maxcardinality : u hasu sagecountp.asset maxcardinality : t hast ransf ercountp.asset cardinality : = a hasp repaidp.p arty validity of time interval t ime ( t1 , t2 ) : t1 hasdatet imep.t ime t2 hasdatet imep.t ime rights transfer delegation rules hasu sagerights ( ?<q>x , ?<q>r ) hast ransf errights ( ?<q>x , ?<q>r ) = hasu saget ransf errights ( ?<q>x , ?<q>r ) ( o1 ) hasu saget ransf errights ( ?<q>x , ?<q>r ) delegateg ( ?<q>x , ?<q>y ) hasp repaid ( ?<q>y , ?<q>a ) < u hasu sagecount ( ?<q>r ) = hasu sagerights ( ?<q>y , ?<q>r ) ( o2 ) hasu sagerights ( ?<q>x , ?<q>r ) < u hasu sagecount ( ?<q>r ) t1 hasdatet ime ( ?<q>t ) t2 hasdatet ime ( ?<q>t ) = p ermitted ( u sage , ?<q>r ) ( o3 ) hasu saget ransf errights ( ?<q>x , ?<q>r ) delegatet ( ?<q>x , ?<q>y ) hasp repaid ( ?<q>y , ?<q>a ) 1 hast ransf ercount ( ?<q>r ) = hasu saget ransf errights ( ?<q>y , ?<q>r ) ( o4 ) a usage rights delegation scenario natural language for license agreement : content distributor charlie c makes an agreement with two content consumers , alice a and bob b .<q>after each paying five dollars , and then both receiving acknowl edgement from charlie , alice and bob are given the usage rights and may each display an ebook asset , harry potter and the deathly hallows , up to five times .<q>they may each print it only once .<q>however , the total number of actions , either displays or prints done by alice and bob , may be at most ten .<q>the usage rights validity period is between 2007/05/07 / 09:00 - 2007/05/10 / 24:00 .<q>a usage rights delegation scenario abstract syntax for license agreement : agreement between charlie and { alice , bob } about harry potter and the deathly hallows with insequence [ prepay [ 5.00 ] , attribution [ charlie ] ] = not [ and [ time < 2007/05/07 / 09:00 , time > 2007/05/10 / 24:00 ] ] = with count [ 10 ] = and [ foreachmember [ alice , bob ; count [ 5 ] ] = display , foreachmember [ alice , bob ; count [ 1 ] ] = print ] a usage rights delegation scenario first order logic ( fol ) for license agreement : x ( ( x = alice x = bob ) = t1t2 ( t1 < t2 p aid ( 5 , t1 ) attributed ( charlie , t2 ) ) ) = t hasdatet ime ( t ) 2007/05/07 / 09 : 00 hasdatet ime ( t ) 2007/05/10 / 24 : 00 = count ( alice , id1 ) + count ( alice , id2 ) + count ( bob , id1 ) + count ( bob , id2 ) < 10 = ( count ( alice , id1 ) < 5count ( bob , id1 ) < 5 = permitted ( x , display , ebook ) ) ( count ( alice , id2 ) < 1count ( bob , id2 ) < 1 = permitted ( x , print , ebook ) ) ) a usage rights delegation scenario ontologies + rules ( swrl ) for license agreement : ontology for content distributor charlies : hasdisplayrights v hasu sagerights hasp rintrights v hasu sagerights ( hasdisplaycount { a , b } .<q>ebook , hasu sagecountc.ebook ) ( hasp rintcount { a , b } .<q>ebook , hasu sagecountc.ebook ) { alice , bob } domain hasu sagerights range r1 , where r1 = 10 hasu sagecountc 2007/05/07 / 0900 hasdatet imec.t ime 2007/05/10 / 2400 hasdatet imec.t ime = = sum ( 5 hasdisplaycounti .<q>{ harryp otter } ) , i { a , b } , where : hasdisplaycountc .<q>{ harryp otter } ( c1 ) = = sum ( 1 hasp rintcounti .<q>{ harryp otter } ) , i { a , b } , where : hasp rintcountc .<q>{ harryp otter } ( c2 ) = sum ( , ) , where : hasu sagecountc { harryp otter } ( c3 ) a usage rights delegation scenario ontologies + rules ( swrl ) for license agreement : rules for content distributor charlies : hasdisplayrights ( ?<q>x , ?<q>r ) hasselldrights ( ?<q>x , ?<q>r ) = hasdisplayselldrights ( ?<q>x , ?<q>r ) ( c4 ) hasp rintrights ( ?<q>x , ?<q>r ) hasselldrights ( ?<q>x , ?<q>r ) = hasp rintselldrights ( ?<q>x , ?<q>r ) ( c5 ) hasdisplayselldrights ( ?<q>x , ?<q>r ) delegateg ( ?<q>x , ?<q>y ) hasp repaid ( ?<q>y , ?<q>a ) = hasdisplayrights ( ?<q>y , ?<q>r ) ( c6 ) hasp rintselldrights ( ?<q>x , ?<q>r ) delegateg ( ?<q>x , ?<q>y ) hasp repaid ( ?<q>y , ?<q>a ) = hasp rintrights ( ?<q>y , ?<q>r ) ( c7 ) a usage rights delegation scenario ontologies + rules ( swrl ) for license agreement : facts for content distributor charlies : ebook ( harryp otter ) hasdisplayrights ( charlie , harryp otter ) hasp rintrights ( charlie , harryp otter ) hasselldrights ( charlie , harryp otter ) hasdisplayselldrights ( charlie , harryp otter ) hasp rintselldrights ( charlie , harryp otter ) = 5 hasp repaid ( alice ) hasdisplayrights ( alice , harryp otter ) ( c8 ) hasp rintrights ( alice , harryp otter ) ( c9 ) = 5 hasp repaid ( bob ) hasdisplayrights ( bob , harryp otter ) ( c10 ) hasp rintrights ( bob , harryp otter ) ( c11 ) discussion the pros and cons of different license agreement expression languages : natural language : pros human readable and understandable but cons machine unfriendly , no formal semantics .<q>pure fol : pros formal and clear syntax and semantics but cons machine unfriendly , possibly undecidable computation complexity , and policy writer ( reader ) needs to be a logician .<q>ontologies + rules : pros formal semantics for automatic machine processing and understanding but cons limited expressing power , such as negation - free , functionfree , and with limited number of parameter parities .<q>rights expression languages : pros xml - based for machine processing but cons no formal semantics .<q>policy languages for access rights permission conclusion the semantic formal model for a license agreement is an odrl - based rights delegation policy that can be enforced as a combination of ontologies and rules .<q>a rights delegation ontology is proposed based on odrls expressions and data dictionary , the rights delegation policies are proposed as a set of rules for usage and transfer ( or duplicate ) rights delegations .<q>a real usage rights delegation scenario is demonstrated to justify our formal semantic model .", "sections": [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12], "token_sections}