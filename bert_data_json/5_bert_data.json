{"src": [101, 2651, 1005, 2015, 6970, 9527, 8113, 16972, 2291, 2515, 2025, 4685, 2092, 1010, 2138, 1996, 1038, 21600, 8778, 28314, 2015, 3254, 1010, 27034, 10425, 2302, 7634, 2005, 2836, 1010, 2515, 2025, 2490, 4800, 15069, 16972, 1010, 1998, 2038, 3365, 3036, 24728, 19666, 6906, 14680, 1012, 102, 101, 2738, 2084, 5815, 10595, 2000, 2019, 2525, 3375, 8778, 1010, 2030, 25136, 2075, 6970, 9527, 8113, 16972, 2013, 11969, 1010, 2057, 16599, 2437, 1038, 21600, 16325, 1010, 1998, 8304, 3314, 2107, 2004, 2951, 1011, 4946, 2836, 1998, 3036, 2073, 2027, 7141, 1011, 2648, 1996, 16972, 8778, 1012, 102, 101, 2057, 16599, 1037, 6653, 2013, 2651, 1005, 2015, 4130, 1011, 2241, 16972, 1006, 2073, 16972, 6567, 12530, 2006, 1996, 2972, 2004, 1011, 4130, 1007, 2000, 2279, 1011, 6154, 16972, 1011, 1037, 5576, 2008, 27034, 1998, 14338, 5847, 2241, 2069, 2006, 1996, 8581, 5884, 1012, 102, 101, 2241, 2006, 9373, 1998, 6388, 3463, 1010, 2057, 2265, 2008, 2279, 1011, 6154, 16972, 5260, 2000, 6022, 2488, 2897, 2836, 2084, 4130, 1011, 2241, 16972, 1010, 1998, 2003, 2926, 4621, 2012, 10723, 1996, 2087, 3809, 1038, 21600, 19143, 3471, 1010, 4077, 2060, 12637, 1006, 2164, 2108, 2062, 2572, 8189, 3468, 2000, 4800, 15069, 16972, 102, 101, 1996, 3675, 11909, 8778, 1006, 1038, 21600, 1007, 25343, 1037, 2309, 3795, 4274, 2362, 2041, 1997, 3760, 6125, 2007, 7578, 3343, 11100, 1012, 102, 101, 1038, 21600, 2003, 17808, 2011, 3532, 2897, 2836, 1010, 2004, 2092, 2004, 3036, 24728, 19666, 6906, 14680, 1010, 9563, 10697, 1010, 4007, 12883, 1010, 1998, 2062, 1012, 102, 101, 1038, 21600, 2515, 2025, 10509, 2000, 3809, 2836, 1998, 3362, 8010, 3471, 1999, 1996, 2951, 4946, 1010, 2029, 2024, 1010, 1999, 2755, 1010, 2411, 12580, 8841, 2000, 1996, 16972, 8778, 1012, 102, 101, 1038, 21600, 2799, 28892, 2064, 2599, 2000, 2152, 14771, 3279, 1010, 23852, 3279, 1997, 20831, 1010, 1998, 3445, 4130, 2397, 9407, 1031, 1015, 1033, 1012, 102, 101, 17431, 1010, 2471, 2431, 1997, 1996, 2836, 3471, 2007, 29536, 11514, 2024, 1996, 2765, 1997, 1038, 21600, 2799, 28892, 1031, 1016, 1033, 1012, 102, 101, 1996, 2470, 1998, 4781, 4279, 2031, 3818, 3365, 3971, 2000, 8081, 1038, 21600, 1012, 102, 101, 2122, 10340, 3227, 2991, 2046, 2048, 7236, 1024, 1006, 1015, 1007, 22415, 2015, 2000, 1038, 21600, 1006, 1041, 29625, 2290, 29625, 1010, 2000, 5335, 19143, 1031, 1017, 29623, 2549, 1033, 1998, 3036, 1031, 1019, 29623, 2575, 1033, 1007, 1025, 1998, 1006, 1016, 1007, 4522, 4294, 2015, 2008, 2202, 1037, 1000, 4550, 1011, 12796, 3921, 1000, 2000, 6970, 9527, 8113, 16972, 1006, 2156, 102, 101, 2174, 1010, 2122, 10340, 2227, 3809, 6742, 15314, 1012, 102, 101, 2006, 1996, 2028, 2192, 1010, 22415, 2015, 2000, 1038, 21600, 5587, 10595, 2000, 2019, 2525, 3375, 8778, 1010, 2029, 2064, 8970, 2047, 3471, 1006, 1041, 29625, 2290, 29625, 1010, 9563, 10697, 1010, 8778, 19143, 3314, 1010, 1998, 2047, 2886, 19019, 1007, 1012, 102, 101, 2006, 1996, 2060, 2192, 1010, 4522, 4294, 2015, 2024, 3697, 1010, 2411, 2130, 5263, 1010, 2000, 21296, 4297, 28578, 21050, 2135, 29625, 8545, 2556, 1037, 2047, 2126, 2000, 8081, 6970, 9527, 8113, 16972, 1012, 102, 101, 2057, 8970, 1037, 3117, 16972, 4294, 2170, 1000, 2279, 18471, 16972, 1000, 1010, 2029, 2003, 2241, 2006, 2048, 14669, 6481, 1024, 1006, 1015, 1007, 2738, 2084, 8402, 2030, 6419, 1038, 21600, 1010, 21934, 28250, 2075, 1996, 16972, 8778, 2011, 9530, 20528, 24002, 2129, 5847, 2024, 3479, 1998, 15612, 1025, 1998, 1006, 1016, 1007, 8304, 3314, 2107, 102, 101, 2057, 7475, 2008, 2279, 1011, 6154, 16972, 2003, 12949, 22570, 2000, 5382, 2897, 9224, 1005, 3289, 1012, 102, 101, 2256, 4106, 1998, 24710, 2265, 2008, 2279, 1011, 6154, 16972, 6022, 24840, 2836, 1010, 2302, 4012, 25013, 2060, 3795, 11100, 1012, 102, 101, 2116, 1997, 1038, 21600, 1005, 2015, 2836, 3471, 14396, 2000, 2129, 2004, 2229, 2918, 16972, 6567, 2006, 1996, 5537, 1997, 2004, 2229, 2247, 1037, 4130, 1012, 102, 101, 2000, 4468, 1996, 1000, 4175, 1011, 2000, 1011, 15579, 1000, 3471, 2008, 17808, 3041, 3292, 1011, 9207, 16744, 1010, 1038, 21600, 2003, 1037, 4130, 1011, 9207, 8778, 2008, 2950, 1996, 2004, 1011, 4130, 17961, 1999, 2169, 2799, 8874, 1012, 102, 101, 2023, 4473, 2019, 2004, 2000, 2855, 11487, 1998, 4468, 10425, 2008, 5383, 15932, 29625, 14406, 22507, 1010, 1996, 2004, 1011, 4130, 2003, 6233, 2109, 2005, 2521, 2062, 2084, 7077, 10788, 1998, 1010, 1999, 3327, 1010, 2897, 9224, 6611, 3375, 3180, 11423, 2000, 1996, 2004, 1011, 4130, 2000, 4671, 2334, 18394, 2058, 5847, 1012, 102, 101, 6854, 1010, 16972, 6043, 2008, 5136, 1996, 2972, 2004, 1011, 4130, 2064, 2599, 2000, 2146, 19143, 2051, 1010, 1998, 2064, 2130, 2765, 1999, 3452, 8778, 17856, 17905, 1012, 102, 101, 6515, 3325, 1998, 10903, 2913, 5769, 2008, 1038, 21600, 19143, 2003, 2205, 4030, 2005, 9123, 5097, 1010, 1041, 29625, 2290, 29625, 1010, 29536, 11514, 1010, 4800, 29624, 13068, 2121, 2399, 1010, 1998, 3361, 11817, 1012, 102, 101, 5461, 2005, 8161, 19143, 8536, 8970, 3176, 25309, 2015, 1998, 9563, 7047, 2000, 1996, 2799, 2099, 4007, 1010, 4654, 10732, 28483, 3436, 2019, 2525, 3375, 2291, 29625, 8545, 7475, 2008, 2107, 17975, 2006, 1996, 2004, 1011, 4130, 2003, 2062, 1037, 17666, 21621, 2084, 1037, 2393, 1999, 10910, 2204, 2897, 2836, 1012, 102, 101, 2612, 1010, 2057, 8175, 2279, 1011, 6154, 16972, 1011, 2008, 2019, 2004, 4635, 1998, 9167, 10425, 2241, 9578, 2006, 1996, 2279, 18471, 2004, 4372, 2799, 2000, 2169, 7688, 17576, 1010, 1998, 6611, 2651, 1005, 2015, 1038, 21600, 3640, 2897, 9224, 2007, 2200, 4895, 16846, 2483, 21450, 2965, 2005, 8304, 2951, 1011, 4946, 2836, 3314, 1998, 3036, 102, 101, 2057, 7475, 2008, 2107, 2590, 11100, 2323, 2022, 8971, 2648, 1996, 16972, 8778, 1031, 2260, 1033, 1010, 1998, 16599, 3563, 7300, 1999, 2048, 3145, 2752, 1024, 2836, 1011, 5533, 16972, 1012, 102, 101, 2651, 1005, 2015, 1038, 21600, 1011, 4092, 2799, 2869, 9544, 7820, 2004, 1011, 10425, 2004, 2019, 14958, 2126, 2000, 5335, 2203, 1011, 2000, 1011, 2203, 2836, 1012, 102, 101, 2174, 1010, 2004, 1011, 4130, 3091, 2069, 11853, 2522, 14343, 26786, 2007, 2203, 1011, 2000, 1011, 2203, 20594, 8536, 1998, 2515, 2025, 8339, 2060, 2836, 12046, 2015, 1997, 3037, 1010, 1041, 29625, 2290, 29625, 1010, 2083, 18780, 1010, 2397, 9407, 1010, 1998, 3279, 1031, 2410, 1033, 1012, 102, 101, 8821, 1010, 1038, 21600, 2003, 4039, 2000, 11997, 2007, 3809, 2836, 1998, 3362, 8010, 3471, 1999, 1996, 2951, 4946, 1012, 102, 101, 2057, 7475, 2008, 1010, 2000, 6162, 2204, 2897, 2836, 1010, 2799, 4989, 2323, 2022, 2241, 2006, 3622, 9420, 1997, 4130, 3737, 1010, 2738, 2084, 1996, 3091, 1997, 1996, 2004, 1011, 4130, 29625, 8545, 16599, 15929, 16594, 2048, 10595, 1024, 2203, 1011, 2000, 1011, 2203, 8822, 1998, 4800, 15069, 16972, 1006, 2156, 2682, 1007, 1012, 102, 101, 4445, 1997, 2122, 10595, 2003, 3024, 2011, 2651, 1005, 2015, 1038, 21600, 1012, 102, 101, 2612, 1010, 2004, 2229, 2323, 15581, 2279, 1011, 6154, 10385, 1010, 2004, 2092, 2004, 2129, 4026, 2003, 3975, 2090, 3674, 1000, 2279, 6154, 2015, 1010, 1000, 2241, 2006, 4130, 1011, 3737, 8822, 1999, 1996, 2951, 4946, 1012, 102, 101, 2057, 6235, 5461, 2005, 24646, 2497, 2004, 2229, 1010, 3784, 2326, 11670, 1010, 1998, 6671, 2003, 4523, 2000, 8080, 4130, 2836, 29625, 3366, 10841, 15780, 1012, 102, 101, 1038, 21600, 2003, 12536, 2135, 8211, 2000, 4491, 1031, 1020, 1010, 1031, 2403, 1033, 1031, 2321, 1033, 1031, 2385, 1033, 1031, 2459, 1033, 1012, 102, 101, 2023, 11251, 1997, 1038, 21600, 2064, 2022, 18516, 2005, 19413, 6961, 25711, 4691, 1010, 17214, 4842, 2075, 1010, 14771, 7510, 1010, 1998, 2036, 2005, 3171, 4436, 1006, 1041, 29625, 2290, 29625, 1010, 4852, 2019, 2004, 1005, 2015, 6599, 1007, 1012, 102, 101, 2296, 2095, 2030, 2048, 1010, 1037, 2350, 5043, 14451, 2015, 2074, 2129, 11757, 8211, 1038, 21600, 2003, 1006, 1041, 29625, 2290, 29625, 1010, 1031, 2324, 1033, 1007, 1012, 102, 101, 1999, 2804, 1010, 2651, 1005, 2015, 2799, 2869, 2031, 1037, 2022, 29602, 4063, 2075, 9140, 1997, 9563, 7047, 2005, 17739, 1998, 9167, 2075, 5847, 1010, 2437, 9563, 10697, 1031, 2539, 29623, 11387, 1033, 1998, 4007, 12883, 1031, 2538, 1033, 1031, 2570, 1033, 1031, 2603, 1033, 2691, 4216, 1997, 3809, 4274, 2041, 13923, 29625, 8545, 2903, 2008, 18345, 2006, 1038, 21600, 2005, 2951, 102, 101, 2612, 1010, 2122, 21586, 2323, 2022, 8916, 1999, 2060, 1006, 2203, 1011, 2000, 1011, 2203, 1007, 3971, 1010, 2107, 2004, 21999, 1998, 27280, 1012, 102, 101, 2057, 2265, 2008, 2279, 1011, 6154, 16972, 6022, 13416, 1038, 21600, 1005, 2015, 2886, 3302, 1012, 102, 101, 4919, 1010, 2279, 1011, 6154, 16972, 3084, 2004, 2229, 11311, 2000, 8990, 2035, 2004, 1011, 4130, 1011, 2241, 4491, 1006, 1041, 29625, 2290, 29625, 1010, 4130, 1011, 2460, 7406, 4491, 1031, 2459, 1033, 1007, 1012, 102, 101, 2279, 1011, 6154, 16972, 2036, 20362, 21134, 2005, 11581, 2004, 2229, 2000, 17708, 1996, 8778, 1012, 102, 101, 2057, 2036, 2507, 9373, 3350, 2008, 2279, 1011, 6154, 16972, 2003, 2062, 24501, 18622, 4765, 2000, 9563, 10697, 1012, 102, 101, 2057, 2556, 2279, 1011, 6154, 16972, 1999, 2930, 1016, 1012, 102, 101, 2144, 2279, 18471, 16972, 2003, 1037, 5041, 16972, 4294, 1010, 2256, 9312, 3138, 2116, 3596, 1010, 2164, 1006, 1045, 1007, 9373, 4106, 1006, 2000, 2817, 19143, 1010, 20438, 21778, 1010, 1998, 15873, 2791, 2000, 28616, 8663, 8873, 27390, 3370, 1007, 1010, 1006, 2462, 1007, 12504, 7885, 1006, 2000, 5468, 19143, 2051, 1007, 1010, 1006, 3523, 1007, 102, 101, 2930, 1017, 3065, 2008, 2279, 1011, 6154, 16972, 6022, 13416, 19143, 2051, 1998, 2799, 2099, 8964, 1012, 102, 101, 2930, 1018, 3065, 2129, 2279, 1011, 6154, 16972, 6551, 21934, 24759, 14144, 2490, 2005, 4800, 15069, 16972, 1012, 102, 101, 2930, 1019, 3065, 2008, 2279, 1011, 6154, 16972, 13416, 1996, 2886, 3302, 2005, 1038, 21600, 1998, 3640, 21134, 2005, 11581, 2004, 2229, 2000, 5589, 9826, 1999, 1996, 8778, 1012, 102, 101, 2057, 2556, 5461, 2005, 4026, 2968, 1006, 1045, 29625, 2063, 29625, 1010, 4130, 1011, 3737, 8822, 1998, 4026, 3330, 1007, 1999, 2930, 1020, 1012, 102, 101, 2057, 2556, 3141, 2147, 1999, 2930, 1021, 1998, 16519, 1999, 2930, 1022, 1012, 102, 101, 6947, 2015, 2024, 16647, 2349, 2000, 2686, 14679, 1998, 2024, 2800, 1999, 2019, 3668, 2544, 1997, 1996, 3259, 1031, 2484, 1033, 1012, 102, 101, 2057, 2085, 2556, 2256, 2279, 1011, 6154, 16972, 4294, 1010, 2029, 3774, 1997, 2048, 6177, 1024, 1006, 1015, 1007, 2093, 3722, 3513, 2008, 9530, 20528, 2378, 2129, 5847, 2024, 3479, 1998, 15612, 1999, 1996, 1038, 21600, 3247, 2832, 1025, 1998, 1006, 1016, 1007, 6327, 10595, 2005, 2836, 1011, 5533, 16972, 2241, 2006, 2203, 102, 101, 2256, 3579, 1999, 2023, 2930, 2003, 2006, 1996, 2034, 6922, 1011, 1996, 2279, 1011, 6154, 16972, 3513, 1012, 102, 101, 2057, 6848, 3036, 1998, 2836, 23663, 2078, 16972, 1999, 5433, 1019, 1998, 1020, 1010, 4414, 29625, 2378, 2651, 1005, 2015, 4274, 1010, 1996, 17758, 2449, 8311, 2004, 2229, 3696, 2007, 2037, 6234, 10638, 2377, 1037, 13675, 2226, 1011, 9915, 2140, 2535, 1999, 12515, 2037, 16972, 6043, 1006, 2156, 1031, 2423, 1033, 1998, 22524, 1038, 1007, 1012, 102, 101, 2004, 2229, 7166, 2000, 9544, 6599, 1011, 11717, 5847, 2083, 6304, 2058, 5847, 1006, 2005, 2029, 2027, 3477, 1007, 2083, 2037, 11670, 1010, 1998, 2000, 4468, 4755, 4026, 2090, 11670, 1012, 102, 101, 2104, 2279, 1011, 6154, 16972, 1010, 2004, 2229, 4635, 1998, 9167, 10425, 2241, 9578, 2006, 1996, 2279, 18471, 2004, 4372, 2799, 2000, 2169, 7688, 17576, 1010, 2021, 2019, 2004, 2038, 2440, 2491, 2058, 2029, 6234, 10638, 4287, 2049, 4026, 1998, 3622, 4026, 2083, 2009, 1012, 102, 101, 2279, 1011, 6154, 16972, 2947, 4473, 2004, 2229, 7182, 22570, 2791, 2000, 5382, 2037, 2449, 6043, 1012, 102, 101, 1006, 5262, 1010, 2122, 2691, 16972, 6078, 2064, 2022, 3651, 2007, 2279, 1011, 6154, 16972, 1012, 1007, 102, 101, 1016, 29625, 2487, 1996, 4493, 1038, 21600, 3247, 2832, 1038, 21600, 1011, 4092, 2799, 2869, 4050, 4374, 3674, 5847, 2000, 1996, 2168, 7688, 1012, 102, 101, 2045, 2024, 2093, 4084, 1037, 1038, 21600, 2799, 2099, 3594, 2000, 2832, 2799, 14389, 1024, 1015, 1012, 102, 101, 2019, 12324, 3343, 16463, 2029, 5847, 2323, 2022, 21839, 1006, 1998, 6516, 5892, 2013, 9584, 1007, 1998, 24022, 1037, 1000, 2334, 12157, 1000, 1025, 1016, 1012, 102, 101, 1037, 3247, 2832, 27034, 1996, 2087, 16166, 2799, 1025, 1017, 1012, 102, 101, 2019, 9167, 3343, 16463, 2029, 1997, 1996, 10638, 4553, 1996, 4217, 2799, 29625, 10760, 3247, 2832, 3774, 1997, 2019, 3641, 2862, 1997, 12332, 2408, 2029, 5847, 2024, 4102, 1012, 102, 101, 2182, 1010, 2057, 3579, 2006, 1996, 2206, 2590, 4084, 1999, 1996, 1038, 21600, 3247, 2832, 1006, 2156, 1031, 2656, 1033, 2005, 1996, 2440, 2862, 1997, 4084, 1007, 1024, 1528, 9544, 3020, 2334, 12157, 1006, 2334, 28139, 2546, 1007, 1012, 102, 101, 1996, 1038, 21600, 2334, 28139, 2546, 17961, 12939, 9224, 2000, 4671, 4138, 1010, 3330, 1011, 1998, 2449, 1011, 12774, 18394, 2058, 5847, 1010, 2947, 9280, 10549, 1037, 2936, 2004, 1011, 4130, 2058, 1037, 7820, 2799, 1025, 1528, 9544, 7820, 5847, 1012, 102, 101, 7208, 2090, 5847, 2008, 3745, 1996, 3284, 2334, 28139, 2546, 2024, 3714, 1999, 5684, 1997, 5847, 2007, 1996, 7290, 2004, 1011, 4130, 3091, 1025, 1528, 3188, 25090, 4371, 2214, 5847, 2058, 2047, 3924, 1012, 102, 101, 2023, 3247, 3357, 2003, 7528, 1999, 2070, 2799, 2869, 1031, 2676, 1033, 2021, 2025, 2467, 9124, 2011, 12398, 1012, 102, 101, 2057, 2085, 20648, 2256, 2093, 2279, 1011, 6154, 16972, 3513, 29625, 6820, 2571, 1045, 1024, 2224, 2279, 1011, 6154, 10385, 1012, 102, 101, 9530, 8873, 27390, 2063, 10385, 1997, 5847, 2241, 2069, 2006, 1996, 6234, 2279, 1011, 6154, 2004, 4372, 2799, 2000, 2169, 7688, 1006, 1041, 29625, 2290, 29625, 1010, 2000, 9544, 8013, 19738, 21119, 5847, 2058, 10802, 1011, 4342, 5847, 1007, 1012, 102, 101, 7208, 1999, 1996, 10385, 1997, 2279, 1011, 6154, 2015, 2024, 7936, 29625, 6820, 2571, 2462, 1024, 3188, 25090, 4371, 2783, 2799, 1012, 102, 101, 2000, 18478, 4130, 8993, 1010, 2043, 4320, 2007, 1037, 3601, 2090, 1996, 1000, 2214, 1000, 1006, 2783, 1007, 2799, 1998, 2019, 8053, 1011, 2204, 1006, 1999, 3408, 1997, 2279, 18471, 1007, 2047, 2028, 1010, 2128, 29624, 11246, 22471, 1996, 2214, 2799, 1012, 102, 101, 2004, 1038, 2003, 5627, 2000, 9167, 2799, 2919, 1010, 2021, 2025, 1996, 2062, 6871, 2799, 1038, 2094, 1010, 2000, 1039, 29625, 6516, 1010, 2065, 1038, 3431, 2049, 2799, 2013, 2919, 2000, 1996, 1038, 2094, 1010, 2009, 2097, 2644, 13856, 2049, 2799, 2000, 1039, 1998, 2947, 12532, 10087, 6593, 1039, 2013, 1996, 7688, 1040, 29625, 6820, 2571, 3523, 1024, 102, 101, 2065, 1037, 2799, 1052, 2003, 9167, 3085, 2000, 1037, 8581, 2004, 1045, 1010, 2059, 2061, 2442, 2022, 2035, 5847, 2008, 2024, 2062, 3811, 4396, 2084, 1052, 1012, 102, 101, 29202, 2135, 1010, 8335, 9167, 16263, 6151, 2229, 7895, 3468, 13352, 2004, 1999, 3275, 1015, 1010, 2073, 2019, 2004, 12532, 10087, 16649, 1037, 11429, 2013, 1037, 7688, 2011, 17739, 1037, 2488, 2799, 2005, 2993, 1012, 102, 101, 2897, 9224, 2064, 6653, 2000, 2279, 1011, 6154, 16972, 3432, 2011, 9530, 8873, 27390, 2075, 2037, 4493, 2799, 2869, 1999, 10388, 2007, 1996, 2279, 1011, 6154, 16972, 3513, 1012, 102, 101, 2023, 2003, 4719, 3081, 1996, 2206, 2093, 4506, 1024, 1006, 1045, 1007, 11243, 2069, 2279, 18471, 10385, 2043, 9530, 8873, 27390, 2075, 12324, 6043, 2000, 23911, 2334, 28139, 2546, 2005, 1041, 2497, 21600, 1011, 4342, 5847, 1010, 1006, 2462, 1007, 4487, 3736, 9709, 1996, 2004, 1011, 4130, 3091, 3357, 1999, 1996, 1038, 21600, 3247, 2832, 1006, 2004, 3569, 2006, 2087, 3293, 102, 101, 2947, 1010, 2019, 2004, 2064, 12192, 21296, 2279, 1011, 6154, 16972, 2302, 2151, 3431, 2000, 1996, 10318, 3941, 1998, 2302, 2151, 2490, 2013, 2049, 10638, 1015, 1012, 102, 101, 29202, 2135, 1010, 1038, 21600, 2064, 28314, 3254, 2005, 2048, 2364, 4436, 1024, 1006, 1015, 1007, 2235, 1998, 2521, 9497, 16972, 3431, 2064, 2599, 2019, 2004, 2000, 7276, 1037, 2047, 2279, 1011, 6154, 1010, 2947, 2877, 2000, 1037, 4677, 4668, 1997, 4745, 16972, 3431, 1025, 1998, 1006, 1016, 1007, 4297, 5644, 27870, 14767, 2090, 4130, 10385, 102, 101, 2256, 2279, 1011, 6154, 16972, 3513, 4652, 2122, 16820, 1025, 2279, 1011, 6154, 10385, 11302, 2008, 6556, 16972, 3431, 2079, 2025, 3298, 2019, 2004, 2000, 2689, 2049, 2279, 6154, 1025, 8335, 9167, 21586, 2008, 2043, 2488, 2075, 2049, 2219, 2799, 2019, 2004, 2196, 12532, 10087, 16649, 2060, 2004, 2229, 2013, 1037, 7688, 1012, 102, 101, 2057, 2085, 2556, 6388, 1998, 9373, 3350, 2008, 2279, 1011, 6154, 16972, 28314, 2015, 2855, 2000, 1037, 1000, 6540, 1000, 16972, 9563, 29625, 12589, 2015, 1012, 102, 101, 2057, 3579, 2006, 2093, 12046, 2015, 2005, 9854, 2836, 2076, 1996, 19143, 2832, 1024, 1528, 1001, 2830, 2075, 3431, 1010, 2008, 2003, 1010, 1996, 2193, 1997, 2335, 2004, 2229, 2689, 2037, 9804, 1997, 2279, 6154, 2076, 1996, 19143, 2832, 1006, 7680, 7583, 2408, 2035, 2004, 2229, 1007, 1025, 1528, 1001, 16972, 3431, 1010, 2008, 2003, 102, 101, 2256, 7885, 2265, 2008, 2279, 1011, 6154, 16972, 6022, 13416, 1996, 2193, 1997, 10651, 7696, 1010, 16972, 3431, 1010, 1998, 2830, 2075, 3431, 1010, 2104, 2536, 2897, 2824, 1998, 27274, 2685, 1012, 102, 101, 2057, 2224, 1996, 22330, 28659, 1031, 2654, 1033, 2004, 1011, 2504, 4274, 19587, 2006, 5553, 1015, 1010, 2230, 1012, 102, 101, 2169, 2004, 2003, 3421, 2011, 2028, 2799, 2099, 1010, 1998, 1996, 6971, 2090, 2004, 2229, 2024, 5754, 17287, 3064, 2007, 2449, 3276, 1012, 102, 101, 1996, 19587, 3397, 1037, 2561, 1997, 3943, 29623, 2683, 2581, 2575, 2004, 2229, 1010, 1997, 2029, 1018, 29623, 2575, 19841, 2024, 2512, 29624, 3367, 12083, 2015, 1010, 2008, 2003, 1010, 2004, 2229, 2008, 2031, 2053, 6304, 1997, 2037, 2219, 1010, 1998, 1996, 2717, 2024, 24646, 5910, 1012, 102, 101, 1996, 19587, 3397, 5139, 29623, 2581, 20842, 8013, 1011, 10802, 6971, 1998, 4724, 29623, 2620, 2620, 2620, 8152, 1011, 8152, 6971, 29625, 21572, 3406, 25778, 2015, 1012, 102, 101, 2057, 16157, 1038, 21600, 1006, 3115, 3247, 2832, 1007, 1010, 10975, 2099, 1006, 9544, 3522, 2799, 1007, 1031, 2676, 1033, 2073, 1996, 2345, 5495, 1011, 4911, 3357, 19233, 1996, 2783, 2190, 2799, 2058, 2047, 5847, 1010, 1998, 2279, 1011, 6154, 16972, 1012, 102, 101, 2005, 2035, 2122, 16744, 1010, 2057, 3582, 1996, 17377, 1011, 10151, 3877, 12324, 1998, 9167, 3785, 1031, 2423, 1033, 1006, 2156, 22524, 1038, 1007, 1010, 2073, 2004, 2229, 3188, 25090, 4371, 8013, 1011, 4342, 5847, 2058, 8152, 1011, 4342, 5847, 2058, 10802, 1011, 4342, 5847, 1012, 102, 101, 1038, 21600, 1998, 10975, 2099, 9544, 7820, 5847, 2000, 2936, 3924, 2306, 2169, 4696, 1006, 8013, 1011, 1013, 8152, 1011, 1013, 10802, 1011, 4342, 1007, 1012, 102, 101, 2035, 2093, 16744, 15470, 1996, 8335, 9167, 9095, 1012, 102, 101, 13599, 1996, 2093, 16744, 4473, 2149, 2000, 24110, 27351, 1996, 5197, 1997, 2279, 18471, 5464, 1006, 2069, 1999, 2279, 1011, 6154, 16972, 1007, 1998, 3188, 25090, 6774, 1996, 2783, 2799, 1006, 1999, 2119, 2279, 1011, 6154, 5464, 1998, 10975, 2099, 1007, 1012, 102, 101, 2057, 2224, 1996, 1039, 1011, 1038, 21600, 1031, 2756, 1033, 25837, 1012, 102, 101, 3602, 2008, 1039, 1011, 1038, 21600, 2515, 2025, 2490, 1996, 2720, 4886, 1006, 6263, 2799, 15147, 13483, 1007, 25309, 1010, 2029, 3446, 1011, 6537, 1996, 14409, 2741, 2006, 2169, 5219, 1012, 102, 101, 2348, 1996, 1038, 21600, 14645, 26021, 1996, 12398, 2720, 4886, 1997, 2382, 3823, 1031, 2382, 1033, 1010, 2799, 2099, 17088, 1031, 2861, 1033, 1998, 1996, 29464, 24475, 1031, 3590, 1033, 8175, 2478, 2172, 3760, 2720, 15593, 1006, 1041, 29625, 2290, 29625, 1010, 1037, 2261, 3823, 1007, 2030, 9268, 1996, 25309, 4498, 1010, 2349, 2000, 1996, 2836, 5918, 1997, 102, 101, 2947, 1010, 2256, 12504, 3463, 2302, 2720, 4886, 10906, 2323, 2022, 1037, 9608, 24155, 1997, 2830, 2075, 3431, 1010, 16972, 3431, 1010, 1998, 1038, 21600, 10651, 7696, 2004, 1996, 4274, 5829, 2185, 2013, 2312, 2720, 4886, 25309, 2015, 1012, 102, 101, 1999, 2755, 1010, 2256, 6388, 1998, 9373, 3463, 2917, 6592, 2008, 2279, 1011, 6154, 16972, 2071, 3499, 2004, 2229, 2000, 6366, 1996, 2720, 4886, 25309, 4498, 1012, 102, 101, 2144, 1039, 1011, 1038, 21600, 2515, 2025, 3965, 8321, 10035, 1997, 19143, 2051, 1010, 2057, 2079, 2025, 2556, 3463, 2005, 2023, 12046, 29625, 18697, 7666, 1012, 102, 101, 2057, 5136, 2093, 2824, 1024, 17576, 8874, 1010, 4957, 4945, 1010, 1998, 4957, 7233, 1012, 102, 101, 2057, 2034, 1999, 20614, 1037, 17576, 2013, 1037, 18154, 3479, 4800, 29624, 23393, 2098, 24646, 2497, 2004, 1010, 2279, 18154, 8246, 1037, 4957, 2090, 1996, 24646, 2497, 2004, 1998, 2028, 1997, 2049, 11670, 1010, 1998, 2059, 8980, 1996, 3478, 4957, 1012, 102, 101, 2057, 3524, 2005, 1996, 16972, 8778, 2000, 28314, 2044, 2169, 3357, 1010, 2077, 3048, 2006, 2000, 1996, 2279, 3357, 1012, 102, 101, 2005, 2169, 7551, 1010, 2057, 24134, 2035, 1996, 12046, 2015, 2012, 3479, 27274, 2685, 1006, 2156, 2917, 1007, 1012, 102, 101, 2057, 9377, 2023, 7551, 2005, 3156, 18154, 1011, 4217, 4800, 29624, 23393, 2098, 24646, 2497, 2004, 2229, 29625, 18941, 4270, 2685, 1012, 102, 101, 2057, 11949, 1996, 2193, 1997, 10651, 7696, 1010, 16972, 3431, 1010, 1998, 2830, 2075, 3431, 2013, 2035, 1018, 29623, 2575, 19841, 2512, 29624, 3367, 12083, 2004, 2229, 1998, 2013, 18154, 4217, 1019, 29623, 8889, 2692, 24646, 2497, 2004, 2229, 2004, 27274, 2685, 1012, 102, 101, 2057, 2085, 2556, 2256, 3463, 2005, 1996, 4945, 1997, 1037, 4957, 7176, 2019, 2004, 2000, 1996, 2717, 1997, 1996, 4274, 1012, 102, 101, 2256, 3463, 2005, 1996, 2060, 2824, 2057, 16157, 2024, 2714, 29625, 9006, 19362, 10929, 1024, 1038, 21600, 14409, 2012, 2512, 29624, 3367, 12083, 2015, 1012, 102, 101, 3275, 1016, 1007, 1010, 2070, 2512, 29624, 3367, 12083, 2004, 2229, 4374, 5190, 1997, 10651, 7696, 1012, 102, 101, 5875, 2135, 1010, 1996, 3469, 1010, 2488, 1011, 4198, 2004, 2229, 7166, 2000, 4374, 2062, 10651, 7696, 1010, 10712, 2138, 2027, 2031, 2116, 2062, 10638, 9167, 2075, 5847, 2000, 2068, 1012, 102, 101, 1996, 2087, 1011, 5360, 2512, 29624, 3367, 12083, 2004, 8267, 18582, 2620, 10651, 7696, 1010, 1998, 1996, 2087, 1011, 5360, 24646, 2497, 8267, 24194, 1012, 102, 101, 10975, 2099, 3621, 13416, 2023, 2193, 1006, 2690, 7774, 1999, 3275, 1016, 1010, 2029, 3262, 17702, 2015, 2007, 1996, 1038, 21600, 7774, 1010, 3272, 2012, 1996, 5725, 1007, 1010, 2011, 9992, 14203, 4130, 8993, 1012, 102, 101, 2279, 1011, 6154, 16972, 5260, 2000, 3278, 7620, 1006, 3953, 7774, 1007, 1012, 102, 101, 1996, 2172, 3760, 2193, 1997, 10651, 7696, 6083, 2008, 2279, 1011, 6154, 16972, 2052, 3499, 2004, 2229, 2000, 6366, 1996, 2720, 4886, 25309, 1006, 2004, 2003, 1996, 2553, 1999, 2256, 7885, 1007, 2302, 10449, 1037, 2312, 2193, 1997, 7696, 1006, 2156, 2036, 9872, 1017, 29625, 2487, 2917, 1007, 1012, 102, 101, 9131, 2008, 2279, 1011, 6154, 16972, 8778, 2003, 3605, 1997, 2093, 3033, 1024, 2279, 1011, 6154, 5464, 1010, 9544, 2214, 2799, 1010, 1998, 8335, 9167, 1012, 102, 101, 2096, 1996, 3357, 1997, 8335, 9167, 2003, 4162, 1999, 2035, 16744, 1997, 1038, 21600, 1010, 10975, 2099, 1010, 1998, 2279, 1011, 6154, 1010, 1996, 6578, 2090, 1996, 10543, 1997, 1038, 21600, 1998, 10975, 2099, 1999, 3275, 1016, 3065, 1996, 3576, 6666, 1997, 1996, 10975, 2099, 3357, 1999, 2279, 18471, 16972, 1012, 102, 101, 2011, 5688, 1010, 1996, 6578, 2090, 1996, 10543, 1997, 10975, 2099, 1998, 2279, 1011, 6154, 1999, 1996, 3275, 4415, 16691, 1996, 7620, 2011, 2478, 2279, 1011, 6154, 5464, 29625, 9006, 19362, 10929, 1024, 16972, 1013, 2830, 2075, 3431, 2012, 2512, 3367, 12083, 2015, 1012, 102, 101, 2279, 1011, 6154, 16972, 2036, 6551, 13416, 1996, 2193, 1997, 16972, 1998, 2830, 2075, 3431, 2005, 2512, 29624, 3367, 12083, 2004, 2229, 1006, 2156, 3275, 1017, 1007, 1012, 102, 101, 2005, 1996, 2004, 2229, 2029, 3325, 3431, 1010, 1996, 2779, 2193, 1997, 16972, 3431, 2003, 1018, 29625, 2683, 2683, 2005, 1038, 21600, 1010, 1019, 29625, 2692, 2509, 2005, 10975, 2099, 1010, 1998, 2069, 1017, 29625, 2683, 2629, 2005, 2279, 1011, 6154, 1038, 21600, 1012, 102, 101, 2057, 2131, 2714, 3463, 2005, 1996, 2779, 2193, 1997, 2830, 2075, 3431, 1024, 1016, 29625, 21619, 2005, 1038, 21600, 1010, 1016, 29625, 24434, 2005, 10975, 2099, 1010, 1998, 1016, 29625, 11387, 2005, 2279, 18471, 16972, 1012, 102, 101, 1999, 2755, 1010, 3904, 1997, 1996, 2512, 29624, 3367, 12083, 2004, 2229, 3325, 2062, 2084, 2416, 2830, 2075, 3431, 2104, 2279, 1011, 6154, 16972, 2005, 2122, 7885, 1012, 102, 101, 1999, 5688, 1010, 2004, 2229, 3325, 2004, 2116, 2004, 2702, 2830, 2075, 3431, 2043, 21393, 1037, 7820, 2004, 1011, 4130, 2058, 6595, 2007, 1996, 2168, 2279, 1011, 6154, 2004, 1010, 2004, 1999, 10975, 2099, 29625, 9006, 19362, 10929, 1024, 24646, 5910, 1012, 102, 101, 3275, 1018, 14811, 1996, 4353, 1997, 1996, 2193, 1997, 10651, 7696, 1998, 16972, 3431, 2004, 2464, 2012, 24646, 2497, 2004, 2229, 1012, 102, 101, 11949, 2008, 2279, 1011, 6154, 16972, 2320, 2153, 5260, 2000, 3278, 7620, 2058, 2119, 1038, 21600, 1998, 10975, 2099, 29625, 10760, 1014, 29625, 2487, 1003, 2597, 1012, 102, 101, 1996, 10507, 20952, 14811, 1010, 2096, 6179, 2005, 28252, 1996, 7578, 6322, 1997, 2004, 2229, 2076, 19143, 1010, 2024, 4895, 9148, 14273, 2100, 2005, 2132, 1011, 2000, 1011, 2132, 18539, 1997, 1996, 16744, 2408, 2367, 2824, 1998, 19143, 12046, 2015, 1012, 102, 101, 2664, 1010, 2007, 2107, 1037, 15315, 7974, 2098, 4353, 1010, 1996, 2812, 1998, 1996, 3991, 2024, 2025, 2926, 15902, 1012, 102, 101, 2061, 1010, 2057, 3579, 2006, 1996, 3325, 1997, 1996, 2004, 2012, 1996, 1014, 29625, 2487, 1003, 2597, 1999, 1996, 10507, 20952, 14811, 1010, 4352, 2149, 2000, 3579, 2006, 1996, 1006, 2512, 29624, 3367, 12083, 1007, 2004, 2229, 2008, 2024, 5360, 1996, 2087, 4957, 15428, 2302, 4352, 2028, 2041, 14355, 2004, 2000, 13827, 1996, 3463, 1012, 102, 101, 2057, 7680, 7849, 4697, 1996, 2951, 1999, 3347, 6093, 1999, 3275, 1019, 1012, 102, 101, 1996, 6963, 2005, 1000, 4957, 4945, 1000, 17254, 2000, 1996, 1061, 1027, 1014, 29625, 8889, 2487, 2597, 1999, 4481, 1017, 1006, 1037, 1007, 1998, 1018, 1006, 1037, 1007, 1010, 4414, 1012, 102, 101, 2057, 2079, 2025, 5436, 1996, 2193, 1997, 2830, 2075, 3431, 2144, 1010, 2005, 2087, 7885, 1010, 1996, 1014, 29625, 2487, 2705, 1011, 3867, 9463, 2004, 5281, 2012, 2087, 2028, 2830, 2075, 2689, 1012, 102, 101, 2057, 2131, 2714, 3463, 2011, 13599, 1996, 2193, 1997, 10651, 7696, 1998, 16972, 3431, 15306, 1012, 102, 101, 2256, 3463, 2265, 2008, 2279, 1011, 6154, 16972, 4107, 25006, 1999, 1996, 2193, 1997, 10651, 7696, 1998, 16972, 3431, 2408, 1037, 2846, 1997, 2897, 2824, 1012, 102, 101, 2122, 3463, 2036, 19141, 2129, 2279, 1011, 6154, 16972, 2003, 2926, 4621, 2012, 10723, 1996, 2087, 3809, 19143, 3471, 1011, 2073, 2019, 2004, 6322, 5606, 1997, 16972, 3431, 1998, 15295, 1997, 2830, 2075, 3431, 1012, 102, 101, 2023, 2025, 2069, 13416, 1996, 2836, 20461, 2015, 5281, 2011, 1996, 2951, 4026, 1010, 2021, 2036, 6022, 13416, 1996, 8964, 2005, 4487, 11393, 27932, 1038, 21600, 10651, 7696, 1012, 102, 101, 2256, 2279, 1011, 6154, 16972, 3513, 19515, 1996, 4598, 1997, 1037, 6540, 2110, 1999, 1996, 2897, 1031, 2340, 1033, 1010, 2021, 2023, 2515, 2025, 11302, 1038, 21600, 19143, 2000, 1037, 6540, 2110, 2030, 2008, 2107, 19143, 2022, 3435, 1012, 102, 101, 5262, 1010, 2130, 1999, 1996, 3019, 1000, 17377, 2890, 2595, 3877, 7705, 1000, 1006, 2156, 22524, 1038, 1007, 1010, 2008, 19566, 2691, 2004, 2229, 1005, 16972, 6078, 1998, 2073, 1038, 21600, 19143, 2000, 1037, 6540, 2110, 2003, 12361, 1010, 19143, 2453, 9125, 27258, 2135, 2116, 2830, 2075, 3431, 1010, 16972, 3431, 1998, 1038, 21600, 14409, 1031, 3943, 1033, 102, 101, 2057, 13711, 2256, 12504, 3463, 2007, 9373, 3350, 2008, 2279, 1011, 6154, 16972, 6022, 13416, 1996, 2193, 1997, 2830, 2075, 3431, 1010, 16972, 3431, 1010, 1998, 10651, 7696, 1012, 102, 101, 2057, 2224, 1996, 3115, 2944, 2005, 20253, 1038, 21600, 10949, 2404, 5743, 1999, 1031, 4090, 1033, 1012, 102, 101, 2156, 22524, 1037, 2005, 2019, 7526, 1997, 1996, 2944, 1012, 102, 101, 2057, 2265, 2008, 1999, 1996, 17377, 1011, 10151, 3877, 7705, 1010, 2065, 2004, 2229, 15470, 1996, 2279, 1011, 6154, 16972, 3513, 1016, 1010, 3435, 2004, 2229, 1010, 19143, 2000, 1037, 6540, 2110, 1016, 1996, 17377, 1011, 10151, 3877, 3785, 2079, 2025, 19515, 2279, 1011, 6154, 16972, 1006, 1998, 3580, 18601, 1007, 1025, 2130, 2065, 102, 101, 2174, 1010, 2011, 7995, 2006, 6550, 2003, 12361, 1006, 2008, 2003, 1010, 19143, 7336, 1037, 17505, 1010, 2025, 27258, 1010, 2193, 1997, 2830, 2075, 1998, 16972, 3431, 1998, 1997, 1038, 21600, 14409, 1007, 2130, 1999, 1996, 5409, 18382, 1012, 102, 101, 2057, 2391, 2041, 2008, 1010, 2000, 1996, 2190, 1997, 2256, 3716, 1010, 2023, 2003, 1996, 2034, 2765, 2000, 5323, 3435, 1038, 21600, 19143, 1999, 1996, 3115, 2944, 1997, 1038, 21600, 10949, 1012, 102, 101, 1528, 1051, 1006, 1064, 1050, 1064, 1064, 1048, 1064, 1016, 1007, 16972, 3431, 1025, 1528, 1051, 1006, 1064, 1048, 1064, 1017, 1007, 1038, 21600, 10651, 7696, 29625, 15222, 2015, 4324, 2005, 2035, 10984, 2015, 1997, 2799, 2099, 13791, 2015, 1013, 10651, 4471, 25470, 29625, 10760, 6947, 3544, 1999, 1996, 3668, 2544, 1997, 1996, 3259, 1031, 2484, 1033, 1012, 102, 101, 2057, 6911, 2008, 1010, 2013, 1037, 6742, 7339, 1010, 1996, 2755, 2008, 1996, 2682, 19202, 2907, 2005, 2296, 10984, 1997, 2799, 2099, 13791, 2015, 1013, 10651, 1011, 4471, 25470, 12748, 2008, 3435, 19143, 2007, 2279, 1011, 6154, 16972, 2003, 4719, 7539, 1997, 1996, 2720, 4886, 25309, 10906, 1998, 1010, 1999, 3327, 1010, 2130, 102, 101, 3728, 1010, 2045, 2038, 2042, 1037, 12058, 1997, 3037, 1999, 4800, 15069, 6970, 9527, 8113, 16972, 1006, 2156, 1010, 1041, 29625, 2290, 29625, 1010, 1031, 1017, 29623, 2683, 1010, 1031, 3486, 1033, 1031, 4029, 1033, 1031, 4261, 1033, 1007, 1012, 102, 101, 2057, 2085, 6848, 2129, 2279, 1011, 6154, 16972, 2064, 2191, 4800, 15069, 16972, 2062, 26743, 3468, 1998, 4297, 28578, 21050, 2135, 21296, 3085, 1012, 102, 101, 2057, 2059, 7949, 1996, 9373, 3463, 2005, 19143, 1998, 20438, 21778, 1997, 2279, 1011, 6154, 16972, 2000, 1037, 3563, 4800, 15069, 16972, 4292, 29625, 24415, 6234, 10638, 1010, 1996, 17377, 1011, 10151, 3877, 3785, 2175, 8100, 2362, 2007, 2256, 2279, 1011, 6154, 16972, 3513, 1012, 102, 101, 6854, 1010, 15743, 1038, 21600, 1011, 2241, 4800, 15069, 16972, 11683, 2064, 2022, 4895, 15782, 20470, 2571, 1010, 2349, 2000, 1996, 2342, 2000, 4487, 11393, 19269, 1998, 3573, 3674, 5847, 1012, 102, 101, 2005, 1996, 19587, 1999, 3275, 1020, 1010, 5136, 1996, 15743, 4800, 15069, 8778, 2073, 14164, 14970, 2035, 2800, 5847, 2000, 8581, 14164, 1012, 102, 101, 11949, 2008, 2004, 2229, 1037, 1998, 1038, 1010, 2008, 2169, 2031, 2048, 5847, 2000, 1996, 7688, 1040, 1010, 2097, 2119, 14970, 2048, 5847, 2000, 2004, 1039, 1012, 102, 101, 2004, 1039, 2097, 2059, 14970, 2176, 5847, 2000, 2004, 1040, 1010, 1998, 2061, 2006, 1012, 102, 101, 2023, 2064, 4089, 2765, 1999, 2110, 7738, 1998, 1999, 11664, 6726, 1997, 10651, 7696, 29625, 8545, 2265, 2008, 2279, 1011, 6154, 16972, 2003, 2062, 2572, 8189, 3468, 2000, 4800, 15069, 2084, 4130, 1011, 2241, 16972, 1012, 102, 101, 1996, 3145, 8089, 2003, 2008, 2104, 2279, 1011, 6154, 16972, 1010, 1037, 13045, 2342, 2025, 4553, 1037, 8581, 13045, 1005, 2015, 3674, 10425, 1010, 2021, 6414, 4553, 2438, 2000, 4468, 15932, 1012, 102, 101, 2065, 2004, 1039, 1999, 3275, 1020, 2038, 1037, 2279, 1011, 6154, 5464, 1997, 5847, 2059, 1010, 2000, 9585, 1039, 2000, 11487, 15932, 1010, 2004, 1037, 1006, 2030, 1038, 1007, 2064, 6414, 4604, 1039, 2019, 1006, 27776, 26764, 2098, 1007, 2862, 1997, 2035, 1996, 2004, 2229, 2049, 1006, 3674, 1007, 5847, 20811, 1012, 102, 101, 1038, 21600, 4473, 1996, 28041, 1997, 5847, 2046, 2028, 2107, 2004, 1011, 2275, 1031, 4229, 1033, 1010, 2008, 7680, 7849, 10057, 1996, 2004, 1011, 4130, 12332, 1997, 2035, 1996, 3265, 5847, 1012, 102, 101, 2947, 1010, 1038, 21600, 2799, 28041, 1010, 2109, 2000, 2562, 1038, 21600, 16972, 7251, 6133, 3085, 1999, 2060, 18046, 1010, 2064, 2036, 2022, 2109, 2000, 6551, 10210, 28731, 1996, 3465, 1997, 4800, 15069, 2279, 1011, 6154, 16972, 29625, 10222, 3401, 1010, 2279, 1011, 6154, 16972, 24950, 1996, 8803, 2005, 2437, 4800, 15069, 16972, 1037, 4507, 1012, 102, 101, 3007, 6026, 2006, 4800, 15069, 16972, 2064, 10750, 1996, 2206, 6666, 1024, 11343, 1012, 102, 101, 4800, 15069, 16972, 7457, 1996, 16593, 2008, 2019, 2004, 2038, 2012, 2560, 2028, 2551, 4130, 29625, 7011, 4014, 5397, 7233, 1012, 102, 101, 2019, 2004, 2007, 3674, 2279, 1011, 6154, 2015, 2064, 10509, 3202, 2000, 1037, 4945, 1999, 2028, 22011, 4957, 2011, 6016, 4026, 2247, 2178, 1006, 1998, 2025, 3524, 2005, 1996, 8778, 2000, 2128, 29624, 8663, 6299, 3351, 1007, 1012, 102, 101, 2019, 2004, 2071, 2031, 3674, 2279, 18471, 2015, 1006, 2007, 5020, 2334, 12157, 1007, 1998, 5630, 3251, 1998, 2129, 2172, 4026, 2000, 3622, 2083, 2169, 2279, 1011, 6154, 1006, 1041, 29625, 2290, 29625, 1010, 2241, 2006, 2951, 1011, 4946, 8822, 1007, 1012, 102, 101, 7511, 5461, 1010, 2107, 2004, 23325, 2075, 2006, 4249, 1999, 1996, 12997, 20346, 1010, 2064, 5676, 2008, 23730, 1997, 1996, 2168, 4834, 20811, 1996, 2168, 4130, 1010, 2000, 4652, 2041, 1011, 1997, 1011, 2344, 14771, 6959, 1012, 102, 101, 2096, 2104, 1038, 21600, 1037, 2799, 2099, 2003, 7775, 2000, 17739, 1037, 2309, 2799, 1006, 2005, 2169, 7688, 17576, 1007, 1010, 2019, 2004, 2089, 2215, 2000, 7276, 2367, 5847, 2005, 2367, 8581, 2004, 2229, 2005, 3171, 4436, 1006, 1041, 29625, 2290, 29625, 1010, 2019, 2003, 2361, 2071, 3749, 2367, 2578, 2000, 6304, 1031, 4261, 1033, 1007, 2030, 102, 101, 10638, 5051, 6895, 8873, 2278, 1038, 21600, 1031, 4261, 1033, 2003, 1037, 3522, 3818, 5331, 2000, 1038, 21600, 2008, 4473, 1037, 2799, 2099, 2000, 7276, 1037, 2367, 1006, 2309, 1007, 2799, 2005, 2169, 11429, 1010, 2008, 2003, 1010, 7661, 4697, 2799, 4989, 2006, 1037, 2566, 1011, 11429, 3978, 1012, 102, 101, 10889, 1010, 1996, 3176, 16991, 1999, 2799, 4989, 2104, 24978, 1011, 1038, 21600, 2036, 24840, 3795, 2897, 9211, 1031, 4261, 1033, 1012, 102, 101, 2057, 2085, 2265, 2008, 2256, 9373, 2765, 2005, 9530, 6299, 1011, 8991, 3401, 1997, 2279, 1011, 6154, 16972, 8908, 2000, 24978, 1011, 1038, 21600, 1012, 102, 101, 4919, 1010, 2057, 5136, 2279, 1011, 6154, 16972, 2007, 24978, 1011, 1038, 21600, 1010, 2008, 2003, 1010, 16972, 2007, 24978, 1011, 1038, 21600, 2107, 2008, 1006, 1015, 1007, 2019, 2004, 2003, 7775, 2000, 2069, 2478, 2279, 1011, 6154, 10385, 2000, 7276, 5847, 2005, 8581, 2004, 2229, 1006, 4298, 2478, 2367, 10385, 2005, 2367, 102, 101, 2156, 3275, 1021, 2005, 2019, 14614, 1997, 2279, 1011, 6154, 16972, 2007, 24978, 1011, 1038, 21600, 1012, 102, 101, 2057, 6011, 1996, 21800, 2015, 1997, 9872, 1017, 29625, 2487, 1006, 2156, 2930, 1017, 1007, 1999, 2023, 4800, 15069, 4292, 1012, 102, 101, 2156, 22524, 1038, 2005, 2019, 7526, 1997, 1996, 17377, 1011, 10151, 3877, 3785, 1012, 102, 101, 1999, 1037, 2897, 1997, 1064, 1050, 1064, 2004, 2229, 1998, 1064, 1048, 1064, 6971, 1010, 2065, 1996, 17377, 1011, 10151, 3877, 19587, 4650, 1998, 9167, 4650, 2907, 1010, 2059, 19143, 1997, 2279, 1011, 6154, 16972, 2007, 24978, 1011, 1038, 21600, 2000, 1037, 6540, 2110, 7336, 1037, 2561, 2193, 1997, 2012, 2087, 1528, 1051, 102, 101, 2057, 2085, 2556, 2093, 12637, 1997, 2279, 1011, 6154, 16972, 2058, 4130, 1011, 2241, 16972, 2007, 1038, 21600, 1010, 2029, 17552, 2070, 4795, 4491, 2114, 1038, 21600, 20694, 2030, 2625, 17631, 1024, 1006, 1015, 1007, 6022, 4359, 2886, 3302, 1025, 1006, 1016, 1007, 5301, 24501, 18622, 10127, 2000, 9563, 10697, 1025, 1998, 1006, 1017, 102, 101, 2057, 2059, 4863, 2129, 3176, 3036, 10595, 2064, 2022, 2109, 2000, 5851, 1996, 16972, 2291, 2013, 1996, 3588, 3596, 1997, 4491, 1012, 102, 101, 2070, 1997, 1996, 2087, 4795, 4491, 2006, 1038, 21600, 2024, 2241, 2006, 1000, 4688, 1000, 2055, 1996, 3091, 1997, 2019, 2004, 1005, 2015, 4130, 1012, 102, 101, 5262, 1010, 2019, 2004, 2064, 9958, 2172, 4026, 2011, 13856, 1037, 7820, 2799, 2084, 2008, 2009, 2428, 2038, 1031, 2459, 1033, 1010, 2947, 12106, 2061, 2170, 2304, 11484, 2030, 17385, 4491, 2005, 17214, 4842, 2075, 1010, 7510, 23730, 1010, 19413, 6961, 25711, 4691, 1010, 4385, 29625, 20824, 2279, 1011, 6154, 16972, 1010, 2004, 2229, 2079, 2025, 5136, 1996, 2004, 102, 101, 1011, 1998, 2061, 2019, 2004, 2053, 2936, 6666, 2013, 2107, 4491, 1012, 102, 101, 2947, 1010, 2279, 1011, 6154, 16972, 6022, 13416, 1038, 21600, 1005, 2015, 2886, 3302, 1012, 102, 101, 1999, 2755, 1010, 1996, 2069, 4621, 2004, 1011, 4130, 1011, 2241, 4491, 2006, 2279, 1011, 6154, 16972, 2024, 4491, 2008, 9495, 1038, 21600, 1005, 2015, 7077, 10788, 7337, 1006, 2008, 2024, 4415, 2036, 4621, 2114, 4130, 15058, 2094, 16972, 2007, 1038, 21600, 1007, 1012, 102, 101, 2057, 5136, 1037, 5081, 2944, 2008, 19566, 2070, 2691, 9563, 10697, 1012, 102, 101, 2651, 1005, 2015, 2004, 6125, 4050, 15821, 3293, 2799, 2869, 1010, 1998, 2061, 2009, 2003, 9608, 2000, 5136, 9563, 10697, 2008, 2599, 2004, 2229, 1006, 2799, 2869, 1007, 2000, 4635, 1998, 9167, 5847, 1999, 4895, 18447, 21945, 1998, 6151, 2229, 7895, 3468, 3971, 1006, 2004, 4941, 2000, 2770, 2047, 2799, 2099, 4007, 1007, 1012, 102, 101, 1999, 2256, 5081, 2944, 1010, 1996, 1000, 27248, 1000, 2064, 5454, 1037, 2309, 2004, 1037, 1998, 2059, 2689, 2008, 2004, 1005, 2015, 16972, 3343, 1010, 2008, 2003, 1010, 1037, 1005, 2015, 5464, 1997, 5847, 1998, 2799, 9167, 3513, 1012, 102, 101, 2057, 17607, 2053, 9259, 2006, 2129, 1996, 27248, 3431, 1037, 1005, 2015, 16972, 3343, 29625, 8545, 21573, 2256, 3086, 2000, 1996, 2206, 3722, 3160, 1024, 1000, 2043, 2064, 1996, 27248, 11027, 2035, 6540, 2163, 2013, 1996, 2897, 1029, 1000, 102, 101, 1006, 2156, 22524, 1037, 2005, 1037, 2944, 1997, 1038, 21600, 10949, 1998, 1037, 6210, 1997, 6540, 2163, 1012, 1007, 102, 101, 2008, 2003, 1010, 2057, 4299, 2000, 3305, 2043, 1996, 27248, 2064, 2191, 1996, 2897, 26096, 14480, 2011, 5278, 1996, 16972, 3343, 1997, 1037, 2309, 2004, 1012, 102, 101, 2096, 1996, 4598, 1997, 1037, 6540, 2110, 2515, 2025, 11302, 8778, 19143, 2000, 1037, 6540, 2110, 1010, 4824, 2043, 1037, 6540, 2110, 2130, 6526, 1999, 1996, 2897, 2003, 2019, 2590, 2034, 3357, 2006, 1996, 4130, 2000, 4824, 16744, 10949, 1999, 1996, 3739, 1997, 18162, 5248, 1012, 102, 101, 2057, 2556, 1996, 2206, 9872, 29625, 10760, 5686, 2213, 1019, 29625, 2487, 1012, 102, 101, 2065, 2035, 2004, 2229, 1999, 1037, 2897, 15470, 1996, 2279, 18471, 16972, 3513, 2059, 1037, 6540, 2110, 2003, 12361, 2000, 4839, 1999, 2296, 16972, 2291, 2008, 2064, 2022, 4663, 2013, 5278, 1996, 16972, 3343, 1997, 1037, 2309, 2004, 1012, 102, 101, 1038, 21600, 2003, 2025, 20438, 11892, 1010, 1999, 1996, 3168, 2008, 2004, 2229, 2453, 2031, 20438, 2025, 2000, 5589, 9826, 1999, 1996, 16972, 8778, 1031, 2321, 29623, 16048, 29623, 23499, 1033, 1012, 102, 101, 1999, 5688, 1010, 1031, 2321, 1033, 3065, 2008, 2279, 1011, 6154, 16972, 2003, 20438, 1011, 11892, 1012, 102, 101, 4919, 1010, 1999, 1996, 17377, 1011, 10151, 3877, 7705, 1006, 2156, 22524, 1038, 1007, 1010, 2019, 2004, 2064, 2025, 2131, 1037, 1000, 2488, 1000, 2279, 1011, 6154, 4372, 2799, 1037, 7688, 2011, 1000, 14386, 5844, 1000, 2013, 1038, 21600, 1006, 1041, 29625, 2290, 29625, 1010, 13856, 22132, 2271, 5847, 1010, 7316, 20316, 2592, 2000, 8581, 2004, 2229, 1010, 102, 101, 1031, 2340, 29623, 16068, 1033, 2065, 1996, 17377, 1011, 10151, 3877, 3785, 2907, 1010, 2059, 2279, 1011, 6154, 16972, 2003, 20438, 11892, 29625, 3406, 19141, 9872, 1019, 29625, 2475, 2057, 7065, 17417, 2102, 1996, 2742, 1999, 3275, 1015, 1012, 102, 101, 11949, 2008, 1999, 1996, 4310, 6540, 16972, 2110, 2004, 2229, 1037, 1010, 1038, 1010, 1998, 1039, 4604, 4026, 2247, 1996, 5847, 4748, 1010, 1038, 2094, 1010, 1998, 17324, 2094, 1010, 4414, 1012, 102, 101, 6516, 1010, 1038, 21600, 2003, 12361, 2000, 28314, 2000, 1037, 16972, 2110, 2073, 2169, 2004, 23303, 4026, 3081, 2049, 2087, 6871, 22945, 2279, 1011, 6154, 2004, 1012, 102, 101, 1006, 11949, 2008, 1010, 2096, 1038, 2052, 9544, 2478, 1039, 2004, 1037, 2279, 1011, 6154, 1010, 2053, 2799, 2013, 1039, 2000, 1040, 2008, 2515, 2025, 20811, 1038, 6526, 1010, 1998, 6516, 1038, 2064, 2025, 3246, 2000, 4604, 4026, 2083, 1039, 29625, 1007, 1031, 2321, 1033, 3065, 2008, 2023, 2003, 2995, 2005, 102, 101, 2651, 1010, 2019, 2004, 2064, 2224, 1038, 21600, 6043, 2000, 4468, 10425, 2008, 3604, 2083, 6151, 2229, 7895, 3468, 2004, 2229, 1012, 102, 101, 2005, 2742, 1010, 1996, 1057, 29625, 2015, 29625, 2231, 2089, 2215, 2000, 4468, 9855, 2037, 4026, 2083, 2060, 3032, 1012, 102, 101, 6660, 1010, 2019, 2004, 2089, 4299, 2000, 4468, 2004, 2229, 2124, 2000, 4685, 15657, 1010, 6204, 7318, 2696, 14853, 1010, 2030, 3749, 3532, 2836, 1012, 102, 101, 2023, 2003, 4719, 2011, 11243, 3180, 11423, 2000, 1996, 2004, 1011, 4130, 2000, 23911, 2896, 12157, 2000, 5847, 2008, 5383, 1996, 6151, 2229, 7895, 3468, 2004, 2229, 1010, 2030, 22910, 2122, 5847, 4498, 1012, 102, 101, 2104, 2279, 18471, 16972, 1010, 2019, 2004, 2064, 2053, 2936, 20648, 1038, 21600, 16972, 6043, 2008, 4468, 6556, 6151, 2229, 7895, 3468, 2004, 2229, 2030, 3032, 14259, 2107, 1000, 2004, 1011, 9992, 6043, 1000, 5263, 29625, 19927, 2279, 1011, 6154, 16972, 17552, 2015, 1000, 2004, 1011, 9992, 6043, 1000, 5263, 1010, 2057, 2391, 2041, 2008, 2122, 7957, 1997, 6043, 102, 101, 2057, 2903, 2008, 18345, 2006, 1038, 21600, 2005, 2951, 1011, 4946, 3036, 2003, 28616, 28582, 2094, 1012, 102, 101, 2009, 2003, 10785, 2043, 3314, 2066, 18777, 3012, 1998, 11109, 2024, 2920, 2008, 1996, 3043, 2323, 2025, 2022, 2187, 2000, 3382, 1010, 2030, 28616, 22829, 3404, 1012, 102, 101, 2612, 1010, 2057, 7475, 2008, 2122, 21586, 2323, 2022, 8916, 1999, 2060, 1006, 2203, 3406, 1011, 2203, 1007, 3971, 1010, 2107, 2004, 21999, 1998, 27280, 1010, 1041, 29625, 2290, 29625, 1010, 2478, 1996, 10595, 1999, 1031, 2260, 1033, 1012, 102, 101, 2057, 2031, 3491, 2008, 2279, 1011, 6154, 16972, 17552, 2015, 2070, 4795, 4491, 2114, 1038, 21600, 1006, 2471, 2035, 2004, 1011, 4130, 15058, 2094, 4491, 1010, 1041, 29625, 2290, 29625, 1010, 4130, 1011, 2460, 7406, 4491, 1007, 20694, 1010, 2096, 2437, 2060, 4491, 2625, 17631, 1010, 2030, 2512, 29624, 10609, 12879, 24108, 2140, 2005, 1996, 17346, 1012, 102, 101, 2057, 2031, 2036, 3491, 2129, 2203, 1011, 2000, 1011, 2203, 10595, 1010, 2029, 2064, 2022, 4297, 28578, 21050, 2135, 7333, 1010, 2064, 2022, 2109, 2000, 5335, 2951, 1011, 4946, 3036, 1012, 102, 101, 11566, 2122, 5761, 2097, 3443, 1037, 16972, 2291, 2008, 2003, 6022, 2062, 5851, 2084, 2651, 1005, 2015, 1038, 21600, 1012, 102, 101, 2174, 1010, 2279, 18471, 16972, 2894, 2515, 2025, 3073, 2440, 3860, 2114, 2035, 4491, 1012, 102, 101, 4919, 1010, 2279, 1011, 6154, 16972, 2003, 2145, 8211, 2000, 1000, 17576, 7632, 17364, 2075, 1000, 4491, 1010, 2073, 1996, 17346, 17472, 2019, 12997, 17576, 2029, 2009, 2515, 2025, 2219, 1010, 2004, 2092, 2004, 2000, 4491, 2008, 9495, 1038, 21600, 1005, 2015, 7077, 1011, 10788, 7337, 29625, 7840, 1996, 2627, 5476, 1996, 4781, 1998, 2470, 4279, 102, 101, 2057, 2024, 2633, 24740, 1996, 3988, 10813, 1997, 1996, 7692, 2270, 3145, 6502, 1006, 1054, 2361, 3211, 1007, 1011, 1037, 19888, 13705, 7117, 1011, 1997, 1011, 3404, 2005, 4274, 16972, 2008, 23949, 2135, 7341, 2004, 2229, 2000, 2037, 12997, 17576, 2229, 1998, 2270, 6309, 1012, 102, 101, 1054, 2361, 3211, 2097, 9585, 2019, 2004, 2000, 14469, 3686, 2008, 1996, 4761, 1997, 1037, 2799, 8874, 5262, 8617, 1996, 2623, 17576, 1011, 1037, 3200, 2170, 1000, 4761, 27280, 1000, 1012, 102, 101, 1999, 2804, 1010, 2045, 2003, 2172, 5981, 2055, 1996, 10813, 1997, 10595, 2005, 2004, 1011, 2504, 4130, 27354, 1006, 1041, 29625, 2290, 29625, 1010, 1055, 1011, 1038, 21600, 1010, 17540, 21600, 1010, 1038, 21600, 3366, 2278, 1007, 1010, 2029, 2097, 9585, 2019, 2004, 2000, 20410, 2008, 2019, 2623, 2799, 2941, 6526, 1006, 1998, 2001, 2623, 2000, 1996, 14073, 102, 101, 2651, 1005, 2015, 2799, 2869, 9544, 7820, 2004, 1011, 10425, 2004, 2019, 14958, 2126, 2000, 5335, 2203, 1011, 2000, 1011, 2203, 2836, 1998, 4468, 17739, 10200, 5847, 1012, 102, 101, 1999, 2023, 2930, 1010, 2057, 6848, 2129, 2897, 9224, 2064, 2062, 8100, 6162, 2037, 4026, 1011, 2968, 3289, 2302, 18345, 2006, 1996, 2004, 1011, 4130, 1012, 102, 101, 2034, 1010, 2057, 6848, 2129, 2000, 4635, 2279, 1011, 6154, 2004, 2229, 2241, 2006, 11702, 1997, 2203, 1011, 2000, 1011, 2203, 4130, 2836, 1012, 102, 101, 2059, 1010, 2057, 6848, 2129, 9224, 2064, 5703, 7170, 2011, 5464, 2279, 1011, 6154, 2004, 2229, 2006, 1037, 2566, 1011, 17576, 3978, 1998, 6415, 4726, 10200, 10425, 2007, 1037, 1038, 21600, 2451, 17961, 1012, 102, 101, 2279, 1011, 6154, 16972, 2064, 2599, 2000, 2936, 10425, 2084, 7511, 1038, 21600, 1012, 102, 101, 2000, 3305, 1996, 4254, 2006, 2004, 1011, 4130, 3091, 1010, 2057, 17908, 1996, 5966, 1999, 4130, 10742, 2005, 2367, 2004, 2229, 2408, 1037, 2846, 1997, 1000, 1056, 1011, 2039, 1010, 1000, 1000, 1056, 1011, 2146, 1010, 1000, 1998, 1000, 1056, 1011, 2460, 1000, 2824, 1012, 102, 101, 2256, 7885, 2265, 2008, 2087, 2004, 2229, 1006, 6273, 29625, 2581, 1003, 1011, 6486, 29625, 2683, 1003, 1010, 5834, 2006, 1996, 2724, 1007, 2031, 1996, 2168, 2004, 1011, 4130, 3091, 2104, 1038, 21600, 1998, 2279, 1011, 6154, 16972, 1010, 1998, 2087, 2060, 2004, 2229, 3325, 2074, 2028, 4469, 6154, 1012, 102, 101, 2145, 1010, 1037, 2512, 29624, 18886, 18660, 12884, 1997, 2004, 2229, 2156, 2130, 2936, 10425, 1012, 102, 101, 2096, 2122, 10425, 2089, 4685, 16286, 2092, 1010, 2070, 2004, 2229, 2089, 5262, 3325, 4788, 2836, 1012, 102, 101, 2004, 1037, 2765, 1010, 2057, 2903, 2008, 1037, 10763, 2279, 1011, 6154, 5464, 2323, 2025, 2022, 1996, 2069, 5387, 1999, 16972, 6567, 29625, 5856, 8159, 2004, 1011, 4130, 3091, 2069, 11853, 2522, 14343, 26786, 2007, 4130, 2836, 1010, 2057, 7475, 2008, 2799, 2869, 2323, 2191, 6567, 2241, 2006, 11702, 1997, 4130, 3737, 1012, 102, 101, 2799, 2869, 2071, 14171, 1006, 1045, 1007, 1996, 5464, 1997, 1996, 2279, 1011, 6154, 2004, 2229, 1998, 1006, 2462, 1007, 1996, 14541, 1997, 4026, 2058, 3674, 2279, 1011, 6154, 2004, 2229, 2007, 1996, 2168, 4635, 1010, 2241, 2006, 1996, 2836, 12046, 2015, 1006, 1041, 29625, 2290, 29625, 1010, 2083, 18780, 1010, 2397, 9407, 1010, 2030, 3279, 1007, 1997, 3037, 102, 101, 2367, 7957, 1997, 2004, 2229, 2089, 7276, 2367, 5461, 2005, 12256, 2072, 1011, 23413, 3070, 4130, 2836, 1010, 2107, 2004, 1024, 4800, 23393, 2098, 24646, 2497, 2004, 2229, 1024, 1996, 2116, 4800, 29624, 23393, 2098, 24646, 2497, 2004, 2229, 2064, 6611, 4493, 10903, 5461, 2005, 9414, 2799, 2491, 3569, 1999, 3293, 2799, 2869, 1006, 1041, 29625, 2290, 29625, 1010, 1031, 2871, 1033, 1007, 1012, 102, 101, 2461, 1011, 4440, 2836, 11702, 2024, 4659, 3733, 2000, 8145, 1010, 2144, 1996, 24646, 2497, 2004, 5927, 4026, 1999, 2119, 1996, 2830, 1998, 7901, 7826, 29625, 2239, 4179, 2326, 10802, 1024, 3784, 2326, 11670, 1010, 2107, 2004, 8224, 1998, 7513, 1010, 2064, 4089, 8080, 2203, 3406, 1011, 2203, 2836, 2005, 2037, 7846, 1006, 1041, 29625, 2290, 29625, 1010, 102, 101, 6671, 11670, 1024, 2836, 8822, 2003, 2062, 3697, 2005, 6671, 11670, 1010, 2144, 2087, 4026, 2515, 2025, 2707, 2030, 2203, 1999, 2037, 6125, 1010, 1998, 2004, 24335, 12589, 16972, 2089, 3426, 2068, 2000, 2156, 2028, 3257, 1997, 4026, 2021, 2025, 1996, 2060, 1012, 102, 101, 2145, 1010, 13135, 4834, 11702, 2064, 2022, 2109, 2000, 1999, 7512, 2836, 1031, 4413, 1033, 1012, 102, 101, 6671, 11670, 2064, 2036, 5468, 2836, 3495, 2011, 2478, 23325, 1011, 2241, 16227, 1031, 4724, 1033, 2000, 7099, 2119, 7826, 1997, 1996, 4026, 1011, 2005, 1996, 16745, 1997, 6223, 2008, 20811, 1996, 2004, 1999, 2119, 7826, 1012, 102, 101, 2023, 6028, 2036, 21312, 2008, 2004, 5761, 2074, 1996, 13248, 4664, 1997, 1996, 4130, 2000, 1996, 7688, 1010, 2738, 1996, 2112, 2090, 1996, 3120, 1998, 1996, 2003, 2361, 29625, 2378, 2035, 2093, 3572, 1010, 2004, 2229, 2064, 5468, 1996, 2836, 1997, 3674, 10425, 2011, 2478, 1000, 2799, 13341, 1000, 1031, 4008, 1033, 2000, 3622, 102, 101, 1999, 2804, 1010, 2004, 2229, 2064, 2224, 3161, 28664, 2000, 8080, 6585, 10425, 1010, 2738, 2084, 9855, 1000, 2613, 1000, 8013, 4026, 2058, 2122, 10425, 29625, 15058, 2094, 2006, 1996, 2836, 11702, 1010, 2019, 2004, 2064, 15581, 2129, 2009, 23303, 4026, 2058, 3674, 2279, 1011, 6154, 2015, 1012, 102, 101, 12697, 1998, 20253, 4621, 19293, 7170, 1011, 20120, 5461, 2003, 1037, 4138, 2470, 8476, 1999, 2009, 2219, 2157, 1012, 102, 101, 3522, 2147, 6083, 2008, 2009, 2003, 5262, 2825, 2000, 2640, 6540, 1998, 8114, 21257, 2005, 25357, 1996, 4834, 1997, 4026, 2058, 3674, 10425, 1031, 3429, 1033, 1031, 4805, 1033, 1031, 4700, 1033, 1031, 4466, 1033, 1012, 102, 101, 2057, 2933, 2000, 2817, 2023, 3277, 1999, 3618, 5995, 2004, 2112, 1997, 2925, 2147, 1012, 102, 101, 1999, 2804, 2000, 17739, 10425, 2007, 2204, 2836, 1010, 9224, 11160, 2006, 6970, 9527, 8113, 4130, 4989, 2000, 5703, 7170, 2006, 2037, 2897, 6971, 1012, 102, 101, 9224, 4685, 4026, 3330, 2011, 9854, 4026, 6702, 1998, 17739, 10425, 2008, 23569, 27605, 4371, 1996, 4834, 1997, 4026, 2058, 2367, 6971, 1012, 102, 101, 2651, 1010, 2070, 9224, 2224, 1996, 2004, 1011, 4130, 2000, 4681, 1999, 4026, 3330, 1012, 102, 101, 2057, 2903, 2060, 8107, 1006, 2008, 2079, 2025, 11160, 2006, 1996, 2004, 1011, 4130, 1007, 2024, 2062, 6413, 1024, 2041, 15494, 4026, 3330, 1024, 9224, 5703, 7170, 2006, 3341, 6971, 2000, 2060, 2004, 2229, 2011, 19158, 1996, 6043, 2008, 23911, 1000, 2334, 12157, 1000, 2000, 1038, 21600, 5847, 1012, 102, 101, 2023, 2003, 2145, 2825, 2104, 2279, 1011, 6154, 16972, 1010, 2007, 1996, 16840, 2008, 1996, 18394, 12530, 2069, 1996, 6234, 11429, 2738, 2084, 4745, 6154, 2015, 1999, 1996, 2004, 1011, 4130, 1012, 102, 101, 2004, 2107, 1010, 2897, 9224, 2064, 2025, 2224, 1000, 3180, 11423, 1000, 2006, 1996, 2004, 1011, 4130, 2000, 1006, 2360, 1007, 3622, 2070, 4026, 2083, 2019, 6585, 1041, 17603, 4757, 2391, 2241, 2006, 3251, 1996, 2117, 2004, 1999, 1996, 4130, 2003, 2130, 2030, 5976, 1031, 4749, 1033, 1012, 102, 101, 6043, 2241, 2006, 3180, 11423, 2024, 15835, 3243, 22902, 1010, 1998, 2089, 2025, 2022, 4235, 2109, 1999, 3218, 1012, 102, 101, 2612, 1010, 2897, 9224, 2071, 7276, 2367, 2279, 1011, 6154, 10385, 2005, 2367, 1006, 2967, 1997, 1007, 7688, 17576, 2229, 2004, 1037, 2126, 2000, 3622, 2070, 4026, 2058, 2060, 10425, 29625, 2378, 15494, 4026, 3330, 1024, 9756, 1996, 4834, 1997, 14932, 4026, 2003, 12536, 2135, 3697, 1010, 2144, 4274, 16972, 2003, 7688, 1011, 2241, 1012, 102, 101, 2651, 1010, 2070, 2004, 2229, 2224, 1000, 2004, 17463, 18537, 1000, 1011, 7976, 2135, 5815, 4469, 6154, 2015, 2000, 2191, 1996, 2004, 1011, 4130, 2298, 2936, 1011, 2000, 2191, 5847, 2083, 2068, 2298, 2625, 16166, 2000, 2500, 1012, 102, 101, 2023, 2003, 2411, 2109, 2004, 1037, 1006, 5399, 22902, 1007, 2126, 2000, 3696, 8757, 1037, 1000, 10200, 1000, 2799, 1012, 102, 101, 11949, 2008, 2279, 1011, 6154, 16972, 1010, 2011, 9268, 2004, 1011, 4130, 3091, 2013, 1996, 3247, 2832, 1010, 3084, 2004, 17463, 18537, 20694, 1012, 102, 101, 2612, 1010, 2897, 9224, 2071, 2224, 1038, 21600, 4279, 2000, 4742, 10200, 5847, 2000, 8581, 2004, 2229, 1031, 2753, 1033, 1025, 2065, 2122, 2004, 2229, 9167, 1996, 1000, 4742, 1000, 2000, 2037, 10638, 1010, 2060, 2004, 2229, 2064, 2036, 2507, 2896, 5464, 2000, 10200, 10425, 1012, 102, 101, 3383, 2062, 14780, 1010, 4130, 1011, 3737, 8822, 4473, 2004, 2229, 2000, 2191, 6567, 2241, 2006, 2836, 1010, 2877, 8100, 2000, 16972, 6567, 2008, 4468, 6885, 11664, 7170, 2006, 2896, 1011, 20235, 10200, 6971, 1012, 102, 101, 2145, 1010, 2074, 2004, 2007, 2651, 1005, 2015, 1038, 21600, 1010, 1999, 15494, 4026, 3330, 3464, 5399, 1997, 1037, 1000, 2304, 2396, 1012, 1000, 102, 101, 1999, 2804, 1010, 4026, 3330, 6551, 6666, 2013, 4800, 15069, 16972, 1011, 2242, 2279, 1011, 6154, 16972, 6753, 2172, 2062, 8100, 2084, 7511, 1038, 21600, 1010, 2004, 6936, 3041, 1999, 2930, 1018, 1012, 102, 101, 2019, 2004, 2064, 4089, 3975, 4026, 2058, 3674, 2279, 1011, 6154, 2015, 2877, 2000, 1996, 2168, 7688, 1025, 19158, 1996, 12884, 1997, 4026, 4137, 2000, 2169, 2279, 18471, 2003, 1037, 2172, 26954, 1011, 8982, 3921, 2000, 4026, 3330, 2084, 17739, 1037, 2309, 4130, 2005, 2169, 7688, 17576, 1012, 102, 101, 6970, 9527, 8113, 16972, 2038, 2042, 2019, 3161, 2470, 2181, 1010, 2412, 2144, 2220, 2147, 4453, 16337, 2100, 3471, 2007, 1038, 21600, 1031, 4090, 29623, 22203, 29623, 25746, 1033, 1012, 102, 101, 2144, 2059, 1010, 2116, 4981, 2031, 7356, 1038, 21600, 1005, 2015, 5248, 1006, 2119, 22634, 1031, 2321, 29623, 17788, 29623, 23499, 1033, 1010, 1998, 3081, 10903, 1031, 1015, 29623, 16147, 1033, 1007, 1010, 1998, 2881, 5461, 2005, 6605, 1038, 21600, 1006, 2000, 11487, 9563, 12051, 1031, 2322, 1033, 1998, 8285, 8585, 4026, 3330, 1031, 4749, 1033, 1007, 1012, 102, 101, 2060, 2470, 2038, 3818, 14305, 2000, 1038, 21600, 1006, 3391, 2000, 5335, 3036, 1031, 1019, 29623, 2575, 1033, 1998, 19143, 1031, 1017, 29623, 2549, 1033, 1010, 2030, 2490, 4800, 15069, 16972, 1031, 1017, 29623, 2683, 29623, 12521, 1010, 1031, 3486, 1033, 1031, 4029, 1033, 1031, 4261, 1033, 1007, 1010, 2030, 2881, 2047, 6970, 9527, 8113, 16972, 4294, 2015, 1031, 1021, 1033, 1031, 1022, 102, 101, 2057, 2079, 2025, 3535, 2000, 3073, 1037, 7721, 19184, 29625, 8162, 2147, 2003, 4427, 2011, 3522, 9373, 2147, 1031, 2340, 29623, 16068, 29623, 16048, 1033, 2006, 1038, 21600, 3343, 9259, 2008, 2599, 2000, 16166, 3795, 5144, 1012, 102, 101, 2057, 8849, 3251, 2057, 2064, 2191, 4507, 2298, 2062, 2066, 2216, 4275, 29625, 15222, 2015, 2147, 3397, 5857, 2008, 2106, 2025, 3711, 1999, 1037, 8824, 2544, 1997, 2023, 3259, 1031, 5187, 1033, 1012, 102, 101, 4919, 1010, 1996, 2783, 3259, 3084, 1996, 2206, 2047, 9530, 18886, 8569, 1011, 14841, 5644, 1024, 4866, 6388, 4106, 1997, 2279, 1011, 6154, 16972, 1010, 1996, 9373, 2944, 1998, 2765, 2005, 9563, 10697, 1010, 1996, 9373, 4106, 1997, 11429, 1011, 3563, 2279, 18471, 16972, 1010, 1998, 6594, 1997, 2195, 2590, 7832, 1006, 1041, 29625, 2290, 29625, 1010, 102, 101, 1038, 21600, 17567, 2013, 2116, 3809, 3471, 1012, 102, 101, 2057, 5275, 2008, 21934, 28250, 2075, 1038, 21600, 2003, 2019, 8702, 4522, 2000, 8402, 2030, 6419, 1038, 21600, 1012, 102, 101, 2057, 3818, 2279, 1011, 6154, 16972, 1011, 2093, 3722, 14679, 2006, 2129, 5847, 2024, 3479, 1998, 15612, 1010, 4117, 2007, 6327, 10595, 2005, 2951, 1011, 4946, 8822, 1998, 3036, 1012, 102, 101, 2279, 18471, 16972, 4473, 2004, 2229, 7182, 22570, 2791, 2000, 5382, 2037, 2449, 1998, 3330, 11100, 1010, 2096, 3903, 2618, 14853, 2070, 1997, 1038, 21600, 1005, 2015, 2350, 3471, 1006, 1041, 29625, 2290, 29625, 1010, 4030, 19143, 1010, 2312, 2886, 3302, 1010, 21134, 2000, 1000, 4682, 1000, 1010, 7669, 1999, 4637, 4800, 15069, 16972, 1010, 1998, 2062, 1007, 1012, 102, 101, 2256, 2147, 3727, 2195, 5875, 7826, 2005, 2925, 2470, 1012, 102, 101, 2057, 2933, 2000, 8849, 2129, 2000, 6366, 1996, 2004, 1011, 4130, 17961, 4498, 1010, 2008, 2003, 1010, 2129, 2025, 2000, 11160, 2006, 1996, 2004, 1011, 4130, 2130, 2005, 7077, 10788, 5682, 1006, 1041, 29625, 2290, 29625, 1010, 2011, 25952, 2830, 2075, 15932, 2083, 2951, 1011, 4946, 8822, 1007, 1012, 102, 101, 2057, 2036, 2933, 2000, 2582, 8556, 1996, 9211, 1998, 8122, 1997, 19293, 6970, 9527, 8113, 16972, 2241, 2006, 11702, 1997, 2951, 1011, 4946, 2836, 29625, 21572, 3406, 25778, 10949, 1012, 102, 101, 2104, 1038, 21600, 2012, 16972, 3392, 2000, 1996, 7688, 1040, 2003, 2328, 1010, 6154, 1011, 2011, 1011, 6154, 1010, 2004, 3716, 2055, 2129, 2000, 3362, 1040, 17678, 16098, 4570, 2083, 1996, 2897, 1012, 102, 101, 1996, 2832, 2003, 3988, 3550, 2043, 1040, 17472, 2993, 2000, 2049, 10638, 2011, 6016, 10651, 7696, 1012, 102, 101, 2013, 2023, 2617, 5743, 1010, 2296, 3161, 13045, 21009, 1037, 2799, 2000, 1040, 2011, 8385, 10549, 1996, 2190, 2799, 2008, 2003, 2623, 2000, 2009, 2011, 2049, 10638, 1006, 2429, 2000, 1026, 1045, 1007, 1998, 13856, 2023, 2799, 2000, 2049, 10638, 1006, 2429, 2000, 2049, 9167, 3343, 1007, 1012, 102, 101, 1996, 2897, 2003, 5071, 2000, 2022, 2004, 6038, 2818, 4948, 3560, 1025, 2004, 2229, 2064, 2552, 2012, 2367, 2335, 1998, 1038, 21600, 14409, 2064, 2022, 12098, 16313, 19848, 6588, 8394, 29625, 9153, 3468, 2163, 1012, 102, 101, 21858, 1010, 1037, 6540, 2110, 2003, 1037, 3795, 9563, 2008, 2320, 2584, 3464, 15704, 1012, 102, 101, 6246, 1010, 1037, 6540, 2110, 2003, 2019, 1050, 1011, 10722, 10814, 1997, 5847, 1999, 1043, 1010, 1054, 1015, 1010, 2133, 1010, 1054, 1050, 1010, 2107, 2008, 1024, 1006, 1015, 1007, 2065, 2005, 2048, 14164, 1045, 1027, 1046, 2009, 4324, 2008, 1046, 2003, 2006, 1054, 1045, 1010, 2059, 2009, 2442, 2907, 2008, 102, 101, 1006, 1016, 1007, 2065, 2045, 2003, 1037, 4957, 1006, 1045, 1010, 1046, 1007, 1596, 1048, 1010, 1998, 1054, 1045, 1027, 1006, 1045, 1010, 1046, 1007, 1054, 1046, 1010, 2059, 1006, 1045, 1010, 1046, 1007, 1054, 1046, 1026, 1045, 1054, 1045, 1012, 102, 101, 2009, 2003, 3733, 2000, 2265, 1031, 4090, 1033, 2008, 1037, 6540, 2110, 2003, 2467, 1999, 1996, 2433, 1997, 1037, 3392, 15685, 1999, 1040, 1012, 102, 101, 1999, 1996, 17377, 1011, 10151, 3877, 7705, 1010, 8581, 2004, 2229, 2031, 2028, 1997, 2048, 2449, 6550, 1024, 8013, 1011, 10802, 1998, 16740, 1012, 102, 101, 1031, 2423, 1033, 7534, 2093, 3785, 2008, 2024, 8100, 10572, 2011, 1996, 2449, 6550, 2090, 2004, 2229, 1998, 16481, 2008, 2122, 3785, 19515, 12361, 1038, 21600, 19143, 2000, 1037, 6540, 2110, 1012, 102, 101, 1996, 2093, 17377, 1011, 10151, 3877, 3785, 2024, 1996, 2206, 1024, 1528, 19587, 4650, 1024, 2045, 2323, 2022, 2053, 8013, 1011, 10802, 12709, 1999, 1996, 2004, 12571, 10667, 24342, 1012, 102, 101, 1528, 12157, 4650, 1024, 2019, 2004, 2323, 3188, 25090, 4371, 8013, 1011, 4342, 5847, 2058, 8152, 1011, 1998, 10802, 19738, 21119, 5847, 1012, 102, 101, 1528, 9167, 4650, 1024, 2019, 2004, 2323, 2025, 9167, 8152, 1011, 1013, 10802, 1011, 4342, 5847, 2000, 2060, 12746, 1998, 11670, 29625, 10760, 5686, 2213, 1038, 29625, 1015, 1012, 102, 101, 1031, 2423, 1033, 2065, 1996, 17377, 1011, 10151, 3877, 3785, 2907, 2005, 1037, 2897, 2059, 1038, 21600, 19143, 2000, 1037, 6540, 2110, 2003, 12361, 1012, 102, 101, 25430, 2063, 2224, 1996, 3115, 2944, 2005, 20253, 1038, 21600, 10949, 2404, 5743, 1999, 1031, 4090, 1033, 1012, 102, 101, 1996, 8068, 2003, 3615, 2000, 1031, 4090, 1033, 2005, 2582, 4751, 29625, 7159, 6198, 1998, 6043, 1012, 102, 101, 1996, 2897, 2003, 4225, 2011, 2019, 2004, 10629, 1043, 1027, 1006, 1050, 1010, 1048, 1007, 1010, 2073, 1050, 5836, 1996, 2275, 1997, 2004, 2229, 1010, 1998, 1048, 5836, 3558, 4807, 6971, 2090, 2004, 2229, 1012, 102, 101, 1050, 3774, 1997, 1050, 3120, 1011, 14164, 1063, 1015, 1010, 1012, 1012, 1012, 1010, 1050, 1065, 1998, 1037, 4310, 7688, 13045, 1040, 29625, 1052, 1045, 14796, 1996, 2275, 1997, 1000, 7936, 1000, 3722, 1006, 2512, 5666, 20464, 2594, 1007, 5847, 2013, 1045, 2000, 1040, 1999, 1043, 29625, 2169, 3120, 1011, 13045, 1045, 2038, 1037, 5464, 102, 101, 2057, 3499, 7208, 2090, 2048, 5847, 1999, 1052, 1045, 2069, 2065, 2027, 3745, 1996, 2168, 2279, 6154, 1012, 102, 101, 1996, 16972, 3343, 1997, 2169, 13045, 1045, 3774, 1997, 1608, 1045, 1998, 1997, 1045, 1005, 2015, 12324, 1998, 9167, 6043, 1012, 102, 101, 1017, 2057, 2224, 1996, 3115, 2944, 2005, 20253, 1038, 21600, 10949, 2404, 5743, 1999, 1031, 4090, 1033, 1012, 102, 101, 1996, 8068, 2003, 3615, 2000, 1031, 4090, 1033, 2005, 2582, 4751, 29625, 7159, 6198, 1998, 6043, 1012, 102, 101, 1996, 2897, 2003, 4225, 2011, 2019, 2004, 10629, 1043, 1027, 1006, 1050, 1010, 1048, 1007, 1010, 2073, 1050, 5836, 1996, 2275, 1997, 2004, 2229, 1010, 1998, 1048, 5836, 3558, 4807, 6971, 2090, 2004, 2229, 1012, 102, 101, 1050, 3774, 1997, 1050, 3120, 1011, 14164, 1063, 1015, 1010, 1012, 1012, 1012, 1010, 1050, 1065, 1998, 1037, 4310, 7688, 13045, 1040, 29625, 1052, 1045, 14796, 1996, 2275, 1997, 1000, 7936, 1000, 3722, 1006, 2512, 5666, 20464, 2594, 1007, 5847, 2013, 1045, 2000, 1040, 1999, 1043, 29625, 2169, 3120, 1011, 13045, 1045, 2038, 1037, 5464, 102, 101, 2057, 3499, 7208, 2090, 2048, 5847, 1999, 1052, 1045, 2069, 2065, 2027, 3745, 1996, 2168, 2279, 6154, 1012, 102, 101, 1996, 16972, 3343, 1997, 2169, 13045, 1045, 3774, 1997, 1608, 1045, 1998, 1997, 1045, 1005, 2015, 12324, 1998, 9167, 6043, 1012, 102], "tgt": [1, 5128, 1038, 21600, 2006, 1996, 2157, 4130, 1024, 1037, 2553, 2005, 2279, 1011, 6154, 16972, 2745, 8040, 3270, 8197, 2527, 4101, 2147, 2007, 8038, 4691, 15503, 1998, 7673, 10151, 3877, 1006, 9173, 2118, 1007, 2320, 2588, 1037, 2051, 4274, 6970, 29624, 7159, 6198, 16972, 1024, 2235, 2897, 2309, 3831, 9178, 24978, 2546, 7159, 20047, 1011, 4130, 16972, 3292, 1011, 9207, 16972, 2059, 2133, 1012, 3, 6970, 9527, 8113, 16972, 2058, 3486, 29623, 8889, 2692, 8392, 3001, 1006, 2004, 2229, 1007, 6970, 9527, 8113, 16972, 1027, 16972, 2090, 2004, 2229, 3675, 11909, 8778, 1006, 1038, 21600, 1007, 2012, 29617, 2102, 1053, 19650, 4012, 10526, 9043, 2651, 2015, 4130, 1011, 2241, 16972, 2007, 1038, 21600, 3375, 999, 3, 9563, 10697, 1010, 4007, 12883, 1010, 2919, 19143, 999, 3, 14516, 2799, 9808, 6895, 20382, 2015, 1010, 4030, 19143, 1010, 8211, 2000, 4491, 999, 3, 24391, 1010, 15318, 1011, 5533, 1010, 27118, 2094, 16874, 4765, 1010, 1998, 2062, 1010, 1998, 2062, 1010, 1998, 2062, 2919, 2836, 1010, 22902, 4026, 3330, 1010, 2129, 2064, 2057, 8081, 6970, 9527, 8113, 16972, 1029, 3, 2028, 3921, 1024, 5587, 10595, 2000, 2019, 2525, 3375, 8778, 2799, 20916, 10620, 2075, 1010, 1055, 1011, 1038, 21600, 1010, 2178, 3921, 1024, 25136, 6970, 9527, 8113, 16972, 2013, 11969, 1044, 14277, 1010, 9152, 2527, 1010, 4130, 7485, 16972, 1010, 10465, 16972, 1010, 2256, 3921, 1024, 21934, 28250, 1038, 21600, 999, 3, 4281, 1024, 2651, 2015, 4130, 15058, 2094, 16972, 2007, 1038, 21600, 2004, 2003, 16972, 3343, 1024, 5464, 1997, 3722, 5847, 2013, 1045, 2000, 2169, 7688, 1040, 9167, 3343, 1038, 21600, 2003, 1037, 4130, 1011, 9207, 8778, 4374, 2799, 14409, 2013, 10638, 5454, 2309, 2190, 2799, 1006, 5464, 1007, 4604, 2799, 14409, 2000, 10638, 1006, 9167, 3343, 1007, 4281, 1024, 2651, 2015, 4130, 15058, 2094, 16972, 2007, 1038, 21600, 2079, 23961, 9167, 14134, 2000, 1017, 1037, 6540, 2110, 2003, 2584, 2004, 1011, 4130, 1027, 1996, 2799, 1997, 2035, 4763, 2004, 1011, 4130, 1024, 2862, 1997, 2035, 2004, 2229, 2006, 4130, 2761, 3214, 2005, 7077, 1011, 10788, 1996, 2004, 1011, 4130, 2003, 2000, 7499, 999, 3, 7561, 1011, 13047, 1010, 4007, 12883, 2053, 1013, 4030, 19143, 2312, 2886, 3302, 2919, 26743, 8553, 1010, 22902, 4026, 3330, 1010, 2919, 2836, 1010, 2893, 2125, 1996, 2004, 1011, 4130, 2053, 2126, 2067, 2000, 20047, 1011, 4130, 16972, 2256, 6378, 1024, 2279, 1011, 6154, 16972, 2191, 16972, 6567, 2241, 9578, 2006, 1996, 2279, 6154, 2128, 23115, 3686, 1996, 2004, 1011, 4130, 2000, 2049, 2434, 2535, 4299, 2862, 7077, 4071, 3435, 19143, 3036, 20438, 21778, 2449, 6043, 2204, 2836, 4026, 3330, 26743, 8553, 17839, 22570, 2791, 5443, 29625, 11619, 11619, 22570, 2791, 2025, 22570, 2438, 12949, 22570, 5186, 22570, 3722, 2205, 3375, 20047, 1011, 4130, 16972, 2279, 1011, 6154, 16972, 1038, 21600, 2015, 4130, 1011, 2241, 16972, 2279, 1011, 6154, 16972, 3513, 999, 3, 3627, 1015, 1024, 2224, 2279, 1011, 6154, 10385, 2279, 1011, 6154, 16972, 3513, 999, 3, 3627, 1015, 1024, 2224, 2279, 1011, 6154, 10385, 3627, 1016, 1024, 3188, 25090, 4371, 2783, 2799, 2000, 18478, 4130, 8993, 1031, 18238, 1011, 11604, 1011, 24047, 1011, 8453, 10222, 5484, 1033, 1040, 5684, 1997, 2896, 2004, 2193, 2279, 1011, 6154, 16972, 3513, 999, 3, 3627, 1015, 1024, 2224, 2279, 1011, 6154, 10385, 3627, 1016, 1024, 3188, 25090, 4371, 2783, 2799, 3627, 1017, 1024, 10862, 9167, 2000, 4468, 12532, 10087, 11873, 13909, 14164, 1031, 24664, 6914, 14898, 1011, 5034, 8067, 14856, 24914, 1033, 2000, 1018, 2000, 1018, 2279, 1011, 6154, 16972, 3513, 999, 3, 3627, 1015, 1024, 2224, 2279, 1011, 6154, 10385, 3627, 1016, 1024, 3188, 25090, 4371, 2783, 2799, 3627, 1017, 1024, 10862, 9167, 13366, 2078, 1024, 13045, 1045, 10862, 14338, 1059, 29625, 2099, 29625, 2102, 29625, 11429, 1046, 2065, 2045, 2003, 2070, 2799, 1054, 1055, 29625, 2102, 29625, 2169, 2799, 1053, 2003, 9167, 3085, 2000, 1046, 2065, 2546, 1054, 1045, 1053, 29625, 13366, 2078, 1024, 13045, 1045, 10862, 14338, 2065, 2009, 10862, 14338, 2007, 4847, 2000, 2169, 8581, 13045, 1046, 29625, 2279, 1011, 6154, 16972, 3513, 999, 3, 3627, 1015, 1024, 2224, 2279, 1011, 6154, 10385, 3627, 1016, 1024, 3188, 25090, 4371, 2783, 2799, 3627, 1017, 1024, 10862, 9167, 1017, 10813, 11683, 9530, 8873, 27390, 2063, 2651, 2015, 2799, 2869, 3443, 2047, 2799, 2099, 9563, 8278, 3857, 2047, 2799, 2099, 4007, 4299, 2862, 24354, 4299, 2862, 24354, 7077, 4071, 3435, 19143, 1029, 3, 3036, 20438, 21778, 1031, 24664, 6914, 14898, 1011, 1055, 1011, 14115, 14856, 24914, 1033, 2449, 6043, 2204, 2836, 4026, 3330, 26743, 8553, 1029, 3, 17839, 4598, 1997, 6540, 2110, 4598, 1997, 6540, 2110, 2025, 12361, 2130, 2007, 2279, 1011, 6154, 10385, 1006, 3627, 1015, 1007, 1031, 10768, 13596, 3334, 1011, 8183, 18428, 1011, 21451, 23017, 2078, 1033, 16215, 2213, 1024, 2065, 1996, 2279, 1011, 6154, 16972, 3513, 2907, 1010, 2059, 1037, 6540, 2110, 6526, 1999, 1996, 2897, 1012, 3, 2054, 2055, 1006, 3435, 999, 1007, 3, 19143, 1029, 3, 1038, 21600, 9808, 6895, 20382, 2015, 1038, 21600, 2025, 12361, 2000, 28314, 2130, 2007, 2279, 1011, 6154, 16972, 999, 3, 1031, 9258, 1011, 11133, 1011, 19863, 14876, 3070, 1033, 1040, 1996, 3293, 4274, 2004, 2229, 3696, 2146, 1011, 2744, 8311, 1012, 3, 8581, 7689, 1997, 2004, 2229, 2031, 1024, 1037, 8013, 1011, 10802, 3276, 1037, 16740, 3276, 8152, 11670, 6304, 8152, 17377, 1011, 10151, 3877, 7705, 1017, 3722, 3785, 2008, 2024, 8100, 10572, 2011, 1996, 2004, 1011, 2449, 1011, 12571, 1012, 3, 19587, 4650, 1010, 12157, 4650, 1010, 9167, 4650, 2065, 1996, 17377, 1011, 10151, 3877, 3785, 2907, 1010, 2059, 1038, 21600, 2003, 12361, 2000, 28314, 2000, 1037, 6540, 2110, 1012, 3, 1031, 17377, 1011, 10151, 3877, 1033, 2021, 1010, 2023, 2453, 5478, 27258, 2135, 2386, 2100, 2830, 2075, 3431, 999, 3, 1031, 19740, 1011, 10151, 3877, 1033, 3435, 1038, 21600, 19143, 16215, 2213, 1024, 1999, 1996, 17377, 1011, 10151, 3877, 7705, 1010, 2279, 1011, 6154, 16972, 19143, 2000, 1037, 6540, 2110, 7336, 2012, 2087, 1051, 1006, 1048, 2475, 1007, 2830, 2075, 3431, 1006, 1048, 1027, 1001, 6971, 1007, 1012, 3, 2035, 2897, 2327, 20792, 2035, 10984, 2015, 1997, 2004, 13791, 2015, 1998, 10651, 4471, 25470, 2035, 3988, 16972, 2163, 2035, 3988, 9029, 13494, 2005, 16972, 3431, 1998, 2193, 1997, 1038, 21600, 14409, 24710, 1039, 1011, 1038, 21600, 25837, 1012, 3, 22330, 28659, 2004, 1011, 2504, 19587, 1010, 5553, 3083, 2230, 1006, 3943, 29623, 2683, 2581, 2575, 2004, 2229, 1010, 1066, 13509, 2512, 29624, 3367, 12083, 2015, 1007, 16744, 1024, 1038, 21600, 1010, 9544, 3522, 2799, 1006, 10975, 2099, 1007, 1010, 2279, 18471, 16972, 12046, 2015, 1024, 1001, 2830, 2075, 3431, 1010, 1001, 16972, 3431, 1010, 1001, 14409, 1010, 2004, 1011, 4130, 3091, 2824, 1024, 17576, 2039, 1010, 4957, 4945, 1010, 4957, 7233, 16134, 1024, 3156, 7885, 1010, 2184, 29623, 8889, 2692, 27274, 2685, 1006, 2035, 2512, 29624, 3367, 12083, 2015, 1010, 13509, 24646, 5910, 1007, 12504, 3463, 1006, 1001, 2830, 2075, 3431, 1007, 4555, 2193, 1997, 1038, 21600, 2830, 2075, 3431, 1028, 2322, 4555, 2193, 1997, 16972, 3431, 1999, 2279, 1011, 6154, 16972, 1027, 1017, 4555, 2193, 1997, 2830, 2075, 3431, 1999, 10975, 2099, 1027, 2184, 12504, 3463, 1006, 1001, 16972, 3431, 1007, 4555, 2193, 1997, 1038, 21600, 16972, 3431, 1028, 8148, 4555, 2193, 1997, 16972, 3431, 1999, 2279, 1011, 6154, 16972, 1026, 2322, 4555, 2193, 1997, 16972, 3431, 1999, 10975, 2099, 1028, 2871, 12504, 3463, 1006, 1001, 1038, 21600, 14409, 1010, 2512, 29624, 3367, 12083, 2004, 2229, 1007, 4555, 2193, 1997, 1038, 21600, 14409, 1028, 25961, 4555, 2193, 1997, 14409, 1999, 2279, 18471, 16972, 1026, 4555, 2193, 1997, 14409, 1999, 10975, 2099, 1028, 12504, 3463, 1006, 1001, 16972, 3431, 1010, 1996, 1014, 29625, 2487, 1003, 2597, 1007, 20438, 11892, 16972, 22354, 1040, 2169, 13045, 2003, 2893, 2049, 2190, 22945, 2279, 1011, 6154, 2279, 1011, 6154, 16972, 2003, 20438, 11892, 16215, 2213, 1031, 24664, 6914, 14898, 1011, 14115, 14856, 24914, 1011, 1055, 1033, 1024, 1999, 1996, 17377, 1011, 10151, 3877, 7705, 1010, 2279, 1011, 6154, 16972, 2003, 20438, 11892, 1012, 3, 1006, 2169, 13045, 2003, 12361, 2049, 2190, 22945, 2279, 1011, 6154, 1007, 4299, 2862, 24354, 7077, 4071, 3435, 19143, 3036, 1029, 3, 20438, 21778, 2449, 6043, 2204, 2836, 1029, 3, 4026, 3330, 1029, 3, 26743, 8553, 17839, 12546, 1997, 2279, 1011, 6154, 16972, 2004, 1011, 4130, 3091, 2004, 1011, 9992, 6043, 2004, 1011, 2171, 17463, 18537, 2004, 1011, 4130, 1011, 2241, 4026, 3330, 3036, 1010, 2836, 1010, 4026, 3330, 2145, 2330, 2470, 3980, 1012, 3, 8971, 3262, 2648, 1996, 16972, 8778, 1012, 3, 2057, 7475, 2008, 2279, 1011, 6154, 16972, 3084, 2477, 3262, 2488, 1012, 3, 2836, 5514, 1013, 2488, 19143, 2084, 1038, 21600, 1012, 3, 2172, 2062, 26743, 3468, 1012, 3, 2021, 11008, 24271, 3623, 1999, 4130, 10742, 1012, 3, 1038, 11853, 23900, 2007, 2836, 1006, 1001, 2799, 2869, 1010, 3558, 3292, 2083, 18780, 1007, 1012, 3, 2145, 1010, 3278, 3623, 4415, 6151, 2229, 7895, 3468, 999, 3, 12504, 3463, 1024, 2168, 4130, 3091, 2005, 5989, 1011, 5585, 1003, 1997, 2004, 2229, 1025, 2502, 3623, 2069, 2005, 1066, 1014, 29625, 2487, 1003, 1012, 3, 3036, 13416, 1038, 21600, 2015, 2886, 3302, 1006, 2004, 1011, 4130, 3091, 3248, 2053, 2535, 1999, 16972, 6567, 1007, 1012, 3, 2062, 24501, 18622, 4765, 2000, 15318, 1011, 5533, 4491, 1006, 20438, 11892, 1007, 1012, 3, 2062, 24501, 18622, 4765, 2000, 28616, 8663, 8873, 27390, 10708, 1006, 1999, 5082, 1007, 2021, 2004, 1011, 9992, 6043, 5263, 1012, 3, 2272, 2007, 2053, 21586, 1012, 3, 1041, 2475, 2063, 1029, 3, 4026, 3330, 2057, 6848, 2129, 4026, 3330, 2064, 2022, 2589, 2302, 18345, 2006, 1996, 2004, 1011, 4130, 1012, 3, 2478, 2367, 2279, 1011, 6154, 10385, 2005, 2367, 1006, 2967, 1997, 1007, 17576, 2229, 2478, 1996, 1038, 21600, 4279, 17961, 4800, 15069, 16972, 2836, 1010, 3036, 1998, 4026, 3330, 2064, 6551, 5770, 2013, 4800, 15069, 16972, 1012, 3, 3674, 2551, 10425, 6234, 3433, 2000, 15428, 7170, 20120, 2426, 3674, 2279, 1011, 6154, 2015, 2279, 1011, 6154, 16972, 24950, 1996, 8803, 2005, 2437, 2023, 1037, 4507, 1006, 2147, 1999, 5082, 1007, 1012, 3, 4800, 15069, 16972, 18077, 2075, 4130, 8906, 2000, 5382, 1996, 4632, 2219, 11100, 7661, 4697, 2799, 4989, 2005, 8581, 2004, 2229, 2021, 2133, 4800, 15069, 16972, 2003, 2025, 26743, 3468, 999, 3, 4487, 11393, 19269, 1998, 3573, 3674, 5847, 4800, 15069, 16972, 2003, 2025, 26743, 3468, 999, 3, 1040, 1052, 2487, 1052, 1016, 1053, 2487, 1053, 2475, 10047, 2478, 1052, 2487, 1998, 1052, 2475, 10047, 2478, 1053, 2487, 1998, 1053, 2475, 10047, 2478, 1052, 2487, 1010, 1052, 2475, 1010, 1053, 2487, 1998, 1053, 2475, 2013, 2004, 1011, 4130, 2000, 2004, 1011, 2275, 2279, 1011, 6154, 16972, 2003, 2062, 2572, 8189, 3468, 2000, 4800, 15069, 14164, 2079, 23961, 2729, 2055, 2972, 10425, 2060, 2084, 2005, 7077, 10788, 2079, 23961, 14970, 5847, 1010, 14970, 4520, 999, 3, 2275, 1027, 2586, 1997, 2004, 2229, 2006, 2035, 5847, 1038, 21600, 2799, 28041, 11429, 1011, 3563, 2279, 1011, 6154, 16972, 7661, 6026, 2799, 4989, 2005, 10638, 6515, 14354, 1031, 13970, 4095, 2386, 1011, 22827, 8566, 2721, 1011, 29354, 5638, 1011, 23848, 5620, 1033, 3171, 14354, 1031, 7418, 1011, 1055, 1011, 10151, 3877, 1033, 27723, 1062, 2278, 2475, 1039, 2509, 1040, 1029, 3, 1054, 2487, 1054, 2475, 1054, 2509, 5851, 999, 3, 2460, 999, 3, 10036, 999, 3, 11429, 1011, 3563, 2279, 1011, 6154, 16972, 11429, 1011, 3563, 1038, 21600, 1031, 7418, 1011, 5034, 10288, 3877, 1033, 10408, 3085, 2478, 4493, 5906, 3463, 2005, 19143, 1998, 20438, 21778, 7949, 2000, 4800, 15069, 999, 3, 15306, 1998, 2925, 2470, 1038, 21600, 2003, 2521, 2205, 8552, 999, 3, 2047, 3921, 1024, 21934, 28250, 1038, 21600, 2302, 4012, 25013, 3795, 1998, 2334, 3289, 999, 3, 7826, 2005, 2925, 2470, 1024, 2893, 9436, 1997, 1996, 2004, 1011, 4130, 1029, 3, 4007, 1013, 9563, 11619, 2062, 9373, 1998, 6388, 2147, 4067, 3360, 2319, 2243, 2017, 2], "src_sent_labels": [0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], "segs": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "clss": [0, 47, 96, 142, 198, 223, 252, 285, 312, 337, 353, 417, 428, 472, 508, 566, 585, 608, 636, 677, 732, 762, 799, 852, 910, 943, 972, 1021, 1043, 1099, 1114, 1153, 1181, 1207, 1249, 1279, 1343, 1369, 1387, 1424, 1442, 1463, 1475, 1533, 1552, 1572, 1603, 1629, 1644, 1668, 1723, 1743, 1801, 1834, 1881, 1900, 1919, 1945, 1964, 1992, 2005, 2036, 2077, 2120, 2156, 2177, 2200, 2242, 2266, 2310, 2370, 2399, 2436, 2467, 2530, 2559, 2617, 2672, 2700, 2757, 2791, 2812, 2837, 2886, 2915, 2959, 3007, 3035, 3046, 3090, 3104, 3137, 3197, 3238, 3267, 3295, 3312, 3355, 3377, 3398, 3422, 3467, 3490, 3517, 3536, 3569, 3596, 3633, 3648, 3699, 3727, 3780, 3826, 3856, 3902, 3940, 3970, 4014, 4038, 4067, 4110, 4132, 4189, 4204, 4237, 4272, 4290, 4318, 4355, 4386, 4427, 4487, 4518, 4537, 4549, 4605, 4646, 4680, 4740, 4795, 4837, 4863, 4910, 4943, 4968, 4997, 5014, 5052, 5086, 5140, 5174, 5232, 5248, 5271, 5311, 5355, 5394, 5453, 5504, 5528, 5555, 5610, 5629, 5652, 5668, 5723, 5779, 5803, 5830, 5891, 5905, 5922, 5968, 5982, 6038, 6079, 6120, 6141, 6169, 6217, 6232, 6273, 6307, 6326, 6386, 6427, 6461, 6490, 6543, 6567, 6589, 6616, 6652, 6713, 6732, 6761, 6802, 6861, 6894, 6916, 6933, 6991, 7038, 7071, 7131, 7161, 7189, 7215, 7251, 7267, 7314, 7366, 7384, 7403, 7458, 7519, 7585, 7645, 7690, 7708, 7747, 7803, 7853, 7874, 7912, 7929, 7956, 7981, 7998, 8049, 8083, 8133, 8154, 8211, 8251, 8273, 8299, 8347, 8384, 8410, 8445, 8495, 8527, 8587, 8652, 8691, 8726, 8785, 8795, 8816, 8848, 8909, 8921, 8972, 9004, 9039, 9058, 9108, 9145, 9162, 9215, 9258, 9284, 9310, 9344, 9376, 9401, 9432, 9459, 9479, 9498, 9535, 9592, 9612, 9635, 9655, 9674, 9711, 9768, 9788], "src_txt": ["today 's interdomain routing system does not perform well , because the bgp protocol converges slowly , selects paths without regard for performance , does not support multipath routing , and has numerous security vulnerabilities .", "rather than adding mechanisms to an already complex protocol , or redesigning interdomain routing from scratch , we propose making bgp simpler , and handling issues such as data - plane performance and security where they belong - outside the routing protocol .", "we propose a transition from today 's path - based routing ( where routing decisions depend on the entire as - path ) to next - hop routing - a solution that selects and exports routes based only on the neighboring domain .", "based on theoretical and experimental results , we show that next - hop routing leads to significantly better network performance than path - based routing , and is especially effective at preventing the most serious bgp convergence problems , alongside other advantages ( including being more amenable to multipath routing and a reduced attack surface ) .", "the border gateway protocol ( bgp ) stitches a single global internet together out of smaller networks with diverse policy objectives .", "bgp is plagued by poor network performance , as well as security vulnerabilities , configuration errors , software bugs , and more .", "bgp does not react to serious performance and reachability problems in the data plane , which are , in fact , often utterly invisible to the routing protocol .", "bgp route fluctuations can lead to high packet loss , intermittent loss of connectivity , and increased path latency [ 1 ] .", "remarkably , almost half of the performance problems with voip are the result of bgp route fluctuations [ 2 ] .", "the research and standards communities have proposed numerous ways to fix bgp .", "these proposals generally fall into two categories : ( 1 ) enhancements to bgp ( e.g. , to improve convergence [ 3,4 ] and security [ 5,6 ] ) ; and ( 2 ) alternative architectures that take a \" clean - slate approach \" to interdomain routing ( see [ 7 ] [ 8 ] [ 9 ] [ 10 ] ) .", "however , these proposals face serious practical obstacles .", "on the one hand , enhancements to bgp add mechanisms to an already complex protocol , which can introduce new problems ( e.g. , configuration errors , protocol convergence issues , and new attack vectors ) .", "on the other hand , alternative architectures are difficult , often even impossible , to deploy incrementally.we present a new way to fix interdomain routing .", "we introduce a novel routing architecture called \" nexthop routing \" , which is based on two guiding principles : ( 1 ) rather than extending or replacing bgp , simplifying the routing protocol by constraining how routes are selected and exported ; and ( 2 ) handling issues such as data - plane performance and security where they belongoutside the routing protocol .", "we argue that next - hop routing is sufficiently expressive to realize network operators ' goals .", "our analysis and simulations show that next - hop routing significantly improves performance , without compromising other global objectives .", "many of bgp 's performance problems relate to how ases base routing decisions on the sequence of ases along a path .", "to avoid the \" count - to - infinity \" problems that plagued earlier distance - vector protocols , bgp is a path - vector protocol that includes the as - path attribute in each route announcement .", "this allows an as to quickly detect and avoid paths that contain loops.however , the as - path is increasingly used for far more than loop detection and , in particular , network operators apply complex regular expressions to the as - path to express local preferences over routes .", "unfortunately , routing policies that consider the entire as - path can lead to long convergence time , and can even result in overall protocol divergence .", "operational experience and measurement studies indicate that bgp convergence is too slow for interactive applications , e.g. , voip , multi-player games , and financial transactions .", "techniques for reducing convergence delay introduce additional timers and configuration options to the router software , exacerbating an already complex system.we argue that such reliance on the as - path is more a hindrance than a help in achieving good network performance .", "instead , we advocate next - hop routing - that an as rank and export paths based solely on the nexthop as en route to each destination prefix , and apply today 's bgp provides network operators with very unsatisfactory means for handling data - plane performance issues and security threats , as reflected in poor network performance and in serious security breaches .", "we argue that such important objectives should be handled outside the routing protocol [ 12 ] , and propose specific solutions in two key areas : performance - driven routing .", "today 's bgp - speaking routers prefer shorter as - paths as an indirect way to improve end - to - end performance .", "however , as - path length only loosely correlates with end - to - end propagation delay and does not reflect other performance metrics of interest , e.g. , throughput , latency , and loss [ 13 ] .", "consequently , bgp is unable to cope with serious performance and reachability problems in the data plane .", "we argue that , to achieve good network performance , route selection should be based on direct observations of path quality , rather than the length of the as - path.we propose leveraging two mechanisms : end - to - end monitoring and multipath routing ( see above ) .", "neither of these mechanisms is provided by today 's bgp .", "instead , ases should adapt next - hop rankings , as well as how traffic is split between multiple \" next hops , \" based on path - quality monitoring in the data plane .", "we describe techniques for stub ases , online service providers , and transit isps to monitor path performance.security .", "bgp is notoriously vulnerable to attacks [ 6 , [ 14 ] [ 15 ] [ 16 ] [ 17 ] .", "this weakness of bgp can be exploited for eavesdropping , tampering , packet dropping , and also for economic reasons ( e.g. , increasing an as 's revenue ) .", "every year or two , a major incident exposes just how incredibly vulnerable bgp is ( e.g. , [ 18 ] ) .", "in addition , today 's routers have a bewildering array of configuration options for selecting and exporting routes , making configuration errors [ 19,20 ] and software bugs [ 21 ] [ 22 ] [ 23 ] common sources of serious internet outages.we believe that relying on bgp for data - plane security is misguided .", "instead , these guarantees should be assured in other ( end - to - end ) ways , such as encryption and authentication .", "we show that next - hop routing significantly reduces bgp 's attack surface .", "specifically , next - hop routing makes ases immune to virtually all as - path - based attacks ( e.g. , path - shortening attacks [ 17 ] ) .", "next - hop routing also removes incentives for rational ases to manipulate the protocol .", "we also give theoretical evidence that next - hop routing is more resilient to configuration errors .", "we present next - hop routing in section 2 .", "since nexthop routing is a broad routing architecture , our evaluation takes many forms , including ( i ) theoretical analysis ( to study convergence , incentive compatibility , and robustness to misconfiguration ) , ( ii ) simulation experiments ( to measure convergence time ) , ( iii ) protocol design ( to illustrate simple ways to support multipath routing and path - quality monitoring ) , and ( iv ) qualitative arguments ( about the reduced attack surface and techniques for traffic engineering ) .", "section 3 shows that next - hop routing significantly reduces convergence time and router overhead .", "section 4 shows how next - hop routing greatly simplifies support for multipath routing .", "section 5 shows that next - hop routing reduces the attack surface for bgp and provides incentives for rational ases to participate honestly in the protocol .", "we present techniques for traffic management ( i.e. , path - quality monitoring and traffic engineering ) in section 6 .", "we present related work in section 7 and conclude in section 8 .", "proofs are omitted due to space constraints and are available in an extended version of the paper [ 24 ] .", "we now present our next - hop routing architecture , which consists of two components : ( 1 ) three simple rules that constrain how routes are selected and exported in the bgp decision process ; and ( 2 ) external mechanisms for performance - driven routing based on end - toend data - plane monitoring , and for security .", "our focus in this section is on the first component - the next - hop routing rules .", "we discuss security and performancedriven routing in sections 5 and 6 , respectively.in today 's internet , the bilateral business contracts ases sign with their immediate neighbors play a cru - cial role in determining their routing policies ( see [ 25 ] and appendix b ) .", "ases tend to prefer revenue - generating routes through customers over routes ( for which they pay ) through their providers , and to avoid carrying traffic between providers .", "under next - hop routing , ases rank and export paths based solely on the nexthop as en route to each destination prefix , but an as has full control over which immediate neighbors carry its traffic and direct traffic through it .", "next - hop routing thus allows ases sufficient expressiveness to realize their business policies .", "( indeed , these common routing practices can be realized with next - hop routing . )", "2.1 the existing bgp decision process bgp - speaking routers typically receive multiple routes to the same destination .", "there are three steps a bgp router uses to process route advertisements : 1 .", "an import policy determines which routes should be filtered ( and hence eliminated from consideration ) and assigns a \" local preference \" ; 2 .", "a decision process selects the most desirable route ; 3 .", "an export policy determines which of the neighbors learn the chosen route.the decision process consists of an ordered list of attributes across which routes are compared .", "here , we focus on the following important steps in the bgp decision process ( see [ 26 ] for the full list of steps ) : \u2022 prefer higher local preference ( localpref ) .", "the bgp localpref attribute enables operators to express rich , engineering - and business - motivated preferences over routes , thus potentially choosing a longer as - path over a shorter route ; \u2022 prefer shorter routes .", "ties between routes that share the highest localpref are broken in favor of routes with the lowest as - path length ; \u2022 prioritize old routes over new ones .", "this decision step is implemented in some routers [ 27 ] but not always enabled by default .", "we now specify our three next - hop routing rules.rule i : use next - hop rankings .", "configure rankings of routes based only on the immediate next - hop as en route to each destination ( e.g. , to prefer customerlearned routes over provider - learned routes ) .", "ties in the rankings of next - hops are permitted.rule ii : prioritize current route .", "to minimize path exploration , when faced with a choice between the \" old \" ( current ) route and an equally - good ( in terms of nexthop ) new one , re-select the old route .", "as b is willing to export route bad , but not the more preferred route bd , to c. hence , if b changes its route from bad to the bd , it will stop announcing its route to c and thus disconnect c from the destination d.rule iii : consistently export [ 11 ] .", "if a route p is exportable to a neighboring as i , then so must be all routes that are more highly ranked than p .", "intuitively , consistent export prevents undesirable phenomena as in figure 1 , where an as disconnects a neighbor from a destination by selecting a better route for itself .", "network operators can transition to next - hop routing simply by configuring their existing routers in accordance with the next - hop routing rules .", "this is achieved via the following three actions : ( i ) applying only nexthop rankings when configuring import policies to assign localpref for ebgp - learned routes , ( ii ) disabling the as - path length step in the bgp decision process ( as supported on most commercial routers ) , and ( iii ) selecting ebgp export policies that obey consistent filtering .", "thus , an as can readily deploy next - hop routing without any changes to the underlying equipment and without any support from its neighbors 1 .", "intuitively , bgp can converge slowly for two main reasons : ( 1 ) small and faraway routing changes can lead an as to select a new next - hop , thus leading to a chain reaction of subsequent routing changes ; and ( 2 ) inconsistencies between path rankings and route export policies can lead an as to disconnect other ases from a destination when selecting a better route for itself , pushing them to seek alternate routes ( see figure 1 ) .", "our next - hop routing rules prevent these scenarios ; next - hop rankings guarantee that remote routing changes do not drive an as to change its next hop ; consistent export guarantees that when bettering its own route an as never disconnects other ases from a destination .", "we now present experimental and theoretical evidence that next - hop routing converges quickly to a \" stable \" routing configuration.metrics .", "we focus on three metrics for measuring performance during the convergence process : \u2022 # forwarding changes , that is , the number of times ases change their choices of next hop during the convergence process ( summed across all ases ) ; \u2022 # routing changes , that is , the number of times ases ' routes change during the convergence process ( summed across all ases ) ; \u2022 # bgp updates transmitted during the convergence process ( summed across all ases ) .", "our experiments show that next - hop routing significantly reduces the number of update messages , routing changes , and forwarding changes , under various network events and vantage points .", "we use the cyclops [ 28 ] as - level internet topology on jan 1 , 2010 .", "each as is represented by one router , and the links between ases are annotated with business relationship .", "the topology contains a total of 33,976 ases , of which 4,670 are non-stubs , that is , ases that have no customers of their own , and the rest are stubs .", "the topology contains 54,786 customer - provider links and 43,888 peer - peer links.protocols .", "we evaluate bgp ( standard decision process ) , prr ( prefer recent route ) [ 27 ] where the final tie - breaking step prefers the current best route over new routes , and next - hop routing .", "for all these protocols , we follow the gao - rexford import and export conditions [ 25 ] ( see appendix b ) , where ases prioritize customer - learned routes over peer - learned routes over provider - learned routes .", "bgp and prr prefer shorter routes to longer ones within each category ( customer - / peer - / provider - learned ) .", "all three protocols obey the consistent export requirement .", "comparing the three protocols allows us to quantify the importance of nexthop ranking ( only in next - hop routing ) and prioritizing the current route ( in both next - hop ranking and prr ) .", "we use the c - bgp [ 29 ] simulator .", "note that c - bgp does not support the mrai ( minimum route advertisement interval ) timer , which rate - limits the updates sent on each session .", "although the bgp rfc recommends the default mrai of 30 seconds [ 30 ] , router vendors [ 31 ] and the ietf [ 32 ] advocate using much smaller mrais ( e.g. , a few seconds ) or removing the timer entirely , due to the performance requirements of interactive applications .", "thus , our simulation results without mrai settings should be a reasonable estimation of forwarding changes , routing changes , and bgp update messages as the internet moves away from large mrai timers .", "in fact , our experimental and theoretical results below suggest that next - hop routing could allow ases to remove the mrai timer entirely .", "since c - bgp does not produce accurate estimates of convergence time , we do not present results for this metric.events .", "we consider three events : prefix announcement , link failure , and link recovery .", "we first inject a prefix from a randomly selected multi-homed stub as , next randomly fail a link between the stub as and one of its providers , and then recover the failed link .", "we wait for the routing protocol to converge after each step , before moving on to the next step .", "for each experiment , we compute all the metrics at selected vantage points ( see below ) .", "we repeat this experiment for 500 randomly - chosen multi-homed stub ases.vantage points .", "we observe the number of update messages , routing changes , and forwarding changes from all 4,670 non-stub ases and from randomly chosen 5,000 stub ases as vantage points .", "we now present our results for the failure of a link connecting an as to the rest of the internet .", "our results for the other events we evaluate are similar.comparison : bgp updates at non-stubs .", "figure 2 ) , some non-stub ases receive thousands of update messages .", "interestingly , the larger , better - connected ases tend to receive more update messages , presumably because they have many more neighbors exporting routes to them .", "the most - affected non-stub as receives 1698 update messages , and the most - affected stub receives 244 .", "prr slightly reduces this number ( middle curve in figure 2 , which mostly overlaps with the bgp curve , except at the tail ) , by avoiding unnecessary path exploration .", "next - hop routing leads to significant improvement ( bottom curve ) .", "the much smaller number of update messages suggests that next - hop routing would allow ases to remove the mrai timer ( as is the case in our experiments ) without introducing a large number of messages ( see also theorem 3.1 below ) .", "recall that next - hop routing protocol is composed of three parts : next - hop ranking , prefer old route , and consistent export .", "while the step of consistent export is applied in all protocols of bgp , prr , and next - hop , the gap between the curves of bgp and prr in figure 2 shows the minor benefits of the prr step in nexthop routing .", "by contrast , the gap between the curves of prr and next - hop in the figure clearly demonstrates the improvement by using next - hop ranking.comparison : routing / forwarding changes at nonstubs .", "next - hop routing also greatly reduces the number of routing and forwarding changes for non-stub ases ( see figure 3 ) .", "for the ases which experience changes , the average number of routing changes is 4.99 for bgp , 5.03 for prr , and only 3.95 for next - hop bgp .", "we get similar results for the average number of forwarding changes : 2.36 for bgp , 2.37 for prr , and 2.20 for nexthop routing .", "in fact , none of the non-stub ases experience more than six forwarding changes under next - hop routing for these experiments .", "in contrast , ases experience as many as ten forwarding changes when preferring a shorter as - path over staying with the same next - hop as , as in prr.comparison : stubs .", "figure 4 plots the distribution of the number of update messages and routing changes as seen at stub ases .", "observe that next - hop routing once again leads to significant improvement over both bgp and prr.the 0.1 % position .", "the ccdf plots , while useful for illustrating the diverse experiences of ases during convergence , are unwieldy for head - to - head comparisons of the protocols across different events and convergence metrics .", "yet , with such a skewed distribution , the mean and the median are not especially meaningful .", "so , we focus on the experience of the as at the 0.1 % position in the ccdf plots , allowing us to focus on the ( non-stub ) ases that are affected the most link failures without allowing one outlier as to bias the results .", "we summarize the data in bar charts in figure 5 .", "the bars for \" link failure \" correspond to the y = 0.001 position in figures 3 ( a ) and 4 ( a ) , respectively .", "we do not plot the number of forwarding changes since , for most experiments , the 0.1th - percentile as experienced at most one forwarding change .", "we get similar results by comparing the number of update messages and routing changes conclusions .", "our results show that next - hop routing offers reductions in the number of update messages and routing changes across a range of network events .", "these results also illustrate how next - hop routing is especially effective at preventing the most serious convergence problems - where an as experiences hundreds of routing changes and tens of forwarding changes .", "this not only reduces the performance disruptions experienced by the data traffic , but also significantly reduces the overhead for disseminating bgp update messages .", "our next - hop routing rules imply the existence of a stable state in the network [ 11 ] , but this does not guarantee bgp convergence to a stable state or that such convergence be fast .", "indeed , even in the natural \" gaorexford framework \" ( see appendix b ) , that captures common ases ' routing practices and where bgp convergence to a stable state is guaranteed , convergence might involve exponentially many forwarding changes , routing changes and bgp updates [ 33 ] .", "we complement our simulation results with theoretical evidence that next - hop routing significantly reduces the number of forwarding changes , routing changes , and update messages .", "we use the standard model for analyzing bgp dynamics put forth in [ 34 ] .", "see appendix a for an explanation of the model .", "we show that in the gao - rexford framework , if ases obey the next - hop routing rules 2 , fast ases , convergence to a stable state 2 the gao - rexford conditions do not imply next - hop routing ( and vice versa ) ; even if the preference condition holds , there are no restrictions on the rankings of routes within each business category ( customer - learned , peer - / providerlearned ) ; even if the export condition holds , an as can export a route to a neighboring as , but not export a \" better route \" to the same as .", "however , by focusing on relationships is guaranteed ( that is , convergence involves a polynomial , not exponential , number of forwarding and routing changes and of bgp updates ) even in the worstcase .", "we point out that , to the best of our knowledge , this is the first result to establish fast bgp convergence in the standard model of bgp dynamics .", "\u2022 o ( | n | | l | 2 ) routing changes ; \u2022 o ( | l | 3 ) bgp update messages.this holds for all timings of router activations / update message arrivals.the proof appears in the extended version of the paper [ 24 ] .", "we stress that , from a practical perspective , the fact that the above bounds hold for every timing of router activations / update - message arrivals implies that fast convergence with next - hop routing is achieved regardless of the mrai timer settings and , in particular , even if mrai timers are removed entirely .", "recently , there has been a surge of interest in multipath interdomain routing ( see , e.g. , [ 3,9 , [ 35 ] [ 36 ] [ 37 ] ) .", "we now discuss how next - hop routing can make multipath routing more scalable and incrementally deployable .", "we then extend the theoretical results for convergence and incentive compatibility of next - hop routing to a specific multipath routing setting.with immediate neighbors , the gao - rexford conditions go naturally together with our next - hop routing rules .", "unfortunately , naive bgp - based multipath routing schemes can be unscalable , due to the need to disseminate and store multiple routes .", "for the topology in figure 6 , consider the naive multipath protocol where nodes announce all available routes to neighboring nodes .", "observe that ases a and b , that each have two routes to the destination d , will both announce two routes to as c .", "as c will then announce four routes to as d , and so on .", "this can easily result in state explosion and in excessive transmission of update messages.we show that next - hop routing is more amenable to multipath than path - based routing .", "the key observation is that under next - hop routing , a node need not learn a neighboring node 's multiple paths , but merely learn enough to avoid loops .", "if as c in figure 6 has a next - hop ranking of routes then , to enable c to detect loops , as a ( or b ) can merely send c an ( unordered ) list of all the ases its ( multiple ) routes traverse .", "bgp allows the aggregation of routes into one such as - set [ 38 ] , that summarizes the as - path attributes of all the individual routes .", "thus , bgp route aggregation , used to keep bgp routing tables manageable in other contexts , can also be used to greatly mitigate the cost of multipath next - hop routing.hence , next - hop routing lowers the barrier for making multipath routing a reality .", "capitalizing on multipath routing can yield the following benefits : availability .", "multipath routing increases the likelihood that an as has at least one working path.failure recovery .", "an as with multiple next - hops can react immediately to a failure in one outgoing link by sending traffic along another ( and not wait for the protocol to re-converge ) .", "an as could have multiple nexthops ( with equal local preference ) and decide whether and how much traffic to direct through each next - hop ( e.g. , based on data - plane monitoring ) .", "conventional techniques , such as hashing on fields in the ip header , can ensure that packets of the same flow traverse the same path , to prevent out - of - order packet delivery .", "while under bgp a router is restricted to selecting a single route ( for each destination prefix ) , an as may want to select different routes for different neighboring ases for economic reasons ( e.g. , an isp could offer different services to customers [ 37 ] ) or operational reasons ( e.g. , to increase resiliency to failures [ 3 ] ) .", "neighborspecific bgp [ 37 ] is a recent proposed extension to bgp that allows a router to select a different ( single ) route for each neighbor , that is , customize route selection on a per - neighbor basis .", "surprisingly , the additional flexibility in route selection under ns - bgp also improves global network stability [ 37 ] .", "we now show that our theoretical result for conver - gence of next - hop routing extends to ns - bgp .", "specifically , we consider next - hop routing with ns - bgp , that is , routing with ns - bgp such that ( 1 ) an as is restricted to only using next - hop rankings to select routes for neighboring ases ( possibly using different rankings for different neighbors ) ; and ( 2 ) an as consistently exports with respect to each neighboring as .", "see figure 7 for an illustration of next - hop routing with ns - bgp .", "we prove the analogues of theorem 3.1 ( see section 3 ) in this multipath setting .", "see appendix b for an explanation of the gao - rexford conditions .", "in a network of | n | ases and | l | links , if the gao - rexford topology condition and export condition hold , then convergence of next - hop routing with ns - bgp to a stable state involves a total number of at most \u2022 o ( | l | 2 ) forwarding changes ; \u2022 o ( | n | | l | 2 ) routing changes ; \u2022 o ( | n | | l | 3 ) bgp update messages.this holds for all initial states of the system and for all timings of router activations / update message arrivals .", "we now present three advantages of next - hop routing over path - based routing with bgp , which render some dangerous attacks against bgp ineffective or less harmful : ( 1 ) significantly reduced attack surface ; ( 2 ) improved resilience to configuration errors ; and ( 3 ) incentive compatibility .", "we then explain how additional security mechanisms can be used to secure the routing system from the remaining forms of attacks .", "some of the most dangerous attacks on bgp are based on \" lying \" about the length of an as 's path .", "indeed , an as can attract much traffic by announcing a shorter route than that it really has [ 17 ] , thus launching so called blackhole or interception attacks for tampering , dropping packets , eavesdropping , etc.under next - hop routing , ases do not consider the as - path when making routing decisions - beyond the first hop , which can not be forged !", "- and so an as no longer benefits from such attacks .", "thus , next - hop routing significantly reduces bgp 's attack surface .", "in fact , the only effective as - path - based attacks on next - hop routing are attacks that trigger bgp 's loop detection mechanism ( that are clearly also effective against pathbased routing with bgp ) .", "we consider a threat model that captures some common configuration errors .", "today 's as networks typically comprise commercial routers , and so it is reasonable to consider configuration errors that lead ases ( routers ) to rank and export routes in unintended and undesirable ways ( as opposed to running new router software ) .", "in our threat model , the \" adversary \" can choose a single as a and then change that as 's routing policy , that is , a 's ranking of routes and route export rules .", "we impose no restrictions on how the adversary changes a 's routing policy.we restrict our attention to the following simple question : \" when can the adversary eliminate all stable states from the network ? \"", "( see appendix a for a model of bgp dynamics and a definition of stable states . )", "that is , we wish to understand when the adversary can make the network inherently unstable by changing the routing policy of a single as .", "while the existence of a stable state does not guarantee protocol convergence to a stable state , understanding when a stable state even exists in the network is an important first step on the path to understanding protocols dynamics in the presence of unwanted behavior .", "we present the following theorem.theorem 5.1 .", "if all ases in a network obey the nexthop routing rules then a stable state is guaranteed to exist in every routing system that can be obtained from changing the routing policy of a single as .", "bgp is not incentive compatible , in the sense that ases might have incentive not to participate honestly in the routing protocol [ 15,16,39 ] .", "in contrast , [ 15 ] shows that next - hop routing is incentive - compatible .", "specifically , in the gao - rexford framework ( see appendix b ) , an as can not get a \" better \" next - hop en route a destination by \" deviating \" from bgp ( e.g. , announcing bogus routes , reporting inconsistent information to neighboring ases , etc. ) .", "[ 11,15 ] if the gao - rexford conditions hold , then next - hop routing is incentive compatible.to illustrate theorem 5.2 we revisit the example in figure 1 .", "observe that in the unique stable routing state ases a , b , and c send traffic along the routes ad , bd , and cbd , respectively .", "hence , bgp is guaranteed to converge to a routing state where each as directs traffic via its most preferred feasible next - hop as .", "( observe that , while b would prefer using c as a next - hop , no route from c to d that does not traverse b exists , and hence b can not hope to send traffic through c. ) [ 15 ] shows that this is true for general network topologies ( see also [ 11 ] ) .", "today , an as can use bgp policies to avoid paths that travel through undesirable ases .", "for example , the u.s. government may want to avoid directing their traffic through other countries .", "similarly , an as may wish to avoid ases known to perform censorship , conduct wiretapping , or offer poor performance .", "this is achieved by applying regular expressions to the as - path to assign lower preference to routes that contain the undesirable ases , or filtering these routes entirely .", "under nexthop routing , an as can no longer specify bgp routing policies that avoid remote undesirable ases or countries rendering such \" as - avoiding policies \" impossible.while next - hop routing renders \" as - avoiding policies \" impossible , we point out that these kinds of policies come with no guarantees ; the as - path lists the sequence of ases that propagated the bgp announcement , not the path the data packets necessarily traverse ( and these can differ even for benign reasons ) .", "we believe that relying on bgp for data - plane security is misguided .", "it is precisely when issues like confidentiality and integrity are involved that the matter should not be left to chance , or misplaced trust .", "instead , we argue that these guarantees should be assured in other ( endto - end ) ways , such as encryption and authentication , e.g. , using the mechanisms in [ 12 ] .", "we have shown that next - hop routing renders some dangerous attacks against bgp ( almost all as - pathbased attacks , e.g. , path - shortening attacks ) ineffective , while making other attacks less harmful , or non-beneficial for the attacker .", "we have also shown how end - to - end mechanisms , which can be incrementally deployed , can be used to improve data - plane security .", "combining these measures will create a routing system that is significantly more secure than today 's bgp .", "however , nexthop routing alone does not provide full protection against all attacks .", "specifically , next - hop routing is still vulnerable to \" prefix hijacking \" attacks , where the attacker announces an ip prefix which it does not own , as well as to attacks that trigger bgp 's loop - detection mechanism.over the past decade the standards and research communities have devoted much effort to securing bgp against prefix hijacking and more sophisticated attacks .", "we are finally witnessing the initial deployment of the resource public key infrastructure ( rpki ) - a cryptographic root - of - trust for internet routing that authoritatively maps ases to their ip prefixes and public keys .", "rpki will enable an as to authenticate that the origin of a route announcement indeed owns the announced prefix - a property called \" origin authentication \" .", "in addition , there is much debate about the deployment of mechanisms for as - level path validation ( e.g. , s - bgp , sobgp , bgpsec ) , which will enable an as to verify that an announced route actually exists ( and was announced to the announcer ) , thus also preventing attacks against bgp 's loop - detection mechanism .", "today 's routers prefer shorter as - paths as an indirect way to improve end - to - end performance and avoid selecting backup routes .", "in this section , we discuss how network operators can more naturally achieve their traffic - management goals without relying on the as - path .", "first , we discuss how to rank next - hop ases based on measurements of end - to - end path performance .", "then , we discuss how operators can balance load by ranking next - hop ases on a per - prefix basis and tagging backup paths with a bgp community attribute .", "next - hop routing can lead to longer paths than conventional bgp .", "to understand the impact on as - path length , we analyze the differences in path lengths for different ases across a range of \" t - up , \" \" t - long , \" and \" t - short \" events .", "our experiments show that most ases ( 68.7 % - 89.9 % , depending on the event ) have the same as - path length under bgp and next - hop routing , and most other ases experience just one extra hop .", "still , a non-trivial fraction of ases see even longer paths .", "while these paths may perform reasonably well , some ases may indeed experience worse performance .", "as a result , we believe that a static next - hop ranking should not be the only factor in routing decisions.given as - path length only loosely correlates with path performance , we argue that routers should make decisions based on measurements of path quality .", "routers could adjust ( i ) the ranking of the next - hop ases and ( ii ) the splitting of traffic over multiple next - hop ases with the same rank , based on the performance metrics ( e.g. , throughput , latency , or loss ) of interest .", "different kinds of ases may select different techniques for moni - toring path performance , such as : multihomed stub ases : the many multi-homed stub ases can apply existing measurement techniques for intelligent route control supported in commercial routers ( e.g. , [ 40 ] ) .", "round - trip performance measurements are relatively easy to collect , since the stub as sees traffic in both the forward and reverse directions.online service provider : online service providers , such as google and microsoft , can easily monitor endto - end performance for their clients ( e.g. , by logging tcp - level rtt statistics at their servers [ 41 ] ) .", "transit providers : performance monitoring is more difficult for transit providers , since most traffic does not start or end in their networks , and asymmetric routing may cause them to see one direction of traffic but not the other .", "still , passive flow measurements can be used to infer performance [ 42 ] .", "transit providers can also measure performance directly by using hash - based sampling [ 43 ] to sample both directions of the traffic - for the subset of flows that traverse the as in both directions .", "this technique also ensures that as measures just the downstream portion of the path to the destination , rather the part between the source and the isp.in all three cases , ases can measure the performance of multiple paths by using \" route injection \" [ 44 ] to direct a small portion of traffic on each alternate path to continuously track performance .", "in addition , ases can use active probing to monitor alternate paths , rather than directing \" real \" customer traffic over these paths.based on the performance measurements , an as can adapt how it directs traffic over multiple next - hops .", "designing and analyzing effective adaptive load - balancing techniques is a rich research topic in it own right .", "recent work suggests that it is indeed possible to design stable and efficient controllers for adapting the flow of traffic over multiple paths [ 45 ] [ 46 ] [ 47 ] [ 48 ] .", "we plan to study this issue in greater depth as part of future work .", "in addition to selecting paths with good performance , operators rely on interdomain path selection to balance load on their network links .", "operators perform traffic engineering by measuring traffic volumes and selecting paths that optimize the flow of traffic over different links .", "today , some operators use the as - path to aid in traffic engineering .", "we believe other approaches ( that do not rely on the as - path ) are more appropriate : outbound traffic engineering : operators balance load on edge links to other ases by adjusting the policies that assign \" local preference \" to bgp routes .", "this is still possible under next - hop routing , with the restriction that the preferences depend only the immediate neighbor rather than subsequent hops in the as - path .", "as such , network operators can not use \" regular expressions \" on the as - path to ( say ) direct some traffic through an alternate egress point based on whether the second as in the path is even or odd [ 49 ] .", "policies based on regular expressions are arguably quite clumsy , and may not be widely used in practice .", "instead , network operators could select different next - hop rankings for different ( groups of ) destination prefixes as a way to direct some traffic over other paths.inbound traffic engineering : controlling the flow of incoming traffic is notoriously difficult , since internet routing is destination - based .", "today , some ases use \" as prepending \" - artificially adding extra hops to make the as - path look longer - to make routes through them look less desirable to others .", "this is often used as a ( somewhat clumsy ) way to signify a \" backup \" route .", "observe that next - hop routing , by removing as - path length from the decision process , makes as prepending ineffective .", "instead , network operators could use bgp communities to signal backup routes to neighboring ases [ 50 ] ; if these ases export the \" signal \" to their neighbors , other ases can also give lower ranking to backup paths .", "perhaps more importantly , path - quality monitoring allows ases to make decisions based on performance , leading naturally to routing decisions that avoid placing excessive load on lower - bandwidth backup links .", "still , just as with today 's bgp , inbound traffic engineering remains somewhat of a \" black art . \"", "in addition , traffic engineering greatly benefits from multipath routing - something next - hop routing supports much more naturally than conventional bgp , as discussed earlier in section 4 .", "an as can easily split traffic over multiple next - hops leading to the same destination ; adjusting the fraction of traffic assigned to each nexthop is a much finer - grain approach to traffic engineering than selecting a single path for each destination prefix .", "interdomain routing has been an active research area , ever since early work identified thorny problems with bgp [ 34,51,52 ] .", "since then , many papers have characterized bgp 's behavior ( both theoretically [ 15,25,39 ] , and via measurement [ 1,19 ] ) , and designed techniques for managing bgp ( to detect configuration mistakes [ 20 ] and automate traffic engineering [ 49 ] ) .", "other research has proposed extensions to bgp ( particularly to improve security [ 5,6 ] and convergence [ 3,4 ] , or support multipath routing [ 3,9,12 , [ 35 ] [ 36 ] [ 37 ] ) , or designed new interdomain routing architectures [ 7 ] [ 8 ] [ 9 ] [ 10 ] .", "we do not attempt to provide a comprehensive overview.our work is inspired by recent theoretical work [ 11,15,16 ] on bgp policy restrictions that lead to desirable global properties .", "we explore whether we can make reality look more like those models.this work contains contributions that did not appear in a preliminary version of this paper [ 53 ] .", "specifically , the current paper makes the following new contribu - tions : extensive experimental analysis of next - hop routing , the theoretical model and result for configuration errors , the theoretical analysis of neighbor - specific nexthop routing , and discussion of several important topics ( e.g. , data - plane monitoring and traffic engineering ) .", "bgp suffers from many serious problems .", "we argued that simplifying bgp is an attractive alternative to extending or replacing bgp .", "we proposed next - hop routing - three simple constraints on how routes are selected and exported , combined with external mechanisms for data - plane monitoring and security .", "nexthop routing allows ases sufficient expressiveness to realize their business and engineering objectives , while sidestepping some of bgp 's major problems ( e.g. , slow convergence , large attack surface , incentives to \" lie \" , difficulty in supporting multipath routing , and more ) .", "our work leaves several interesting directions for future research .", "we plan to explore how to remove the as - path attribute entirely , that is , how not to rely on the as - path even for loop detection purposes ( e.g. , by detecting forwarding loops through data - plane monitoring ) .", "we also plan to further investigate the stability and efficiency of adaptive interdomain routing based on measurements of data - plane performance.protocol dynamics .", "under bgp at routing tree to the destination d is built , hop - by - hop , as knowledge about how to reach d propagates through the network .", "the process is initialized when d announces itself to its neighbors by sending update messages .", "from this moment forth , every active node establishes a route to d by repeatedly choosing the best route that is announced to it by its neighbors ( according to < i ) and announcing this route to its neighbors ( according to its export policy ) .", "the network is assumed to be asynchronous ; ases can act at different times and bgp updates can be arbitrarily delayed.stable states .", "informally , a stable state is a global configuration that once reached remains unchanged .", "formally , a stable state is an n - tuple of routes in g , r 1 , ... , r n , such that : ( 1 ) if for two nodes i = j it holds that j is on r i , then it must hold that r j \u2282 r i ( that is , r j is a suffix of r i ) .", "( 2 ) if there is a link ( i , j ) \u2208 l , and r i = ( i , j ) r j , then ( i , j ) r j < i r i .", "it is easy to show [ 34 ] that a stable state is always in the form of a tree rooted in d .", "in the gao - rexford framework , neighboring ases have one of two business relationships : customer - provider and peering .", "[ 25 ] presents three conditions that are naturally induced by the business relationships between ases and proves that these conditions imply guaranteed bgp convergence to a stable state .", "the three gao - rexford conditions are the following : \u2022 topology condition : there should be no customer - provider cycles in the as hierarchy digraph .", "\u2022 preference condition : an as should prioritize customer - learned routes over peer - and providerlearned routes .", "\u2022 export condition : an as should not export peer - / provider - learned routes to other peers and providers.theorem b. 1 .", "[ 25 ] if the gao - rexford conditions hold for a network then bgp convergence to a stable state is guaranteed .", "swe use the standard model for analyzing bgp dynamics put forth in [ 34 ] .", "the reader is referred to [ 34 ] for further details.network and policies .", "the network is defined by an as graph g = ( n , l ) , where n represents the set of ases , and l represents physical communication links between ases .", "n consists of n source - nodes { 1 , . . . , n } and a unique destination node d. p i denotes the set of \" permitted \" simple ( noncyclic ) routes from i to d in g. each source - node i has a ranking function \u2264 i , that defines an order over p i .", "we allow ties between two routes in p i only if they share the same next hop .", "the routing policy of each node i consists of \u2264 i and of i 's import and export policies .", "3 we use the standard model for analyzing bgp dynamics put forth in [ 34 ] .", "the reader is referred to [ 34 ] for further details.network and policies .", "the network is defined by an as graph g = ( n , l ) , where n represents the set of ases , and l represents physical communication links between ases .", "n consists of n source - nodes { 1 , . . . , n } and a unique destination node d. p i denotes the set of \" permitted \" simple ( noncyclic ) routes from i to d in g. each source - node i has a ranking function \u2264 i , that defines an order over p i .", "we allow ties between two routes in p i only if they share the same next hop .", "the routing policy of each node i consists of \u2264 i and of i 's import and export policies ."], "tgt_txt": "putting bgp on the right path : a case for next - hop routing michael schapira joint work with yaping zhu and jennifer rexford ( princeton university ) once upon a time internet inter-network routing : small network single administrative entity nsfnet shortest - path routing distance - vector routing then ... .<q>interdomain routing over 35,000 autonomous systems ( ases ) interdomain routing = routing between ases border gateway protocol ( bgp ) at&t qwest comcast sprint todays path - based routing with bgp complex !<q>configuration errors , software bugs , bad convergence !<q>persistent route oscillations , slow convergence , vulnerable to attacks !<q>malicious , economically - driven , inadvertent , and more , and more , and more bad performance , clumsy traffic engineering , how can we fix interdomain routing ?<q>one approach : add mechanisms to an already complex protocol route flap damping , s - bgp , another approach : redesign interdomain routing from scratch hlp , nira , pathlet routing , consensus routing , our approach : simplify bgp !<q>background : todays pathbased routing with bgp as is routing policy : ranking of simple routes from i to each destination d export policy bgp is a path - vector protocol receive route updates from neighbors choose single best route ( ranking ) send route updates to neighbors ( export policy ) background : todays pathbased routing with bgp do nt export 2d to 3 a stable state is reached as - path = the route of all evil as - path : list of all ases on path originally meant for loop - detection the as - path is to blame !<q>error - prone , software bugs no / slow convergence large attack surface bad scalability , clumsy traffic engineering , bad performance , getting off the as - path no way back to shortest - path routing our proposal : next - hop routing make routing decisions based solely on the next hop relegate the as - path to its original role wish list loop freedom fast convergence security incentive compatibility business policies good performance traffic engineering scalability simplicity expressiveness vs. complexity complexity expressiveness not expressive enough sufficiently expressive extremely expressive simple too complex shortest - path routing next - hop routing bgps path - based routing next - hop routing rules !<q>rule 1 : use next - hop rankings next - hop routing rules !<q>rule 1 : use next - hop rankings rule 2 : prioritize current route to minimize path exploration [ godfrey - caesar - hagen - singershenker ] d favor of lower as number next - hop routing rules !<q>rule 1 : use next - hop rankings rule 2 : prioritize current route rule 3 : consistently export to avoid disconnecting upstream nodes [ feigenbaum - sramachandran ] to 4 to 4 next - hop routing rules !<q>rule 1 : use next - hop rankings rule 2 : prioritize current route rule 3 : consistently export defn : node i consistently exports w.r.t. neighbor j if there is some route r s.t. each route q is exportable to j iff r i q. defn : node i consistently exports if it consistently exports with respect to each neighboring node j. next - hop routing rules !<q>rule 1 : use next - hop rankings rule 2 : prioritize current route rule 3 : consistently export 3 deployment schemes configure todays routers create new router configuration interface build new router software wish list revisited wish list revisited loop freedom fast convergence ?<q>security incentive compatibility [ feigenbaum - s - ramachandran ] business policies good performance traffic engineering scalability ?<q>simplicity existence of stable state existence of stable state not guaranteed even with next - hop rankings ( rule 1 ) [ feamster - johari - balakrishnan ] thm : if the next - hop routing rules hold , then a stable state exists in the network .<q>what about ( fast ! )<q>convergence ?<q>bgp oscillations bgp not guaranteed to converge even with next - hop routing !<q>[ griffin - shepherd - wilfong ] d the commercial internet ases sign long - term contracts .<q>neighboring pairs of ases have : a customer - provider relationship a peering relationship peer providers customers peer gao - rexford framework 3 simple conditions that are naturally induced by the as - business - hierarchy .<q>topology condition , preference condition , export condition if the gao - rexford conditions hold , then bgp is guaranteed to converge to a stable state .<q>[ gao - rexford ] but , this might require exponentiallymany forwarding changes !<q>[ syed - rexford ] fast bgp convergence thm : in the gao - rexford framework , next - hop routing convergence to a stable state involves at most o ( l2 ) forwarding changes ( l = # links ) .<q>all network topologies all timings of as activations and update message arrivals all initial routing states all initial beliefs implications for routing changes and number of bgp updates simulations c - bgp simulator .<q>cyclops as - level topology , jan 1st 2010 ( 33,976 ases , ~ 5000 non-stubs ) protocols : bgp , prefer recent route ( prr ) , nexthop routing metrics : # forwarding changes , # routing changes , # updates , as - path length events : prefix up , link failure , link recovery methodology : 500 experiments , 10,000 vantage points ( all non-stubs , 5000 stubs ) simulation results ( # forwarding changes ) maximum number of bgp forwarding changes > 20 maximum number of routing changes in next - hop routing = 3 maximum number of forwarding changes in prr = 10 simulation results ( # routing changes ) maximum number of bgp routing changes > 160 maximum number of routing changes in next - hop routing < 20 maximum number of routing changes in prr > 40 simulation results ( # bgp updates , non-stub ases ) maximum number of bgp updates > 6000 maximum number of updates in nexthop routing < maximum number of updates in prr > simulation results ( # routing changes , the 0.1 % position ) incentive compatible routing configurations d each node is getting its best feasible next - hop next - hop routing is incentive compatible thm [ feigenbaum - ramachandran - s ] : in the gao - rexford framework , next - hop routing is incentive compatible .<q>( each node is guaranteed its best feasible next - hop ) wish list revisited loop freedom fast convergence security ?<q>incentive compatibility business policies good performance ?<q>traffic engineering ?<q>scalability simplicity limitations of next - hop routing as - path length as - avoiding policies as - name prepending as - path - based traffic engineering security , performance , traffic engineering still open research questions .<q>handled mostly outside the routing protocol .<q>we argue that next - hop routing makes things mostly better .<q>performance faster / better convergence than bgp .<q>much more scalable .<q>butpotential increase in path lengths .<q>b loosely correlated with performance ( # routers , physical distance throughput ) .<q>still , significant increase clearly undesirable !<q>simulation results : same path length for 97 - 99 % of ases ; big increase only for ~ 0.1 % .<q>security reduces bgps attack surface ( as - path length plays no role in routing decisions ) .<q>more resilient to economically - driven attacks ( incentive compatible ) .<q>more resilient to misconfigurations ( in progress ) but as - avoiding policies impossible .<q>come with no guarantees .<q>e2e ?<q>traffic engineering we discuss how traffic engineering can be done without relying on the as - path .<q>using different next - hop rankings for different ( groups of ) prefixes using the bgp communities attribute multipath routing performance , security and traffic engineering can greatly benefit from multipath routing .<q>multiple working paths immediate response to failures load balancing among multiple next - hops next - hop routing lowers the barrier for making this a reality ( work in progress ) .<q>multipath routing exploiting path diversity to realize the ass own objectives customize route selection for neighboring ases but ... multipath routing is not scalable !<q>disseminate and store multiple routes multipath routing is not scalable !<q>d p1 p 2 q1 q2 im using p1 and p2 im using q1 and q2 im using p1 , p2 , q1 and q2 from as - path to as - set next - hop routing is more amenable to multipath nodes do nt care about entire paths other than for loop detection do nt announce routes , announce sets !<q>set = union of ases on all routes bgp route aggregation neighbor - specific next - hop routing customizing route selection for neighbors operational motivation [ kushman - kandula - katabi - maggs ] economic motivation [ wang - s - rexford ] c1 zc2 c3 d ?<q>r1 r2 r3 secure !<q>short !<q>cheap !<q>neighbor - specific next - hop routing neighbor - specific bgp [ wang - srexford ] implementable using existing tools results for convergence and incentive compatibility extend to multipath !<q>conclusions and future research bgp is far too complicated !<q>new approach : simplify bgp without compromising global and local goals !<q>directions for future research : getting rid of the as - path ?<q>software / configuration complexity more theoretical and experimental work thank youthank you", "sections": [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], "token_sections": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]}