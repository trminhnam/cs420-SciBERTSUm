{"src": [101, 1996, 4598, 1997, 20438, 1011, 11892, 15078, 2135, 1011, 8114, 16744, 2005, 22863, 23207, 4818, 10470, 2015, 2007, 11519, 20167, 21879, 2003, 1996, 20680, 12070, 3291, 1999, 15078, 7337, 2640, 1012, 102, 101, 2009, 2003, 3373, 2008, 1999, 2116, 3572, 2204, 20167, 2015, 2005, 22863, 23207, 4818, 10470, 2015, 2089, 2022, 14477, 5946, 3981, 3468, 2349, 2000, 2019, 16112, 13249, 2090, 3606, 20938, 1998, 15078, 8122, 1012, 102, 101, 2174, 1010, 2000, 3058, 1010, 6950, 3768, 1996, 10394, 2000, 6011, 2107, 3463, 1012, 102, 101, 1999, 2023, 3259, 1010, 2057, 2556, 1037, 2047, 3921, 1024, 2057, 2202, 1996, 2034, 4084, 2875, 1996, 2458, 1997, 2047, 6786, 2005, 2896, 5391, 2075, 1996, 18315, 1011, 9812, 1997, 1047, 1011, 10722, 21112, 1997, 4487, 2015, 5558, 18447, 4520, 1012, 102, 101, 2057, 6611, 2023, 10394, 2000, 6011, 1996, 2034, 15078, 1011, 11619, 27118, 9397, 3217, 9048, 2863, 8553, 3463, 2005, 20438, 1011, 11892, 10595, 2005, 22863, 23207, 4818, 10470, 2015, 1012, 102, 101, 2122, 3463, 2907, 2005, 1996, 2590, 2465, 1997, 18315, 2290, 1011, 2241, 10595, 1010, 1998, 2024, 2241, 2006, 1996, 11619, 11213, 2008, 27937, 2038, 2053, 17505, 1011, 2946, 13782, 1012, 102, 101, 2057, 2903, 2008, 2256, 3921, 4324, 2307, 4872, 1012, 102, 101, 5262, 1010, 3525, 2000, 2256, 2147, 1010, 20934, 2818, 11263, 17875, 1998, 8529, 6962, 1031, 2184, 1033, 1010, 1998, 1010, 9174, 1010, 8655, 26837, 3802, 2632, 29625, 1031, 2322, 1033, 1010, 13949, 2256, 3463, 3081, 14305, 1997, 2256, 5461, 1010, 2947, 13946, 22647, 2015, 2057, 3591, 1999, 1031, 3590, 1033, 1996, 2492, 1997, 9896, 2594, 7337, 2640, 1031, 102, 101, 1999, 22863, 23207, 4818, 10470, 2015, 1010, 1996, 20680, 12070, 3291, 1999, 2023, 2181, 1010, 1037, 2275, 1997, 5167, 2003, 2853, 2000, 7226, 13375, 2007, 2797, 18394, 2058, 16745, 2015, 1997, 1996, 5167, 1010, 2007, 1996, 7848, 1997, 20446, 6026, 1996, 2591, 7574, 1006, 1045, 29625, 2063, 29625, 1010, 1996, 7680, 1997, 7226, 13375, 1005, 16548, 2013, 2037, 11095, 5167, 1007, 102, 101, 6950, 7887, 6148, 10470, 16744, 2008, 2024, 2119, 20438, 1011, 11892, 1998, 15078, 2135, 1011, 8114, 1010, 1998, 11302, 11519, 20167, 21879, 1012, 102, 101, 13718, 1010, 2000, 3058, 1010, 4121, 16680, 4839, 2090, 1996, 2110, 1997, 1996, 2396, 20167, 21879, 4663, 2011, 16591, 20623, 1010, 1998, 2011, 3606, 3993, 1010, 13792, 1012, 102, 101, 2009, 2003, 3373, 2008, 2023, 2071, 2022, 2349, 2000, 2019, 16112, 13249, 2090, 1996, 3606, 20938, 1998, 15078, 1011, 8122, 5918, 1010, 2008, 19676, 2015, 2993, 1999, 6551, 26131, 9896, 2836, 1012, 102, 101, 2107, 6980, 2090, 1996, 2048, 4078, 18688, 6790, 2001, 3728, 3491, 2000, 4839, 1999, 1031, 4029, 1033, 2005, 1037, 2367, 7337, 2640, 3291, 2170, 22863, 23207, 4818, 2270, 3934, 1031, 2871, 1033, 1012, 102, 101, 2174, 1010, 1999, 1996, 6123, 1997, 22863, 23207, 4818, 10470, 2015, 1010, 2349, 2000, 2037, 4310, 22863, 23207, 4818, 3252, 1010, 1996, 9896, 2594, 2208, 3399, 2451, 2747, 14087, 1996, 10394, 2000, 6011, 2023, 1031, 4229, 1033, 1012, 102, 101, 1996, 6334, 2465, 1997, 10967, 21638, 3240, 1011, 8359, 1011, 21695, 1006, 18315, 2290, 1007, 10595, 1031, 4724, 29623, 14526, 29623, 21926, 1033, 2003, 1996, 2069, 2124, 5415, 6028, 2005, 1996, 2640, 1997, 28283, 25300, 10074, 20438, 1011, 11892, 10595, 1006, 1999, 3056, 5875, 3572, 18315, 2290, 10595, 2024, 1996, 2069, 3606, 3993, 10595, 1031, 1022, 29623, 16147, 29623, 22907, 29623, 24434, 29623, 21619, 1033, 1007, 1012, 102, 101, 2096, 1037, 15743, 4646, 1997, 18315, 2290, 2003, 2411, 15078, 2135, 26721, 23576, 1010, 2062, 12266, 3594, 1997, 18315, 2290, 2024, 1996, 3145, 2000, 1996, 2190, 2124, 1006, 28283, 25300, 10074, 1007, 20167, 21879, 2005, 22863, 23207, 4818, 10470, 2015, 1031, 2385, 29623, 17788, 1033, 1012, 102, 101, 2005, 2122, 4436, 1010, 1996, 8993, 1997, 1996, 15078, 12546, 1997, 2107, 10595, 2003, 2019, 2590, 2470, 11376, 1006, 9505, 1999, 1031, 2321, 29623, 16147, 29623, 22907, 29623, 22394, 29623, 21619, 1033, 1007, 1012, 102, 101, 3728, 1010, 2009, 2001, 3491, 1031, 4029, 1033, 2008, 1996, 15078, 1011, 11619, 1997, 18315, 2290, 1011, 2241, 10595, 2003, 4876, 3141, 2000, 1996, 9366, 1997, 18315, 9812, 1012, 102, 101, 1031, 4029, 1033, 2001, 2583, 2000, 2191, 2224, 1997, 4493, 18315, 10394, 2000, 6011, 15078, 23608, 3463, 2005, 22863, 23207, 4818, 2270, 3934, 1012, 102, 101, 2174, 1010, 2005, 22863, 23207, 4818, 10470, 2015, 1010, 2122, 5461, 2024, 2053, 2936, 12711, 1012, 102, 101, 2023, 2003, 2138, 1010, 4406, 22863, 23207, 4818, 2270, 3934, 1010, 1996, 2686, 1997, 13105, 1999, 22863, 23207, 4818, 10470, 2015, 2515, 2025, 8676, 1997, 16745, 2015, 1997, 1996, 5304, 1997, 5167, 1010, 20934, 2099, 2738, 1997, 13571, 2015, 1997, 2023, 5304, 1006, 2090, 1996, 7226, 13375, 1007, 1012, 102, 101, 2023, 4455, 2005, 1996, 2458, 1997, 2047, 18315, 10394, 2005, 1996, 8304, 1997, 2107, 3471, 29625, 8545, 6246, 9375, 1996, 9366, 1997, 1996, 18315, 9812, 1997, 6407, 1997, 13571, 2015, 1997, 1037, 5304, 1015, 1998, 2556, 5461, 2005, 7411, 2896, 19202, 2006, 2023, 18315, 9812, 1012, 102, 101, 2057, 2265, 2129, 2122, 3463, 2064, 2022, 2109, 2000, 6011, 15078, 1011, 11619, 27118, 9397, 3217, 9048, 2863, 8553, 3463, 2005, 18315, 2290, 1011, 2241, 10595, 2005, 22863, 23207, 4818, 10470, 2015, 1012, 102, 101, 1006, 2057, 3602, 2008, 2122, 3463, 2941, 2907, 2005, 1996, 2062, 2236, 2465, 1997, 10595, 2008, 2024, 21358, 23460, 25845, 2869, 1031, 2676, 29623, 24434, 1033, 1012, 1007, 102, 101, 2256, 27118, 9397, 3217, 9048, 2863, 8553, 3463, 12530, 2006, 1996, 15078, 11213, 2008, 2938, 2515, 2025, 2031, 17505, 1011, 2946, 13782, 1012, 102, 101, 21858, 1010, 2256, 4118, 1997, 2896, 5391, 2075, 1016, 1996, 22480, 9581, 8553, 1997, 18315, 2290, 1011, 2241, 10595, 3081, 18315, 9918, 2003, 1996, 2206, 1024, 2057, 5136, 2092, 1011, 2124, 10470, 10058, 2005, 2029, 6635, 20600, 2003, 27937, 1011, 2524, 1012, 102, 101, 2057, 2265, 2008, 2065, 1037, 18315, 2290, 1011, 2241, 7337, 15796, 2015, 4876, 1996, 15502, 2591, 7574, 1010, 2059, 2009, 2003, 24655, 2135, 13729, 15502, 2135, 1037, 3760, 1010, 2021, 2145, 4659, 2312, 1010, 20600, 3291, 1997, 1996, 2168, 3267, 1011, 2019, 27937, 1011, 2524, 8658, 1012, 102, 101, 2057, 5323, 2023, 2011, 4760, 2008, 1996, 16745, 1997, 13105, 1006, 13571, 2015, 1997, 5167, 1007, 2641, 2011, 1996, 18315, 2290, 1011, 2241, 7337, 1000, 27271, 2015, 1000, 1037, 4659, 2312, 16745, 1997, 1996, 5167, 29625, 8162, 3463, 19515, 1996, 2034, 15078, 11619, 2896, 19202, 2005, 18315, 2290, 1011, 2241, 10595, 1010, 1998, 3606, 3993, 10595, 1999, 102, 101, 1999, 2755, 1010, 2057, 2265, 2008, 1999, 2070, 10470, 4372, 1011, 1015, 2011, 1037, 13571, 1999, 2023, 3259, 2057, 2812, 2019, 3641, 1047, 1011, 10722, 10814, 1997, 4487, 2015, 5558, 18447, 16745, 2015, 2029, 1010, 2174, 1010, 2089, 2025, 15095, 1996, 5304, 1012, 102, 101, 1016, 2057, 2224, 1996, 2744, 2896, 5391, 2004, 1037, 2236, 4431, 2000, 2019, 27118, 9397, 3217, 9048, 2863, 8553, 2765, 1012, 102, 101, 6516, 1010, 1037, 2896, 5391, 1997, 1015, 1016, 2965, 1006, 2004, 2057, 2024, 2559, 2012, 1037, 20446, 3989, 3291, 1007, 2008, 2053, 20167, 2488, 2084, 1015, 1016, 2003, 2825, 1012, 102, 101, 2023, 2224, 2003, 2714, 2000, 2008, 1997, 2038, 17713, 1999, 1031, 2484, 1033, 1012, 102, 101, 6819, 4948, 8163, 2122, 3463, 2941, 6611, 2000, 2035, 3606, 3993, 13792, 1012, 102, 101, 2057, 19141, 2256, 5461, 3081, 1016, 1011, 7226, 4063, 22863, 23207, 4818, 10470, 2015, 1012, 102, 101, 2009, 2003, 2036, 2256, 6772, 2008, 1996, 9366, 1997, 1996, 18315, 9812, 1997, 1047, 1011, 10722, 21112, 1997, 4487, 2015, 5558, 18447, 4520, 2003, 1997, 2981, 3037, 1010, 1998, 6083, 2116, 2047, 1998, 10990, 3471, 1999, 22863, 23207, 6558, 1012, 102, 101, 22863, 23207, 4818, 10470, 2015, 2031, 2042, 8077, 3273, 1999, 2119, 1996, 5543, 1998, 1996, 3274, 2671, 3906, 1031, 1023, 29623, 12521, 29623, 17134, 1033, 1012, 102, 101, 2009, 2003, 2124, 2008, 2065, 1996, 18394, 1997, 1996, 7226, 13375, 2024, 16591, 20623, 2059, 2053, 5377, 20167, 21879, 2024, 9353, 4048, 13331, 3468, 1006, 1999, 17505, 2051, 1007, 1031, 2382, 29623, 19481, 1033, 1012, 102, 101, 6516, 1010, 2172, 2470, 2038, 2042, 7422, 2000, 1996, 8993, 1997, 9259, 2006, 7226, 13375, 1005, 18394, 2008, 3499, 2005, 2204, 20167, 2015, 1010, 1041, 29625, 2290, 29625, 1010, 2005, 4942, 4215, 23194, 3512, 1010, 1998, 4942, 5302, 8566, 8017, 1010, 18394, 5377, 20167, 21879, 2031, 2042, 4663, 1031, 2385, 29623, 15136, 29623, 17465, 29623, 19317, 29623, 24594, 29623, 22932, 1033, 1012, 102, 101, 1999, 5688, 1010, 1996, 2124, 3606, 3993, 20167, 13792, 2005, 2122, 4280, 2031, 2512, 29624, 8663, 12693, 2102, 20167, 21879, 1031, 2403, 29623, 16048, 29623, 16576, 1033, 1012, 102, 101, 2009, 2003, 3373, 2008, 2023, 6578, 2089, 2022, 2349, 2000, 1996, 15078, 10859, 9770, 2011, 1996, 3606, 20938, 9095, 1012, 102, 101, 2174, 1010, 2000, 3058, 1010, 2023, 6772, 3464, 4895, 21572, 8159, 1012, 102, 101, 1999, 3327, 1010, 2053, 15078, 11619, 2896, 19202, 2005, 3606, 3993, 10595, 2005, 22863, 23207, 4818, 10470, 2015, 2024, 2124, 29625, 7903, 21638, 3240, 1011, 8359, 1011, 21695, 1006, 18315, 2290, 1007, 10595, 1031, 4724, 29623, 14526, 29623, 21926, 1033, 1010, 2315, 2044, 2037, 2093, 12235, 2015, 1010, 2024, 1996, 8050, 6028, 1999, 7337, 2640, 2005, 29290, 3606, 3993, 9164, 1997, 6143, 6074, 1012, 102, 101, 9152, 8791, 1998, 6902, 2368, 1031, 3943, 29623, 22022, 1033, 2020, 1996, 2034, 2000, 5136, 1996, 15078, 3314, 3378, 2007, 1996, 18315, 2290, 6028, 1012, 102, 101, 1999, 3327, 1010, 1031, 3943, 1033, 11859, 1996, 9366, 1997, 18315, 2290, 1011, 2241, 10595, 1012, 102, 101, 18315, 2290, 1011, 2241, 10595, 2031, 10003, 2000, 2022, 6179, 1999, 12697, 20167, 13792, 2005, 22863, 23207, 4818, 10470, 2015, 1031, 2385, 29623, 17788, 1033, 1012, 102, 101, 1999, 2755, 1010, 1996, 2190, 2124, 1006, 28283, 25300, 10074, 1007, 3606, 3993, 20167, 21879, 2005, 22863, 23207, 4818, 10470, 2015, 2020, 4663, 3081, 18315, 2290, 1011, 2241, 10595, 1031, 2385, 29623, 17788, 1033, 1006, 2007, 1996, 3862, 6453, 1997, 2019, 9896, 1999, 1031, 1019, 1033, 2005, 1996, 2553, 2008, 2116, 24473, 2015, 1997, 2169, 8875, 4839, 1007, 1012, 102, 101, 9308, 1010, 2474, 5737, 1010, 14163, 29618, 9453, 2213, 1998, 9152, 8791, 1031, 2676, 1033, 2031, 3491, 2008, 1999, 3056, 5875, 3572, 18315, 2290, 1011, 2241, 10595, 2024, 7687, 1996, 2069, 3606, 3993, 10595, 1006, 2156, 2036, 1031, 2539, 1033, 1007, 1012, 102, 101, 2079, 2497, 17168, 5488, 1998, 9152, 8791, 1031, 2321, 1033, 26176, 1996, 3291, 1997, 13946, 27118, 9397, 3217, 9048, 2863, 8553, 3463, 2005, 18315, 18259, 11022, 2094, 10595, 2011, 2635, 1037, 4807, 11619, 1031, 3429, 29623, 23833, 1033, 3921, 1012, 102, 101, 6516, 1010, 1999, 1996, 10906, 2641, 1999, 1031, 2321, 1033, 1010, 2009, 2003, 5071, 2008, 2169, 7226, 4063, 2038, 2019, 27258, 2135, 2312, 5164, 1997, 18394, 1006, 1999, 1996, 2193, 1997, 5167, 1007, 1012, 102, 101, 2174, 1010, 2613, 1011, 2166, 16852, 17552, 18636, 1996, 11213, 2008, 7226, 13375, 1005, 18394, 2024, 27258, 1999, 2946, 1012, 102, 101, 2256, 26721, 25572, 8553, 3463, 3066, 2007, 7226, 4063, 18394, 2008, 2024, 10514, 14693, 12273, 14626, 2649, 1010, 1998, 3568, 14396, 2000, 15078, 11619, 1012, 102, 101, 2947, 1010, 2256, 5461, 9585, 2149, 2000, 6011, 2896, 19202, 2130, 2005, 1996, 2590, 2553, 1999, 2029, 7226, 13375, 1005, 18394, 2064, 2022, 9530, 18380, 2135, 3421, 29625, 10760, 4434, 2090, 1996, 18315, 9812, 1998, 18315, 2290, 1011, 2241, 10595, 2001, 5159, 1999, 1031, 4029, 1033, 1010, 2073, 1037, 2236, 1006, 1045, 29625, 2063, 29625, 1010, 2025, 7775, 2000, 102, 101, 1996, 4106, 1999, 1031, 4029, 1033, 2001, 3344, 2041, 2306, 1996, 3115, 18315, 7705, 1010, 1998, 2061, 2009, 13538, 2006, 4493, 10394, 1006, 8419, 1010, 1996, 7842, 13094, 1011, 2016, 14431, 3393, 14760, 1031, 4464, 29623, 23632, 1033, 1998, 2049, 4013, 3676, 27965, 4588, 2544, 2349, 2000, 19128, 15444, 1031, 1015, 1033, 1007, 1012, 102, 101, 2000, 5047, 1996, 4310, 4087, 7860, 13686, 2011, 22863, 23207, 4818, 10470, 2015, 1006, 4919, 1010, 1996, 2755, 2008, 1996, 5304, 1997, 5167, 2003, 13571, 2098, 2090, 1996, 7226, 13375, 1007, 2047, 10394, 2003, 3223, 1012, 102, 101, 5262, 1010, 2256, 6028, 2064, 2022, 10009, 2004, 2019, 5331, 1997, 1996, 7842, 13094, 1011, 2016, 14431, 3393, 14760, 2000, 1996, 2553, 1997, 13571, 2015, 1006, 3393, 14760, 1016, 29625, 12521, 1999, 10819, 29625, 1016, 1007, 1012, 102, 101, 2081, 2090, 1996, 1996, 18315, 9812, 1998, 1996, 22480, 9581, 8553, 1997, 22863, 23207, 4818, 10470, 2015, 1012, 102, 101, 3525, 2000, 2023, 2147, 1031, 3590, 1033, 1010, 20934, 2818, 11263, 17875, 1998, 8529, 6962, 1031, 2184, 1033, 1010, 1998, 1010, 9174, 1010, 8655, 26837, 3802, 2632, 29625, 1031, 2322, 1033, 1010, 13949, 2256, 3463, 3081, 14305, 1997, 2256, 5461, 1012, 102, 101, 4919, 1010, 2119, 2573, 2265, 2008, 2053, 5377, 20167, 21879, 2024, 9353, 4048, 13331, 3468, 2005, 1050, 1011, 7226, 4063, 2553, 1997, 1996, 22863, 23207, 4818, 10470, 4044, 2057, 6848, 1999, 10819, 29625, 1017, 1010, 2947, 13946, 1037, 22647, 2057, 3591, 1999, 1031, 3590, 1033, 1012, 102, 101, 1996, 5461, 1999, 2122, 2048, 2573, 2024, 3243, 2367, 1010, 2004, 2057, 4780, 6848, 2917, 29625, 5643, 1997, 1996, 2364, 7860, 1999, 7149, 2007, 13571, 2015, 1997, 5167, 2003, 1996, 6061, 1997, 14477, 7174, 12921, 5167, 1006, 2004, 2057, 4618, 2101, 4863, 1007, 1012, 102, 101, 2256, 2896, 19202, 2005, 18315, 2290, 1011, 2241, 10595, 2991, 2046, 2048, 7236, 1024, 1006, 1015, 1007, 2896, 19202, 2008, 11160, 2006, 1996, 11213, 2008, 1996, 10470, 11510, 2035, 24755, 4570, 2035, 5167, 1012, 102, 101, 1006, 1016, 1007, 2896, 19202, 2005, 1996, 2236, 2553, 2008, 5167, 2089, 3961, 14477, 7174, 12921, 1012, 102, 101, 2096, 2553, 1006, 1015, 1007, 12939, 1037, 19647, 2224, 1997, 1996, 7842, 13094, 1011, 2016, 14431, 3393, 14760, 1010, 2553, 1006, 1016, 1007, 5942, 11907, 10394, 29625, 10760, 2147, 1997, 8655, 26837, 3802, 2632, 29625, 1031, 2322, 1033, 12919, 2015, 2256, 3463, 2005, 2553, 1006, 1016, 1007, 3081, 1037, 12266, 1998, 11259, 2236, 3989, 1997, 2256, 6947, 5461, 1012, 102, 101, 1996, 2364, 12760, 1999, 1996, 6947, 1999, 1031, 2322, 1033, 2024, 1024, 1006, 1045, 1007, 2019, 21800, 1997, 1996, 7842, 13094, 1011, 2016, 14431, 3393, 14760, 2008, 12374, 4520, 1997, 7704, 1047, 1011, 22276, 2015, 1010, 2236, 6026, 2256, 3393, 14760, 1016, 29625, 12521, 1010, 2008, 2064, 2022, 5240, 2004, 1996, 2553, 1997, 7704, 1016, 1011, 22276, 2015, 1012, 102, 101, 1006, 2462, 1007, 2256, 2896, 19202, 2024, 2241, 2006, 1037, 3074, 1997, 4520, 2107, 2008, 2296, 3940, 1997, 2068, 2024, 1000, 28038, 1011, 2485, 2000, 28721, 1000, 1006, 2156, 9872, 1016, 29625, 16932, 1007, 1012, 102, 101, 1031, 2322, 1033, 2131, 22147, 2099, 2896, 19202, 2011, 6195, 6407, 1997, 4520, 2107, 2008, 2296, 1011, 10722, 10814, 1997, 2068, 2024, 28038, 1011, 2485, 2000, 28721, 29625, 25987, 11263, 17875, 1998, 8529, 6962, 1031, 2184, 1033, 9462, 1996, 3291, 1997, 14477, 7174, 12921, 5167, 3081, 1037, 12266, 1000, 7312, 1000, 2013, 2553, 1006, 1016, 1007, 2000, 2553, 1006, 102, 101, 2027, 2224, 1037, 10320, 6685, 2008, 3065, 2008, 1010, 2005, 2151, 18315, 2290, 1011, 2241, 7337, 2008, 6855, 2015, 1037, 1000, 2204, 1000, 20167, 6463, 1010, 2045, 2442, 2022, 1037, 16286, 2312, 16745, 1997, 5167, 2008, 2024, 3929, 11095, 1999, 27258, 2135, 2116, 2367, 3971, 1012, 102, 101, 2023, 12939, 2019, 14958, 4646, 1997, 1996, 7842, 13094, 1011, 2016, 14431, 3393, 14760, 1012, 102, 101, 1999, 10819, 29625, 1016, 2057, 2556, 2256, 3921, 2000, 20253, 1996, 18315, 9812, 1997, 13571, 2015, 1012, 102, 101, 1999, 10819, 29625, 1017, 2057, 6011, 2256, 27118, 9397, 3217, 9048, 2863, 8553, 3463, 2005, 22863, 23207, 4818, 10470, 2015, 1012, 102, 101, 2057, 16519, 1998, 2556, 2330, 3980, 1999, 10819, 29625, 1018, 1012, 102, 101, 1996, 2364, 27630, 1999, 22863, 23207, 4818, 10470, 2015, 12402, 2013, 1996, 2755, 2008, 1996, 13105, 2024, 13571, 2015, 1997, 1996, 2275, 1997, 5167, 1012, 102, 101, 20167, 13792, 2005, 22863, 23207, 4818, 10470, 2015, 2064, 2022, 2245, 1997, 2004, 4972, 2008, 4949, 7226, 13375, 1005, 18394, 2000, 13571, 2015, 1997, 5167, 1012, 102, 101, 2023, 9587, 29068, 8520, 2256, 5331, 1997, 1996, 3115, 9366, 1997, 18315, 9812, 2000, 1996, 18315, 9812, 1997, 13571, 2015, 1012, 102, 101, 2023, 2930, 7534, 2023, 9366, 1997, 18315, 9812, 1998, 2896, 5391, 2075, 5461, 1012, 102, 101, 1999, 10819, 29625, 1017, 2057, 17445, 2023, 10394, 2000, 6011, 15078, 11619, 2896, 19202, 2005, 22863, 23207, 4818, 10470, 2015, 1012, 102, 101, 2057, 3579, 2006, 13571, 2015, 2008, 8676, 1997, 2048, 4487, 2015, 5558, 18447, 16745, 2015, 1006, 2256, 15182, 2064, 4089, 2022, 3668, 2000, 1047, 1011, 10722, 21112, 1007, 1012, 102, 101, 2256, 5337, 6210, 1997, 1037, 13571, 1997, 1037, 5304, 2003, 1996, 2206, 1024, 6210, 1016, 29625, 2487, 1006, 13571, 2015, 1007, 1037, 13571, 1056, 1027, 1006, 1056, 1015, 1010, 1056, 1016, 1007, 1997, 1037, 5304, 1057, 1027, 1063, 1015, 1010, 2133, 1010, 1049, 1065, 2003, 1037, 3940, 1997, 2048, 4487, 2015, 5558, 18447, 16745, 2015, 1997, 1057, 102, 101, 11949, 2008, 2057, 2079, 2025, 5478, 2008, 2296, 5783, 1999, 1996, 5304, 3711, 1999, 2028, 1997, 1996, 2048, 4487, 2015, 5558, 18447, 16745, 2015, 2008, 2433, 1037, 13571, 1012, 102, 101, 2023, 6210, 1997, 13571, 2015, 2097, 2101, 9585, 2149, 2000, 4769, 10232, 5919, 1997, 22863, 23207, 4818, 10470, 2015, 1012, 102, 101, 2057, 6523, 2000, 13571, 2015, 2008, 2079, 15095, 1996, 5304, 1006, 1045, 29625, 2063, 29625, 1010, 3104, 2035, 3787, 1999, 1996, 5304, 1007, 2004, 1000, 5266, 13571, 2015, 1000, 1006, 2057, 4618, 6523, 2000, 2025, 1011, 9352, 1011, 5266, 13571, 2015, 2004, 1000, 2236, 13571, 2015, 1000, 1007, 1012, 102, 101, 6210, 1016, 29625, 2475, 1006, 5266, 13571, 2015, 1007, 1037, 13571, 1006, 1056, 1015, 1010, 1056, 1016, 1007, 1997, 1037, 5304, 1057, 2003, 2056, 2000, 3104, 1057, 2065, 1056, 1015, 1605, 1056, 1016, 1027, 1057, 1012, 102, 101, 1039, 1006, 1057, 1007, 2003, 4225, 2000, 2022, 1996, 2275, 1997, 2035, 13571, 2015, 2008, 3104, 1057, 1012, 102, 101, 2005, 2296, 16745, 1041, 1997, 1037, 5304, 1057, 1010, 2057, 2064, 9375, 1006, 1999, 2019, 19639, 2126, 1007, 2054, 1037, 13571, 1997, 1041, 2003, 1010, 1998, 19090, 2011, 1052, 1006, 1041, 1007, 1996, 2275, 1997, 2035, 13571, 2015, 1997, 1041, 1998, 2011, 1039, 1006, 1041, 1007, 1996, 2275, 1997, 2035, 13571, 2015, 102, 101, 2005, 2151, 3074, 1997, 13571, 2015, 1054, 1611, 1052, 1006, 1057, 1007, 2057, 9375, 1054, 1005, 2015, 13996, 2006, 1041, 1611, 1057, 1010, 1054, 1064, 1041, 1010, 2000, 2022, 1054, 1064, 1041, 1027, 1063, 1006, 1056, 1015, 1010, 1056, 1016, 1007, 1064, 100, 1006, 1055, 1015, 1010, 1055, 1016, 1007, 1596, 1054, 102, 101, 11949, 2008, 2065, 1037, 13571, 1006, 1055, 1015, 1010, 1055, 1016, 1007, 1997, 1041, 1611, 1057, 2003, 1999, 1039, 1006, 1041, 1007, 1010, 2059, 2005, 2151, 1041, 1611, 1041, 1006, 1055, 1015, 1010, 1055, 1016, 1007, 1064, 1041, 1596, 1039, 1006, 1041, 1007, 1012, 102, 101, 2057, 2024, 2085, 3201, 2000, 9375, 1996, 21951, 1997, 21797, 1998, 18315, 9812, 1999, 2256, 6123, 1024, 1054, 1611, 1052, 1006, 1057, 1007, 2065, 1039, 1006, 1041, 1007, 1611, 1054, 1064, 1041, 1012, 102, 101, 11949, 2008, 2008, 2065, 1041, 1611, 1057, 2003, 10909, 2011, 1037, 3074, 1997, 13571, 2015, 1054, 1611, 1052, 1006, 1057, 1007, 2059, 2061, 2024, 2035, 16745, 2015, 1997, 1041, 29625, 6210, 1016, 29625, 2629, 1006, 18315, 9812, 1007, 1996, 18315, 9812, 1058, 1039, 1006, 1054, 1007, 1997, 1037, 3074, 1997, 13571, 2015, 1054, 1611, 1052, 1006, 102, 101, 21858, 1010, 1037, 3074, 1054, 1997, 13571, 2015, 2003, 1155, 1011, 15796, 2065, 1010, 2005, 2296, 13571, 1055, 1997, 1996, 5304, 1006, 2025, 9352, 1999, 1054, 1007, 1010, 2045, 2003, 2070, 13571, 1999, 1054, 2008, 2003, 1000, 2025, 2521, 1000, 1006, 1999, 3408, 1997, 1155, 1007, 2013, 1055, 1012, 102, 101, 2057, 2024, 4699, 1999, 1996, 4434, 2090, 1996, 3643, 1997, 1155, 1997, 2019, 1155, 1011, 15796, 3074, 1997, 13571, 2015, 1998, 2049, 18315, 9812, 1012, 102, 101, 2023, 2097, 2377, 1037, 2350, 2535, 1999, 1996, 6947, 2015, 1997, 2256, 3463, 2005, 22863, 23207, 4818, 10470, 2015, 29625, 3207, 16294, 22753, 1015, 1006, 1155, 1011, 15796, 6407, 1997, 13571, 2015, 1007, 2292, 1054, 2022, 1037, 3074, 1997, 13571, 2015, 1997, 1037, 5304, 1057, 1012, 102, 101, 1054, 2003, 2056, 2000, 2022, 1155, 1011, 15796, 2065, 2005, 2296, 13571, 1055, 1027, 1006, 1055, 1015, 1010, 1055, 1016, 1007, 1596, 1052, 1006, 1057, 1007, 2045, 6526, 2070, 13571, 2102, 1027, 1006, 1056, 1015, 1010, 1056, 1016, 1007, 1596, 1054, 2107, 2008, 1064, 1055, 1015, 1604, 1056, 1015, 1064, 1009, 102, 101, 2043, 7149, 2007, 6407, 1997, 5266, 13571, 2015, 2009, 2003, 2825, 2000, 2224, 4493, 18315, 10394, 2000, 2896, 5391, 2037, 18315, 9812, 1012, 102, 101, 4919, 1010, 1037, 19647, 4646, 1997, 1996, 7842, 13094, 1011, 2016, 14431, 3393, 14760, 1031, 4464, 29623, 23632, 1033, 12748, 2008, 1024, 3393, 14760, 1016, 29625, 2575, 1006, 2896, 5391, 2075, 1996, 18315, 9812, 1997, 5266, 13571, 2015, 1007, 2005, 2296, 1054, 1611, 1039, 1006, 1057, 1007, 2009, 4324, 2008, 1058, 1039, 1006, 1054, 1007, 1027, 1179, 1006, 8833, 1064, 102, 101, 6947, 1024, 2292, 1054, 1015, 1027, 1063, 1055, 1015, 1064, 100, 1055, 1016, 1055, 29625, 2102, 29625, 1006, 1055, 1015, 1010, 1055, 1016, 1007, 1596, 1054, 1065, 1012, 102, 101, 2138, 1054, 2069, 3774, 1997, 5266, 13571, 2015, 2009, 2442, 2022, 2008, 1064, 1054, 1015, 1064, 1027, 1064, 1054, 1064, 1012, 102, 101, 2057, 2085, 9131, 1996, 7842, 13094, 1011, 2016, 14431, 3393, 14760, 1024, 3393, 14760, 1016, 29625, 2581, 1006, 1031, 4464, 29623, 23632, 1033, 1007, 2005, 2151, 2155, 1062, 1997, 16745, 2015, 1997, 1037, 5304, 1057, 1010, 2045, 2003, 1037, 16745, 1041, 1997, 1057, 1997, 2946, 1162, 1006, 8833, 1064, 1062, 1064, 8833, 1064, 1057, 1064, 1007, 2107, 2008, 2005, 102, 101, 1996, 2755, 2008, 2035, 13571, 2015, 1999, 1054, 2024, 5266, 13571, 2015, 2085, 3202, 12748, 2008, 1058, 1039, 1006, 1054, 1007, 1027, 1179, 1006, 8833, 1064, 1054, 1015, 1064, 8833, 1064, 1057, 1064, 1007, 1027, 1179, 1006, 8833, 1064, 1054, 1064, 8833, 1064, 1057, 1064, 1007, 1012, 102, 101, 3393, 14760, 1016, 29625, 2575, 12939, 2149, 2000, 6011, 1037, 2896, 19202, 2006, 1996, 18315, 9812, 1997, 1006, 1015, 1016, 1009, 1007, 1011, 15796, 6407, 1997, 5266, 13571, 2015, 29625, 10760, 5686, 2213, 1016, 29625, 2620, 2292, 1054, 1611, 1039, 1006, 1057, 1007, 1012, 102, 101, 2065, 1054, 2003, 1006, 1015, 1016, 1009, 1007, 1011, 15796, 1006, 2005, 2151, 2235, 5377, 1028, 1014, 1007, 2059, 2045, 6526, 2070, 5377, 1155, 1028, 1014, 2107, 2008, 1058, 1039, 1006, 1054, 1007, 1609, 1049, 1155, 1012, 102, 101, 6947, 1024, 1031, 11080, 1033, 2057, 2224, 1037, 4013, 3676, 27965, 4588, 2810, 6685, 1024, 5136, 1037, 13571, 1997, 1057, 1010, 1055, 1027, 1006, 1055, 1015, 1010, 1055, 1016, 1007, 1010, 2008, 2003, 4217, 1010, 27423, 2012, 6721, 1010, 2041, 1997, 2035, 2825, 13571, 2015, 1999, 1039, 1006, 1057, 1007, 1012, 102, 101, 11949, 2008, 1006, 2011, 1996, 24188, 3630, 4246, 19202, 1007, 1010, 2005, 2296, 13571, 1056, 1027, 1006, 1056, 1015, 1010, 1056, 1016, 1007, 1596, 1054, 1010, 1996, 9723, 2008, 1064, 1055, 1015, 1604, 1056, 1015, 1064, 1009, 1064, 1055, 1016, 1604, 1056, 1016, 1064, 1609, 1006, 1015, 1016, 1009, 1007, 1006, 1064, 102, 101, 2057, 2064, 2085, 6611, 3393, 14760, 1016, 29625, 2575, 2000, 16519, 1996, 6947, 1012, 102, 101, 11949, 2008, 1996, 6947, 3393, 14760, 1016, 29625, 2575, 4600, 13538, 2006, 1996, 2755, 2008, 1996, 13571, 2015, 2641, 2020, 5266, 13571, 2015, 1012, 102, 101, 7149, 2007, 6407, 1997, 2236, 13571, 2015, 26785, 7971, 17570, 2015, 1996, 2458, 1997, 2367, 5461, 2005, 2896, 5391, 2075, 1996, 18315, 9812, 1012, 102, 101, 2057, 4618, 2085, 2556, 2107, 1037, 4118, 1010, 2008, 2064, 2022, 5240, 2004, 2019, 5331, 1997, 1996, 7842, 13094, 1011, 2016, 14431, 3393, 14760, 1031, 4464, 29623, 23632, 1033, 2000, 1996, 2553, 1997, 6407, 1997, 2236, 13571, 2015, 1024, 6210, 1016, 29625, 2683, 1006, 3292, 2090, 13571, 2015, 1007, 2445, 1037, 5304, 1057, 1010, 2048, 13571, 2015, 1999, 1052, 1006, 102, 101, 2256, 3117, 8089, 2003, 2008, 1996, 2168, 6947, 5656, 12033, 2007, 2256, 2047, 6210, 1997, 3292, 29625, 2102, 1015, 1010, 1056, 1016, 1007, 1010, 2024, 2056, 2000, 2022, 1038, 1011, 2521, 1006, 2030, 2012, 3292, 1038, 1007, 2065, 1064, 1056, 1015, 1604, 1056, 1016, 1064, 1009, 1064, 1056, 1015, 1604, 1056, 1016, 102, 101, 2057, 4299, 2000, 6011, 2008, 1056, 1006, 1010, 1047, 1010, 1049, 1007, 1609, 1047, 1155, 1010, 2005, 2070, 5377, 1155, 1028, 1014, 1012, 102, 101, 2057, 4618, 5391, 1056, 1006, 1010, 1047, 1010, 1049, 1007, 2011, 15946, 1006, 4618, 3961, 4964, 2802, 1996, 6947, 1998, 1996, 15946, 2003, 2006, 1047, 1998, 1049, 1007, 1012, 102, 101, 2292, 1054, 2022, 2070, 3074, 1997, 13571, 2015, 2004, 1999, 1996, 4861, 1997, 1996, 3393, 14760, 1012, 102, 101, 12098, 16313, 19848, 6588, 13571, 1054, 2046, 7689, 1012, 102, 101, 2144, 1996, 13571, 2015, 2008, 2191, 2039, 2169, 3940, 2024, 2012, 2560, 1049, 1011, 2521, 2045, 2442, 4839, 1006, 3081, 3722, 10320, 1007, 2019, 5783, 1041, 1596, 1057, 1010, 2107, 2008, 1999, 2012, 2560, 1047, 1016, 7689, 1006, 1056, 1015, 1010, 1056, 1016, 1007, 1010, 1006, 1056, 1015, 1010, 1056, 1016, 102, 101, 2292, 1054, 1611, 1054, 2022, 1996, 3074, 1997, 2035, 13571, 2015, 1006, 1056, 1015, 1010, 1056, 1016, 1007, 1999, 1054, 1999, 2029, 1041, 1596, 1056, 1015, 1012, 102, 101, 2292, 1054, 1611, 1054, 2022, 1996, 3074, 1997, 2035, 13571, 2015, 1006, 1056, 1015, 1010, 1056, 1016, 1007, 1999, 1054, 1999, 2029, 1041, 1596, 1056, 1016, 1012, 102, 101, 2011, 1996, 9918, 2682, 2057, 2024, 12361, 2008, 1064, 1054, 1064, 1609, 1047, 1016, 1998, 1064, 1054, 1064, 1609, 1047, 1016, 1012, 102, 101, 2292, 1045, 2022, 2035, 1996, 16745, 2015, 1997, 1057, 2008, 2024, 10909, 2011, 1054, 1012, 102, 101, 2057, 4299, 2000, 2896, 5391, 1064, 1045, 1064, 1012, 102, 101, 2292, 1054, 1597, 1041, 2022, 2035, 1996, 13571, 2015, 1997, 1057, 1032, 1063, 1041, 1065, 2057, 2131, 2011, 9268, 1041, 2013, 1056, 1015, 2005, 2296, 13571, 1006, 1056, 1015, 1010, 1056, 1016, 1007, 1596, 1054, 1012, 102, 101, 2292, 1045, 2022, 2035, 1996, 16745, 2015, 1997, 1057, 1032, 1063, 1041, 1065, 10909, 2011, 1054, 1597, 1041, 1012, 102, 101, 2004, 2045, 2024, 2012, 2560, 1047, 1016, 4520, 1999, 1054, 1010, 2011, 6210, 1064, 1045, 1064, 1609, 1056, 1006, 1010, 1047, 1016, 1010, 1049, 1597, 1015, 1007, 1012, 102, 101, 6660, 1010, 2292, 1054, 1597, 1041, 2022, 2035, 1996, 13571, 2015, 1997, 1057, 1032, 1063, 1041, 1065, 2057, 2131, 2011, 9268, 1041, 2013, 1056, 1015, 2005, 2296, 13571, 1006, 1056, 1015, 1010, 1056, 1016, 1007, 1596, 1054, 1012, 102, 101, 2292, 1045, 2022, 2035, 1996, 16745, 2015, 1997, 1057, 1032, 1063, 1041, 1065, 10909, 2011, 1054, 1597, 1041, 1012, 102, 101, 2004, 2045, 2024, 2012, 2560, 1047, 1016, 4520, 1999, 1054, 1010, 2011, 6210, 1064, 1045, 1064, 1609, 1056, 1006, 1010, 1047, 1016, 1010, 1049, 1597, 1015, 1007, 1012, 102, 101, 2057, 4366, 2008, 1064, 1045, 1064, 1609, 1064, 1045, 1064, 1009, 1064, 1045, 1064, 1012, 102, 101, 2000, 2156, 2339, 2023, 2003, 2995, 5136, 1996, 2206, 6685, 1024, 2035, 4520, 1999, 1045, 1032, 1045, 1998, 1999, 1045, 1032, 1045, 2024, 5664, 1998, 7141, 2000, 1045, 29625, 2292, 1055, 2022, 1037, 2275, 1999, 1045, 1604, 1045, 1012, 102, 101, 11949, 2008, 2023, 2965, 2008, 2025, 2069, 2003, 1055, 1999, 1045, 1010, 2021, 2061, 2003, 1055, 1605, 1063, 1041, 1065, 1012, 102, 101, 2061, 1010, 1045, 1609, 1064, 1045, 1032, 1045, 1064, 1009, 1064, 1045, 1032, 1045, 1064, 1009, 1016, 1064, 1045, 1604, 1045, 1064, 1027, 1064, 1045, 1064, 1009, 1064, 1045, 1064, 1012, 102, 101, 6516, 1010, 1056, 1006, 1010, 1047, 1010, 1049, 1007, 1609, 1016, 1095, 1056, 1006, 1010, 1047, 1016, 1010, 1049, 1597, 1015, 1007, 1012, 102, 101, 2057, 2085, 2224, 1996, 15946, 10744, 2000, 16519, 1996, 6947, 29625, 16930, 2863, 1016, 29625, 12521, 1998, 8089, 1016, 29625, 14526, 19515, 1996, 2206, 2590, 2522, 28402, 5649, 1024, 2522, 28402, 5649, 1016, 29625, 17134, 2005, 2296, 5377, 1155, 1028, 1014, 1010, 1998, 1006, 12949, 2235, 1007, 5377, 1028, 1014, 1010, 2045, 6526, 1037, 1156, 1028, 1014, 2107, 2008, 1010, 2065, 1054, 1611, 102, 101, 2057, 4618, 2085, 6848, 1996, 4434, 2090, 1996, 3643, 1997, 1155, 1997, 2019, 1155, 1011, 15796, 3074, 1997, 13571, 2015, 1998, 2049, 18315, 9812, 1012, 102, 101, 2057, 6011, 1996, 2206, 9872, 1024, 9872, 1016, 29625, 16932, 2292, 1054, 1611, 1052, 1006, 1057, 1007, 1012, 102, 101, 2065, 1054, 2003, 1006, 1017, 1018, 1009, 1007, 1011, 15796, 1006, 2005, 2151, 5377, 1028, 1014, 1007, 2059, 2045, 6526, 2070, 5377, 1155, 1028, 1014, 2107, 2008, 1058, 1039, 1006, 1054, 1007, 1609, 1049, 1155, 1012, 102, 101, 6947, 1024, 2000, 6011, 1996, 9872, 2057, 2224, 1996, 2206, 4366, 1024, 4366, 1016, 29625, 16068, 2005, 2296, 2235, 5377, 1158, 1028, 1014, 1010, 2045, 2003, 1037, 2155, 1042, 1997, 13571, 2015, 1006, 1056, 1015, 1010, 1056, 1016, 1007, 1999, 1039, 1006, 1031, 1049, 1033, 1007, 1998, 1037, 5377, 1155, 1028, 1014, 2107, 102, 101, 2057, 2097, 6011, 1996, 4366, 2005, 13571, 2015, 1056, 1027, 1006, 1056, 1015, 1010, 1056, 1016, 1007, 2073, 2102, 1015, 1605, 1056, 1016, 1027, 1031, 1049, 1033, 1012, 102, 101, 2005, 2107, 13571, 2015, 1010, 1996, 3292, 2090, 13571, 1056, 1027, 1006, 1056, 1015, 1010, 1056, 1016, 1007, 1998, 1056, 1027, 1006, 1056, 1015, 1010, 1056, 1016, 1007, 2003, 2074, 1996, 2946, 1997, 1996, 19490, 4489, 1997, 1056, 1015, 1998, 1056, 1016, 1012, 102, 101, 1996, 4598, 1997, 1996, 9059, 3074, 2085, 4076, 2013, 1996, 4598, 1997, 2204, 9537, 1010, 2156, 1041, 29625, 2290, 29625, 1031, 4413, 1033, 1012, 102, 101, 2005, 3143, 2791, 2057, 2421, 1996, 3115, 2810, 2000, 2265, 1996, 4598, 1997, 1042, 1012, 102, 101, 2292, 1056, 1027, 1006, 1056, 1015, 1010, 1056, 1016, 1007, 1998, 1056, 1027, 1006, 1056, 1015, 1010, 1056, 1016, 1007, 2022, 2048, 13571, 2015, 1999, 1039, 1006, 1031, 1049, 1033, 1007, 4217, 2012, 6721, 1999, 1996, 2206, 2126, 1024, 2005, 2169, 8875, 1046, 1596, 1031, 1049, 1033, 2057, 5454, 1010, 27423, 102, 101, 6660, 1010, 2057, 5454, 1010, 27423, 2012, 6721, 1010, 3251, 2169, 8875, 1046, 4618, 2022, 2872, 1999, 1056, 1015, 2030, 1056, 1016, 1012, 102, 101, 2478, 3115, 24188, 3630, 4246, 9918, 2009, 2003, 3733, 2000, 2265, 2008, 1996, 9723, 2008, 2045, 2024, 2012, 2560, 1049, 1009, 1158, 1016, 2008, 3711, 1999, 2593, 1056, 1015, 1604, 1056, 1015, 2030, 1056, 1016, 1604, 1056, 1016, 2003, 27258, 2135, 2235, 1999, 1012, 102, 101, 11949, 2008, 2023, 3202, 12748, 1006, 2011, 2256, 6210, 1997, 3292, 1007, 2008, 1996, 9723, 2008, 1996, 3292, 2090, 1056, 1998, 1056, 2003, 2625, 2084, 1015, 1597, 1158, 1016, 1049, 2003, 27258, 2135, 2235, 1045, 1158, 1012, 102, 101, 6516, 1010, 1037, 2155, 1042, 1997, 27258, 2946, 2442, 4839, 29625, 16930, 2863, 1016, 29625, 16048, 2292, 1028, 1014, 1012, 102, 101, 2292, 1054, 1611, 1052, 1006, 1057, 1007, 2107, 2008, 1054, 2003, 1006, 1017, 1018, 1009, 1007, 1011, 15796, 1012, 102, 101, 2059, 1010, 2045, 2003, 1037, 16745, 1997, 1054, 1010, 1054, 1010, 1997, 2946, 27258, 1999, 1049, 2107, 2008, 2296, 2048, 3787, 1997, 1054, 2024, 2012, 2560, 1155, 2213, 1011, 2521, 1006, 2005, 2070, 5377, 1155, 1028, 1014, 1007, 1012, 102, 101, 2011, 4366, 1016, 29625, 16068, 2057, 2113, 2008, 1010, 2005, 2256, 5304, 1997, 1057, 1010, 2045, 6526, 2019, 27258, 1011, 7451, 2155, 1997, 13571, 2015, 1999, 1039, 1006, 1057, 1007, 1010, 1042, 1010, 2107, 2008, 2296, 2048, 13571, 2015, 1999, 1042, 2024, 2012, 2560, 1015, 1597, 1158, 1016, 1049, 1011, 2521, 1006, 2005, 2070, 102, 101, 8081, 2070, 1056, 1010, 1056, 1596, 1042, 1012, 102, 101, 2011, 6210, 1997, 1042, 1010, 1056, 1998, 1056, 2024, 7235, 2069, 2006, 2012, 2087, 1015, 1009, 1158, 1016, 1049, 3787, 1006, 2008, 2003, 1010, 2069, 2005, 2012, 2087, 1015, 1009, 1158, 1016, 1049, 5167, 1046, 1010, 2593, 1046, 1596, 1056, 1015, 1604, 1056, 1015, 2030, 1046, 1596, 1056, 1016, 1604, 102, 101, 2292, 1054, 1056, 1998, 1054, 1056, 5050, 2048, 13571, 2015, 1999, 1054, 2008, 6855, 1017, 1018, 1009, 1000, 20167, 2015, 1000, 2005, 1056, 1998, 1056, 1005, 1010, 4414, 1006, 2138, 1054, 2003, 1006, 1017, 1018, 1009, 1007, 1011, 15796, 2107, 13571, 2015, 2442, 4839, 1007, 1012, 102, 101, 2130, 2065, 2057, 7868, 2008, 2119, 1054, 1056, 1998, 1054, 1056, 2024, 7235, 2006, 2035, 3787, 2006, 2029, 1056, 1998, 1056, 2024, 7235, 1010, 2057, 2024, 2145, 2187, 2007, 1015, 1597, 1158, 1016, 1049, 3787, 1012, 102, 101, 11949, 2008, 2005, 2169, 2107, 5783, 1010, 2065, 1054, 1056, 1998, 1054, 1056, 2024, 7235, 2006, 2009, 1010, 2009, 4324, 2008, 2009, 2064, 2069, 9002, 2000, 1996, 20167, 4663, 2011, 2028, 1997, 2068, 1012, 102, 101, 2023, 12748, 2008, 2000, 6855, 1996, 5763, 20167, 1054, 1056, 1998, 1054, 1056, 2442, 11234, 2006, 3243, 1037, 2843, 1006, 1037, 5377, 12884, 1007, 1997, 1996, 3787, 1999, 1057, 1012, 102, 101, 2023, 1010, 1999, 2735, 1010, 12748, 2008, 2045, 2003, 2070, 1155, 1028, 1014, 2107, 2008, 1054, 1056, 1998, 1054, 1056, 2024, 1155, 2213, 1011, 2521, 29625, 27108, 14511, 5649, 1016, 29625, 17134, 2085, 14730, 1996, 6947, 1997, 1996, 9872, 1012, 102, 101, 1999, 2023, 2930, 2057, 2556, 1996, 4434, 2090, 2256, 3463, 2005, 6407, 1997, 13571, 2015, 1999, 10819, 29625, 1016, 1998, 1996, 3291, 1997, 2591, 1011, 7574, 1011, 20446, 3989, 1999, 22863, 23207, 4818, 10470, 2015, 1012, 102, 101, 2057, 2224, 1996, 18315, 9812, 7705, 2764, 1999, 1996, 3025, 2930, 2000, 2556, 1037, 2236, 6028, 2005, 13946, 15078, 11619, 2896, 19202, 2005, 18315, 2290, 1011, 2241, 10595, 1012, 102, 101, 1016, 1011, 7226, 4063, 22863, 23207, 4818, 10470, 2015, 1012, 102, 101, 2057, 5136, 10470, 10058, 1997, 1996, 2206, 2433, 1024, 2045, 2003, 1037, 2275, 1997, 5167, 1015, 1012, 1012, 1012, 1010, 1049, 2008, 2024, 2853, 2000, 1016, 7226, 13375, 1010, 1015, 1998, 1016, 1012, 102, 101, 2169, 7226, 4063, 1045, 2038, 1037, 2797, 26004, 3853, 1006, 2823, 3432, 3615, 2000, 2004, 1037, 26004, 1007, 1058, 1045, 2008, 24022, 1037, 2512, 2638, 26792, 2613, 3643, 2000, 2296, 16745, 1997, 1996, 5167, 1012, 102, 101, 1058, 1045, 1006, 1055, 1007, 2064, 2022, 5240, 2004, 1045, 1005, 2015, 4555, 19732, 2000, 3477, 2005, 1996, 14012, 1997, 5167, 1055, 29625, 2169, 1058, 1045, 2003, 5071, 2000, 2022, 2512, 3207, 16748, 21369, 3070, 1010, 1045, 29625, 2063, 29625, 1010, 100, 1055, 1611, 1056, 2009, 4324, 2008, 1058, 1045, 1006, 1055, 1007, 1608, 1058, 1045, 1006, 1056, 1007, 102, 101, 1996, 7863, 2003, 2424, 1037, 13571, 1997, 1996, 5167, 1006, 1055, 1015, 1010, 1055, 1016, 1007, 2090, 1996, 2048, 7226, 13375, 2008, 25845, 2015, 1996, 2591, 7574, 1010, 1045, 29625, 2063, 29625, 1010, 1996, 3670, 1173, 1045, 1058, 1045, 1006, 1055, 1045, 1007, 1012, 102, 101, 2009, 2003, 2124, 2008, 23569, 27605, 6774, 1996, 2591, 7574, 3643, 1999, 1016, 1011, 7226, 4063, 22863, 23207, 4818, 10470, 2015, 2003, 15078, 2135, 26721, 23576, 2130, 2005, 2200, 7775, 4280, 1997, 26004, 4972, 1012, 102, 101, 1999, 3327, 1010, 1031, 2756, 1033, 3065, 2008, 2023, 4708, 2003, 27937, 1011, 2524, 2130, 2005, 1996, 3722, 2465, 1997, 13880, 29167, 26004, 2015, 1024, 6210, 1016, 1006, 29167, 26004, 2015, 1007, 1037, 26004, 3853, 1037, 2003, 2056, 2000, 2022, 29167, 2065, 2045, 4839, 2566, 1011, 8875, 5300, 1037, 1045, 2487, 1010, 1012, 102, 101, 1055, 1611, 1031, 1049, 1033, 1010, 1058, 1006, 1055, 1007, 1027, 8117, 1063, 1037, 1006, 1055, 1007, 1010, 1038, 1065, 1012, 102, 101, 29202, 2135, 1010, 1037, 7226, 4063, 2038, 1037, 13880, 29167, 26004, 2065, 2010, 3643, 2005, 2169, 14012, 1997, 5167, 2003, 3432, 1996, 29167, 7680, 1997, 2010, 5300, 2005, 1996, 5167, 1999, 2009, 1010, 2039, 2000, 2070, 4555, 3815, 2002, 2003, 5627, 2000, 5247, 1012, 102, 101, 2023, 2465, 1997, 26004, 2015, 4618, 2022, 2109, 2802, 2023, 2930, 2000, 19141, 2256, 17727, 15094, 13464, 3463, 1006, 2004, 2057, 6614, 2000, 6011, 27118, 9397, 3217, 9048, 2863, 16558, 3012, 3463, 1996, 7775, 2791, 1997, 2023, 2465, 2573, 2000, 2256, 5056, 1007, 1012, 102, 101, 29160, 1011, 1999, 1011, 2846, 10595, 1012, 102, 101, 10595, 2008, 11160, 2006, 1996, 18315, 2290, 6028, 2000, 5676, 3606, 20938, 1006, 18315, 2290, 1011, 2241, 10595, 1007, 2024, 2124, 2000, 2031, 1996, 6179, 22863, 23207, 4818, 3200, 1997, 2108, 29160, 1011, 1999, 1011, 2846, 1031, 2321, 29623, 22394, 29623, 24434, 1033, 1024, 1017, 29160, 1011, 1999, 1011, 2846, 10595, 2024, 10595, 2008, 2467, 3599, 23569, 27605, 4371, 2058, 1037, 102, 101, 1999, 2256, 6123, 1010, 2023, 2965, 2008, 2005, 2296, 29160, 1011, 1999, 1011, 2846, 7337, 1049, 2045, 6526, 2070, 1054, 1049, 1611, 1052, 1006, 1031, 1049, 1033, 1007, 2107, 2008, 1049, 2467, 27852, 2019, 15502, 9560, 1999, 1054, 1049, 1006, 2007, 4847, 2000, 2591, 1011, 7574, 20446, 3989, 1007, 1012, 102, 101, 2057, 6523, 2000, 1054, 1049, 2004, 1049, 1005, 2015, 2846, 29625, 3207, 16294, 22753, 1018, 1006, 29160, 1011, 1999, 1011, 2846, 10595, 1007, 1037, 7337, 1049, 2003, 29160, 1011, 1999, 1011, 2846, 2065, 2045, 2003, 1037, 3074, 1997, 13571, 2015, 1054, 1049, 1611, 1052, 1006, 1031, 1049, 1033, 1007, 2107, 2008, 2005, 2296, 3940, 1997, 26004, 2015, 102, 101, 2009, 2003, 2113, 2008, 2296, 29160, 1011, 1999, 1011, 2846, 7337, 2064, 2022, 2081, 20438, 11892, 3081, 1996, 18315, 2290, 6028, 1031, 3943, 29623, 22022, 1033, 1012, 102, 101, 2023, 6083, 1037, 2236, 2126, 2005, 1996, 2640, 1997, 3606, 3993, 10595, 2005, 22863, 23207, 4818, 10470, 2015, 1024, 8081, 1996, 2846, 1054, 1049, 1997, 1037, 29160, 1011, 1999, 1011, 2846, 7337, 1049, 2000, 2022, 2107, 2008, 1006, 1015, 1007, 23569, 27605, 6774, 2058, 1054, 1049, 2064, 2022, 2589, 1999, 17505, 2051, 1010, 1998, 1006, 1016, 102, 101, 2023, 3921, 2001, 3491, 2000, 2022, 6179, 1999, 1031, 2385, 29623, 17788, 1033, 1012, 102, 101, 11949, 2008, 1996, 29160, 1011, 1999, 1011, 2846, 7337, 1999, 2029, 1054, 1049, 3397, 2035, 2825, 13571, 2015, 1997, 5167, 2003, 15078, 2135, 26721, 23576, 2130, 2005, 13880, 29167, 26004, 2015, 1012, 102, 101, 1999, 5688, 1010, 1996, 2755, 2008, 7226, 13375, 1005, 26004, 2015, 2024, 2512, 3207, 16748, 21369, 3070, 12748, 1996, 2206, 2236, 3356, 5391, 1024, 8089, 1017, 29625, 2487, 1006, 1996, 20610, 3356, 5391, 1007, 2005, 2151, 1016, 1011, 7226, 4063, 22863, 23207, 4818, 10470, 1010, 1996, 29160, 2378, 1011, 2846, 7337, 1049, 2005, 2029, 1054, 1049, 1027, 1063, 1006, 1031, 1049, 1033, 102, 101, 2023, 7337, 2003, 3733, 2000, 10408, 1999, 1037, 15078, 2135, 1011, 8114, 5450, 2004, 2009, 2069, 5942, 4083, 1996, 3643, 1997, 2169, 7226, 4063, 2005, 1996, 14012, 1997, 2035, 5167, 29625, 2483, 1996, 20610, 3356, 5391, 15502, 1029, 102, 101, 8100, 1010, 2057, 2024, 4699, 1999, 1996, 3160, 1997, 3251, 1037, 2062, 12266, 3601, 1997, 2846, 2084, 1063, 1006, 1031, 1049, 1033, 1010, 1593, 1007, 1010, 1006, 1593, 1010, 1031, 1049, 1033, 1007, 1065, 2064, 2599, 2000, 2488, 20167, 21879, 1006, 2302, 15333, 29477, 17080, 6774, 15078, 8122, 1007, 1012, 102, 101, 2292, 2149, 5136, 1016, 1011, 7226, 4063, 22863, 23207, 4818, 10470, 2015, 2007, 13880, 29167, 26004, 2015, 1012, 102, 101, 2005, 2023, 7775, 2553, 1010, 1037, 2512, 29624, 16344, 14317, 3993, 13866, 3022, 6526, 1031, 1018, 1033, 1012, 102, 101, 2064, 1037, 2714, 2765, 2022, 4663, 3081, 1037, 29160, 1011, 1999, 1011, 2846, 7337, 1029, 102, 101, 2057, 2265, 2008, 1996, 3437, 2000, 2023, 3160, 2003, 2053, 2011, 13946, 2008, 1996, 20167, 21879, 4663, 2011, 15078, 2135, 1011, 8114, 18315, 2290, 1011, 2241, 10595, 2024, 2467, 10351, 2185, 2013, 1015, 1012, 102, 101, 2057, 6911, 2008, 2122, 2024, 1996, 2034, 15078, 11619, 2896, 19202, 2006, 1996, 22480, 9581, 8553, 1997, 18315, 2290, 1011, 2241, 10595, 2005, 22863, 23207, 4818, 10470, 2015, 1012, 102, 101, 1999, 2755, 1010, 2004, 2057, 4618, 2101, 2265, 1010, 1999, 3056, 3572, 2122, 19202, 7949, 2000, 2035, 20438, 1011, 11892, 10595, 1012, 102, 101, 2057, 2085, 2556, 2256, 4118, 1997, 13946, 2896, 19202, 2006, 1996, 22480, 9581, 8553, 1997, 18315, 2290, 1011, 2241, 10595, 2478, 1996, 18315, 7705, 1012, 102, 101, 2006, 1037, 2152, 2504, 1010, 2256, 6028, 2005, 13946, 2008, 1037, 29160, 1011, 1999, 1011, 2846, 7337, 1049, 2064, 2025, 6855, 2019, 1155, 1011, 20167, 3774, 1997, 2093, 4084, 1024, 1528, 11949, 2008, 1049, 1005, 2015, 2846, 2442, 2022, 2019, 1155, 1011, 15796, 3074, 1997, 13571, 2015, 1012, 102, 101, 1528, 16519, 1006, 2013, 2256, 3463, 1999, 10819, 29625, 1016, 1007, 1996, 4598, 1997, 1037, 10909, 2275, 1997, 5167, 1997, 2946, 1049, 1155, 1006, 2065, 1155, 2003, 12949, 2152, 1007, 1012, 102, 101, 1528, 2265, 1037, 2512, 29624, 19496, 14192, 7312, 2013, 27937, 1011, 2524, 1016, 1011, 7226, 4063, 22863, 23207, 4818, 10470, 2015, 2007, 1049, 1155, 5167, 2000, 1996, 20600, 3291, 13332, 2011, 1049, 1012, 102, 101, 2057, 19141, 2122, 2093, 4084, 2011, 13946, 1037, 2896, 5391, 1997, 1017, 1018, 2005, 1016, 1011, 7226, 4063, 22863, 23207, 4818, 10470, 2015, 2007, 13880, 29167, 26004, 2015, 1006, 2029, 8100, 8908, 2000, 1996, 2062, 2236, 4280, 1997, 4942, 5302, 8566, 8017, 1010, 1998, 4942, 4215, 23194, 3512, 1010, 26004, 2015, 1007, 1012, 102, 101, 2057, 6911, 2008, 2256, 6947, 6028, 2064, 2022, 4162, 2000, 6011, 1996, 2168, 2896, 5391, 2005, 8134, 2151, 27937, 1011, 2524, 1016, 1011, 7226, 4063, 22863, 23207, 4818, 10470, 4044, 1012, 102, 101, 7687, 1010, 2256, 2069, 9095, 2013, 1996, 2465, 1997, 26004, 2015, 2003, 2008, 2009, 2022, 22570, 2438, 2000, 5383, 1996, 2465, 1997, 1014, 1013, 1015, 1011, 29167, 26004, 2015, 4225, 2917, 29625, 3207, 16294, 22753, 1019, 1006, 1014, 1013, 1015, 1011, 29167, 26004, 2015, 1007, 1037, 26004, 1058, 2003, 2056, 2000, 2022, 1014, 1013, 1015, 1011, 29167, 102, 101, 2057, 2191, 1996, 2206, 8089, 1024, 8089, 1017, 29625, 2475, 2151, 1155, 1011, 20167, 29160, 1011, 1999, 1011, 2846, 7337, 2005, 1016, 1011, 7226, 4063, 22863, 23207, 4818, 10470, 2015, 2007, 1014, 1013, 1015, 1011, 29167, 26004, 2015, 2038, 1037, 2846, 2008, 2003, 2019, 1155, 1011, 15796, 3074, 1997, 13571, 2015, 1012, 102, 101, 1037, 1014, 1013, 1015, 1011, 29167, 26004, 2064, 2022, 5240, 2004, 2019, 17245, 3853, 2008, 27171, 2070, 16745, 1997, 1996, 5304, 1006, 2008, 3397, 2069, 1996, 5167, 2008, 2024, 4137, 1037, 3643, 1997, 1015, 1007, 1012, 102, 101, 6516, 1010, 7689, 1997, 2107, 26004, 2015, 2008, 20648, 4487, 2015, 5558, 18447, 16745, 2015, 17254, 2000, 13571, 2015, 1997, 1996, 5304, 1012, 102, 101, 2085, 1010, 2009, 2003, 3733, 2000, 2156, 2008, 1010, 2011, 6210, 1010, 1996, 2846, 1997, 2019, 1155, 1011, 20167, 29160, 1011, 1999, 1011, 2846, 7337, 2442, 2022, 2019, 1155, 1011, 15796, 3074, 1997, 13571, 2015, 1012, 102, 101, 8089, 1017, 29625, 2475, 12939, 2149, 2000, 2191, 2224, 1997, 9872, 1016, 29625, 16932, 2000, 16519, 2008, 1024, 9872, 1017, 29625, 2509, 1996, 2846, 1997, 2151, 1006, 1017, 1018, 1009, 1007, 1011, 20167, 29160, 1011, 1999, 1011, 2846, 7337, 2005, 1016, 1011, 7226, 4063, 22863, 23207, 4818, 10470, 2015, 2007, 1014, 1013, 1015, 1011, 29167, 26004, 2015, 27271, 2015, 1037, 2275, 1997, 102, 101, 2057, 2064, 2085, 18077, 1996, 4598, 1997, 1037, 2312, 10909, 2275, 1997, 5167, 2000, 6011, 2256, 2896, 5391, 2011, 4760, 1037, 2512, 29624, 19496, 14192, 7312, 2013, 2019, 27937, 1011, 2524, 20600, 3291, 1024, 9872, 1017, 29625, 2549, 2053, 17505, 1011, 2051, 29160, 1011, 1999, 1011, 2846, 7337, 6855, 2015, 2019, 20167, 6463, 1997, 1017, 1018, 102, 101, 2144, 1014, 1013, 1015, 1011, 29167, 26004, 2015, 2024, 1037, 2569, 2553, 1997, 13880, 29167, 26004, 2015, 1010, 2011, 9872, 1017, 29625, 2509, 2045, 6526, 1037, 5377, 1155, 1028, 1014, 2107, 2008, 1054, 1049, 27271, 2015, 1037, 2275, 1997, 5167, 1041, 1997, 2946, 1049, 1155, 1012, 102, 101, 3568, 1010, 2445, 2019, 10470, 2007, 1049, 1155, 5167, 1998, 13880, 29167, 26004, 4972, 1058, 1015, 1010, 1058, 1016, 2057, 2064, 6709, 2169, 8875, 1999, 2023, 3760, 10470, 2007, 2070, 4310, 8875, 1999, 1041, 1010, 1998, 9570, 26004, 4972, 1058, 1015, 1010, 1058, 1016, 1010, 2107, 2008, 1058, 1045, 2003, 102, 101, 11949, 2008, 2023, 2965, 2008, 1049, 2097, 6434, 2005, 1058, 1015, 1010, 1058, 1016, 1996, 15502, 5576, 2005, 1058, 1015, 1010, 1058, 1016, 1006, 2004, 1049, 1005, 2015, 2846, 3397, 2035, 13571, 2015, 1999, 1039, 1006, 1041, 1007, 1007, 1012, 102, 101, 2057, 2085, 2031, 1037, 2512, 29624, 19496, 14192, 7312, 2013, 2019, 27937, 1011, 2524, 3291, 1006, 2591, 1011, 7574, 20446, 3989, 1999, 1996, 3760, 10470, 1007, 2000, 1996, 20600, 3291, 13332, 2011, 1049, 1012, 102, 101, 9131, 2008, 1996, 20610, 3356, 5391, 3640, 2019, 20167, 6463, 1997, 1015, 1016, 1012, 102, 101, 2057, 2681, 1996, 3291, 1997, 5494, 1996, 6578, 2090, 2023, 3356, 5391, 1998, 2256, 2896, 5391, 2330, 1012, 102, 101, 2057, 22647, 2008, 1996, 20610, 3356, 5391, 2003, 1010, 1999, 2755, 1010, 4389, 1012, 102, 101, 2023, 22647, 2003, 12774, 2011, 1996, 2206, 2765, 29625, 10760, 2035, 24755, 2618, 1011, 2035, 1011, 5167, 2553, 1012, 102, 101, 2057, 2085, 5136, 1996, 2092, 1011, 3273, 2553, 2008, 1996, 10470, 11510, 2442, 2035, 24755, 2618, 2035, 5167, 1031, 2539, 29623, 22907, 1033, 1012, 102, 101, 11949, 2008, 1010, 1999, 2023, 2553, 1010, 1996, 2846, 1997, 1037, 29160, 1011, 1999, 1011, 2846, 7337, 2064, 2069, 8676, 1997, 5266, 13571, 2015, 1010, 2005, 2029, 6428, 3463, 2024, 4663, 1999, 10819, 29625, 1016, 1012, 102, 101, 2023, 12939, 2149, 2000, 2224, 2256, 6028, 2000, 6011, 1996, 2206, 9872, 1024, 9872, 1017, 29625, 2629, 2005, 1996, 2035, 24755, 2618, 1011, 2035, 1011, 5167, 2553, 1010, 2053, 17505, 1011, 2051, 29160, 1011, 1999, 1011, 2846, 7337, 6855, 2015, 2019, 20167, 6463, 1997, 1016, 1597, 2005, 1016, 1011, 7226, 4063, 22863, 23207, 4818, 10470, 2015, 2007, 13880, 29167, 102, 101, 2144, 13880, 29167, 26004, 2015, 2024, 1037, 2569, 2553, 1997, 4942, 4215, 23194, 3512, 26004, 2015, 1010, 1996, 2896, 5391, 1999, 9872, 1017, 29625, 2629, 4324, 2005, 2035, 3606, 3993, 10595, 1999, 2023, 2062, 2236, 4044, 1012, 102, 101, 1999, 22524, 1037, 1010, 2057, 2265, 2008, 1010, 2005, 1037, 3565, 26266, 1997, 13880, 29167, 26004, 2015, 1010, 2009, 2003, 2825, 2000, 9483, 1996, 15078, 11213, 1999, 1996, 4861, 1997, 9872, 1017, 29625, 2629, 2000, 1996, 11213, 2008, 27937, 2003, 2025, 4838, 1999, 17531, 2361, 1012, 102, 101, 2023, 2003, 4719, 2011, 2478, 19128, 15444, 1005, 2015, 1031, 1015, 1033, 4013, 3676, 27965, 4588, 2544, 1997, 1996, 7842, 13094, 1011, 2016, 14431, 3393, 14760, 1012, 102, 101, 25430, 2063, 2903, 2008, 2256, 2147, 7480, 1037, 2047, 3927, 2005, 13946, 11619, 1011, 14833, 13465, 2594, 27118, 9397, 3217, 9048, 2863, 8553, 3463, 2005, 29160, 1011, 1999, 1011, 2846, 10595, 2005, 10470, 2015, 1012, 102, 101, 1999, 3327, 1010, 1996, 2206, 2590, 3980, 3961, 2898, 2330, 1024, 1006, 1015, 1007, 2064, 2256, 27118, 9397, 3217, 9048, 2863, 8553, 3463, 2022, 2081, 2000, 2907, 2005, 2035, 3606, 3993, 10595, 1029, 102, 101, 2061, 2521, 1010, 2750, 2172, 2147, 2006, 2023, 3395, 1031, 4261, 29623, 22907, 29623, 22407, 29623, 2620, 29623, 16147, 29623, 21619, 1033, 1010, 2200, 2210, 2003, 2124, 2055, 23191, 2015, 1997, 3606, 20938, 1999, 22863, 23207, 4818, 10470, 2015, 1006, 1998, 1999, 2060, 4800, 29624, 28689, 22828, 10058, 1007, 1012, 102, 101, 1006, 1016, 1007, 2256, 15078, 11619, 3463, 12530, 2006, 1996, 11213, 2008, 2938, 2515, 2025, 2031, 17505, 1011, 2946, 13782, 1012, 102, 101, 2064, 2023, 11213, 2022, 8363, 2011, 13946, 4013, 3676, 27965, 4588, 4617, 1997, 2256, 18315, 10394, 1006, 2156, 22524, 1037, 1007, 1029, 102, 101, 2057, 2903, 2008, 2256, 2147, 7480, 1037, 2047, 3927, 2005, 13946, 11619, 1011, 14833, 13465, 2594, 27118, 9397, 3217, 9048, 2863, 8553, 3463, 2005, 29160, 1011, 1999, 1011, 2846, 10595, 2005, 10470, 2015, 1012, 102, 101, 1999, 3327, 1010, 1996, 2206, 2590, 3980, 3961, 2898, 2330, 1024, 1006, 1015, 1007, 2064, 2256, 27118, 9397, 3217, 9048, 2863, 8553, 3463, 2022, 2081, 2000, 2907, 2005, 2035, 3606, 3993, 10595, 1029, 102, 101, 2061, 2521, 1010, 2750, 2172, 2147, 2006, 2023, 3395, 1031, 4261, 29623, 22907, 29623, 22407, 29623, 2620, 29623, 16147, 29623, 21619, 1033, 1010, 2200, 2210, 2003, 2124, 2055, 23191, 2015, 1997, 3606, 20938, 1999, 22863, 23207, 4818, 10470, 2015, 1006, 1998, 1999, 2060, 4800, 29624, 28689, 22828, 10058, 1007, 1012, 102, 101, 1006, 1016, 1007, 2256, 15078, 11619, 3463, 12530, 2006, 1996, 11213, 2008, 2938, 2515, 2025, 2031, 17505, 1011, 2946, 13782, 1012, 102, 101, 2064, 2023, 11213, 2022, 8363, 2011, 13946, 4013, 3676, 27965, 4588, 4617, 1997, 2256, 18315, 10394, 1006, 2156, 22524, 1037, 1007, 1029, 102], "tgt": [1, 18315, 1058, 29625, 18315, 2290, 1024, 27118, 9397, 3217, 9048, 2863, 8553, 1997, 22863, 23207, 4818, 10470, 2015, 3081, 2236, 22318, 1997, 1996, 18315, 9812, 2745, 8040, 3270, 8197, 2527, 7996, 2118, 1998, 15384, 8256, 4101, 2147, 2007, 4828, 2891, 13008, 22172, 4183, 9488, 2226, 1998, 8038, 4948, 3220, 1006, 2263, 1007, 1998, 3449, 14856, 2319, 10636, 2884, 1010, 4828, 2891, 13008, 22172, 4183, 9488, 2226, 1998, 8038, 4948, 3220, 1006, 2268, 1007, 10470, 2015, 1024, 2367, 5936, 15078, 5936, 1024, 10351, 15078, 4219, 20600, 3171, 5936, 1024, 3606, 3993, 9164, 26935, 4012, 18780, 10450, 2080, 6583, 2140, 8122, 20438, 9006, 24952, 14454, 4183, 1061, 9896, 2594, 7337, 2640, 2064, 2122, 2367, 4078, 18688, 6790, 24873, 9048, 3367, 1029, 3, 1996, 2430, 3291, 1999, 9896, 2594, 7337, 2640, 1031, 9152, 8791, 1011, 6902, 2368, 1033, 14614, 1024, 7775, 22863, 23207, 4818, 10470, 2015, 1037, 2275, 1997, 1049, 5167, 2005, 5096, 1063, 1015, 1010, 1049, 1065, 1012, 3, 1050, 7226, 13375, 1063, 1015, 1010, 1010, 1050, 1065, 1012, 3, 2169, 7226, 4063, 1045, 2038, 2019, 29167, 26004, 2007, 1037, 5938, 27142, 6819, 1012, 3, 2566, 1011, 8875, 5300, 9932, 2487, 1010, 1010, 6614, 4555, 5938, 3643, 12170, 2005, 2296, 14012, 1055, 1010, 6819, 1006, 1055, 1007, 1027, 8117, 1063, 1046, 1999, 1055, 9932, 3501, 1010, 12170, 1065, 1010, 3125, 1024, 2424, 1037, 13571, 1997, 1996, 5167, 2090, 1996, 7226, 13375, 1055, 2487, 1010, 1010, 1055, 2078, 2107, 2008, 2591, 7574, 1045, 6819, 1006, 9033, 1007, 2003, 25845, 2094, 2054, 2079, 2057, 2215, 1029, 3, 3737, 1997, 1996, 5576, 1024, 2004, 2485, 2000, 1996, 23569, 28591, 2004, 2825, 1012, 3, 15078, 2135, 12859, 3085, 1024, 17505, 2770, 2051, 1006, 1999, 1050, 1998, 1049, 1007, 1012, 3, 3606, 3993, 1024, 9587, 29068, 3686, 1006, 3081, 10504, 1007, 6074, 2000, 3189, 2037, 2995, 5300, 1012, 3, 1996, 9710, 1997, 2169, 5310, 2003, 21318, 1027, 6819, 1006, 1055, 1007, 14255, 5576, 8474, 1024, 7444, 9942, 1010, 4654, 29624, 19894, 10594, 1012, 3, 2110, 1997, 1996, 2396, 3733, 2013, 2019, 3171, 7339, 1012, 3, 18315, 2290, 999, 3, 3733, 2000, 9611, 15078, 2135, 1012, 3, 27937, 1011, 2524, 1006, 2130, 2005, 1050, 1027, 1016, 1007, 1031, 28444, 2078, 1011, 28444, 2078, 1011, 9152, 8791, 1033, 2021, 2057, 2064, 2131, 12098, 16313, 19848, 6588, 2485, 2000, 1996, 23569, 28591, 2005, 2151, 5377, 1050, 1006, 13866, 3022, 1007, 999, 3, 1031, 1998, 23830, 1011, 16042, 8162, 1033, 2064, 2119, 2022, 4719, 7453, 1029, 3, 4121, 6578, 999, 3, 1029, 3, 2512, 29624, 16344, 14317, 3993, 1024, 2131, 12098, 16313, 19848, 6588, 2485, 2000, 23569, 1012, 3, 3606, 3993, 1024, 1015, 1013, 1050, 1011, 10439, 2595, 7337, 3606, 20938, 1998, 22334, 13249, 1024, 22863, 23207, 4818, 2270, 3934, 3291, 1006, 18133, 9397, 1007, 28721, 2000, 22863, 23207, 4818, 10470, 2015, 1006, 3864, 1010, 2058, 8485, 6125, 1007, 1012, 3, 3733, 2013, 1037, 11850, 3171, 7339, 1006, 18315, 2290, 1007, 1010, 1998, 2013, 1037, 11850, 15078, 7339, 1006, 1999, 9706, 2595, 1007, 1012, 3, 9872, 1006, 11900, 1007, 1031, 13008, 22172, 4183, 9488, 2226, 1011, 1055, 1011, 3220, 1033, 1024, 2053, 3606, 3993, 1998, 15078, 2135, 1011, 8114, 7337, 2005, 18133, 9397, 6855, 2015, 1037, 5377, 20167, 6463, 1012, 3, 22863, 23207, 4818, 2270, 3934, 1024, 1996, 6947, 3375, 4183, 1061, 3399, 2033, 14856, 2483, 1049, 2640, 22863, 23207, 24582, 2015, 1006, 1996, 7861, 8270, 4667, 1997, 27937, 1011, 2524, 3471, 1007, 1006, 23191, 1997, 3606, 3993, 10595, 1010, 2241, 2006, 7031, 9872, 1007, 1006, 18315, 9812, 1007, 2054, 2055, 22863, 23207, 4818, 10470, 2015, 1029, 3, 3375, 4183, 1061, 3399, 2033, 14856, 2483, 1049, 2640, 22863, 23207, 24582, 2015, 1006, 1996, 7861, 8270, 4667, 1997, 27937, 1011, 2524, 3471, 1007, 1006, 23191, 1997, 3606, 3993, 10595, 1010, 2241, 2006, 7031, 9872, 1007, 1006, 18315, 9812, 1007, 5136, 1037, 3563, 2465, 1997, 10595, 1006, 18315, 2290, 1011, 2241, 1007, 1012, 3, 2236, 4697, 1996, 18315, 9812, 2000, 5047, 13571, 2015, 1997, 1037, 5304, 1012, 3, 18315, 2290, 1011, 2241, 10595, 18315, 2290, 1011, 2241, 1027, 29160, 1011, 1999, 1011, 2846, 1006, 14719, 1007, 1012, 3, 14719, 10595, 3073, 1996, 2190, 2124, 1006, 28283, 25300, 10074, 1007, 20167, 2015, 2005, 1037, 2312, 3528, 1997, 3471, 1024, 22863, 23207, 4818, 10470, 2015, 1006, 2236, 1010, 4942, 4215, 23194, 3512, 1010, 4942, 5302, 8566, 8017, 1007, 1012, 3, 4800, 29624, 19496, 2102, 10470, 2015, 1012, 3, 15142, 3698, 19940, 1012, 3, 1999, 2755, 1010, 2823, 14719, 2003, 2035, 2017, 2064, 2079, 1012, 3, 1031, 7031, 1010, 2474, 5737, 1011, 14163, 9453, 2213, 1011, 9152, 8791, 1010, 2079, 2497, 17168, 5488, 1011, 3103, 25329, 14220, 2319, 1010, 13008, 22172, 4183, 9488, 2226, 1011, 7020, 9912, 1033, 29160, 1011, 1999, 1011, 2846, 10595, 1037, 7337, 1049, 2003, 14719, 1006, 1027, 18315, 2290, 1011, 2241, 1007, 2065, 1024, 2045, 2015, 1037, 4964, 16745, 28549, 1997, 1996, 2825, 13105, 1006, 16169, 2015, 1997, 1996, 1049, 5167, 2090, 1996, 1050, 7226, 13375, 1007, 1027, 5796, 2846, 1012, 3, 2005, 2296, 26004, 6337, 1006, 1058, 2487, 1010, 1058, 2078, 1007, 1049, 27852, 1996, 15502, 13571, 1999, 28549, 1012, 3, 2742, 1024, 1996, 20610, 1006, 1015, 1013, 1050, 1011, 10439, 2595, 1012, 1007, 3, 7337, 14012, 2035, 5167, 2362, 1012, 3, 11095, 2068, 2000, 1996, 3284, 7226, 4063, 1012, 3, 2755, 1024, 14719, 10595, 2024, 3606, 3993, 1006, 18315, 2290, 1007, 1012, 3, 28549, 2035, 13571, 2015, 2064, 2057, 2079, 2488, 2084, 1996, 20610, 14719, 7337, 1029, 3, 2064, 2057, 5454, 28549, 2107, 2008, 1996, 23569, 28591, 1999, 28549, 2467, 3640, 1037, 5377, 20167, 2000, 1996, 3795, 23569, 28591, 1012, 3, 23569, 27605, 6774, 2058, 28549, 2064, 2022, 2589, 1999, 1037, 15078, 2135, 12879, 8873, 23402, 3372, 5450, 1012, 3, 2025, 2005, 1996, 2062, 2236, 2465, 1997, 4942, 5302, 8566, 8017, 26004, 2015, 999, 3, 1031, 2079, 2497, 17168, 5488, 1011, 9152, 8791, 1033, 2021, 1996, 7953, 2045, 2003, 5071, 2000, 2022, 27258, 2135, 2312, 999, 3, 1006, 4654, 2361, 1012, 3, 4807, 1007, 2054, 2055, 10514, 14693, 12273, 14626, 1011, 2649, 26004, 2015, 1029, 3, 2053, 15078, 1011, 11619, 3463, 2024, 2124, 999, 3, 1996, 2553, 1997, 1016, 7226, 13375, 2025, 20610, 2130, 2005, 1050, 1027, 1016, 999, 3, 2057, 4618, 3579, 2006, 2023, 2553, 1012, 3, 2292, 2149, 2034, 5136, 1996, 1006, 2062, 3733, 1007, 2035, 24755, 2618, 1011, 2035, 1011, 5167, 2553, 1012, 3, 2035, 13105, 1999, 28549, 2079, 2025, 2681, 2151, 8875, 14477, 7174, 12921, 1012, 3, 9872, 1024, 2053, 15078, 2135, 1011, 8114, 14719, 7337, 1049, 6855, 2015, 2019, 10439, 2595, 1011, 6463, 1997, 1009, 1999, 1996, 2035, 24755, 2618, 1011, 2035, 1011, 5167, 2553, 1012, 3, 4983, 27937, 2038, 17505, 2946, 13782, 1012, 3, 6947, 2292, 1049, 2022, 1037, 14719, 7337, 2005, 1996, 1016, 17062, 4063, 2553, 1012, 3, 7868, 1010, 2011, 26917, 1010, 2008, 1049, 6855, 2015, 2019, 10439, 2595, 1011, 6463, 1997, 1006, 1015, 29626, 2475, 1009, 1007, 1012, 3, 2057, 4618, 6011, 2008, 23569, 27605, 6774, 2058, 28549, 24655, 2135, 2965, 13729, 2019, 27937, 11783, 3291, 1012, 3, 6947, 1006, 26406, 1007, 5167, 7337, 1049, 28549, 1049, 2003, 1006, 24655, 2135, 1007, 15502, 2135, 13729, 1037, 1016, 1011, 8875, 10470, 6947, 2061, 1010, 2057, 4299, 2000, 6011, 1996, 4598, 1997, 1037, 16745, 1997, 5167, 1041, 2008, 2003, 10909, 2011, 5796, 2846, 1006, 28549, 1007, 1012, 3, 7861, 8270, 1037, 3760, 10470, 1999, 1041, 29625, 2025, 2205, 2235, 999, 3, 1006, 1064, 1041, 1064, 1049, 1007, 18315, 9812, 999, 3, 6947, 3393, 14760, 1024, 2065, 1037, 14719, 7337, 1049, 6855, 2015, 2019, 10439, 2595, 1011, 6463, 1997, 1009, 1999, 1996, 2035, 24755, 2618, 1011, 2035, 1011, 5167, 2553, 2059, 1064, 28549, 1064, 1016, 2213, 1006, 2005, 2070, 5377, 1028, 1014, 1007, 1012, 3, 6947, 2011, 4013, 3676, 27965, 4588, 2810, 1012, 3, 2522, 28402, 5649, 1024, 7226, 4063, 1015, 2064, 2022, 4137, 2012, 2560, 1016, 2213, 2367, 16745, 2015, 1997, 5167, 2011, 1049, 29625, 19090, 2023, 3074, 1997, 16745, 2015, 2011, 28549, 1010, 2487, 6947, 1996, 7842, 13094, 1011, 2016, 14431, 3393, 14760, 1024, 2292, 1054, 2022, 1037, 3074, 1997, 16745, 2015, 1997, 1037, 5304, 1057, 29625, 2059, 1010, 2045, 6526, 1037, 16745, 1041, 1997, 1057, 2107, 2008, 1024, 12667, 13996, 2006, 1041, 2003, 1016, 2063, 1012, 3, 1064, 1041, 1064, 1006, 8833, 1006, 1064, 1054, 1064, 1007, 1013, 8833, 1006, 1064, 1057, 1064, 1007, 1007, 1012, 3, 2522, 28402, 5649, 1006, 2275, 1054, 1027, 28549, 1010, 2487, 1007, 1024, 2045, 2003, 1037, 16745, 1997, 5167, 1041, 1010, 1064, 1041, 1064, 1049, 1010, 1055, 29625, 2102, 29625, 7226, 4063, 1015, 2064, 2022, 4137, 2035, 16745, 2015, 1997, 1041, 1999, 1049, 29625, 2522, 28402, 5649, 1024, 2035, 13571, 2015, 1997, 1041, 2024, 10572, 2011, 28549, 1012, 3, 2138, 2035, 5167, 2024, 11095, 1012, 3, 6947, 2057, 2064, 2085, 16519, 2008, 2065, 1049, 23569, 27605, 11254, 2058, 2049, 2846, 2059, 2009, 2003, 15502, 2135, 13729, 2019, 7235, 10470, 2007, 1049, 5167, 1012, 3, 2019, 27937, 1011, 2524, 4708, 1012, 3, 1037, 2512, 29624, 19496, 14192, 7312, 1012, 3, 2057, 2079, 2025, 2113, 2129, 2000, 2424, 1041, 1999, 17505, 2051, 1012, 3, 2061, 2053, 15078, 2135, 1011, 8114, 14719, 7337, 1049, 6855, 2015, 2019, 10439, 2595, 1011, 6463, 1997, 1009, 1999, 1996, 2035, 24755, 2618, 1011, 2035, 1011, 5167, 2553, 1006, 4983, 27937, 2038, 17505, 2946, 13782, 1007, 1012, 3, 1053, 2098, 2893, 9436, 1997, 1996, 2035, 24755, 2618, 1011, 2035, 4221, 5244, 11213, 2025, 20610, 999, 3, 2065, 2057, 2074, 2035, 24755, 2618, 14477, 7174, 12921, 5167, 12098, 16313, 19848, 6588, 2057, 2453, 4558, 1996, 14719, 3200, 999, 3, 2256, 3921, 1024, 2236, 6026, 1996, 18315, 9812, 1012, 3, 1997, 2981, 3037, 1012, 3, 2019, 21800, 1997, 1996, 7842, 13094, 4095, 10581, 2232, 3393, 14760, 6210, 1024, 1037, 13571, 1997, 1037, 5304, 2003, 1037, 3940, 1997, 4487, 2015, 5558, 18447, 16745, 2015, 1997, 1996, 5304, 1012, 3, 2515, 2025, 9352, 15095, 1996, 5304, 999, 3, 6210, 1024, 2048, 13571, 2015, 1010, 1006, 1056, 2487, 1010, 1056, 2475, 1007, 1998, 1006, 1056, 2487, 1010, 1056, 2475, 1007, 1010, 2024, 2056, 2000, 2022, 1038, 1011, 2521, 1006, 2030, 2012, 3292, 1038, 1007, 2065, 1064, 1056, 2487, 1057, 1056, 2475, 1064, 1009, 1064, 1056, 2487, 1057, 1056, 2475, 1064, 1038, 1012, 3, 2019, 21800, 1997, 1996, 7842, 13094, 4095, 10581, 2232, 3393, 14760, 3393, 14760, 1024, 2292, 1028, 1014, 2022, 2070, 5377, 1012, 3, 2292, 1054, 2022, 1037, 3074, 1997, 13571, 2015, 1997, 1037, 5304, 1057, 1010, 2107, 2008, 2296, 2048, 13571, 2015, 1999, 1054, 2024, 1064, 1057, 1064, 1011, 2521, 1012, 3, 2059, 1010, 2045, 6526, 1037, 16745, 1041, 1997, 1057, 2107, 2008, 1024, 12667, 13996, 2006, 1041, 2003, 2035, 13571, 2015, 1997, 1041, 29625, 1064, 1041, 1064, 1006, 8833, 1006, 1064, 1054, 1064, 1007, 1013, 8833, 1006, 1064, 1057, 1064, 1007, 1007, 1012, 3, 1037, 2896, 5391, 9872, 1024, 2005, 2151, 14719, 7337, 1049, 2008, 6855, 2015, 2019, 10439, 2595, 1011, 6463, 1997, 1009, 1010, 2045, 6526, 2070, 1054, 28549, 2107, 2008, 1054, 2003, 27258, 1999, 1049, 29625, 2296, 2048, 13571, 2015, 1999, 1054, 2024, 1049, 1011, 2521, 1006, 2005, 2070, 5377, 1028, 1014, 1007, 9872, 1024, 2053, 15078, 2135, 1011, 8114, 14719, 7337, 1049, 6855, 2015, 2019, 10439, 2595, 1011, 6463, 1997, 1009, 4983, 27937, 2038, 17505, 2946, 13782, 1012, 3, 7826, 2005, 2925, 2470, 1037, 3522, 2765, 1031, 20934, 2818, 11263, 17875, 1011, 8529, 6962, 1033, 1024, 2005, 2151, 5377, 1050, 1010, 2053, 14719, 7337, 1049, 6855, 2015, 2019, 10439, 2595, 1011, 6463, 1997, 1015, 1013, 1050, 1009, 1006, 4983, 27937, 2038, 17505, 2946, 13782, 1007, 1012, 3, 4389, 2005, 2035, 5377, 24978, 1012, 3, 2512, 29624, 8663, 12693, 2102, 24978, 1029, 3, 2060, 4280, 1997, 26004, 4972, 1012, 3, 2839, 6026, 3606, 3993, 10595, 2005, 22863, 23207, 4818, 10470, 2015, 1012, 3, 19613, 1996, 15078, 11213, 1012, 3, 2116, 23824, 3980, 4953, 1996, 18315, 9812, 1997, 13571, 2015, 1012, 3, 4067, 3360, 2319, 2243, 2017, 2], "src_sent_labels": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], "segs": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "clss": [0, 33, 69, 85, 128, 160, 192, 203, 263, 326, 351, 381, 415, 450, 490, 559, 607, 643, 674, 700, 718, 769, 817, 852, 882, 907, 951, 1000, 1059, 1104, 1127, 1159, 1175, 1190, 1207, 1249, 1277, 1314, 1378, 1408, 1430, 1444, 1510, 1537, 1555, 1583, 1644, 1688, 1730, 1766, 1788, 1815, 1876, 1932, 1970, 2009, 2029, 2072, 2120, 2166, 2202, 2221, 2282, 2343, 2380, 2441, 2489, 2506, 2525, 2548, 2561, 2588, 2616, 2639, 2655, 2678, 2709, 2768, 2799, 2821, 2872, 2910, 2930, 2984, 3038, 3084, 3119, 3177, 3228, 3255, 3303, 3356, 3381, 3443, 3473, 3496, 3557, 3606, 3652, 3691, 3744, 3798, 3814, 3840, 3866, 3928, 3982, 4007, 4038, 4057, 4068, 4121, 4150, 4179, 4203, 4220, 4231, 4269, 4290, 4320, 4360, 4381, 4411, 4428, 4469, 4492, 4525, 4550, 4615, 4642, 4662, 4700, 4755, 4785, 4830, 4856, 4873, 4926, 4951, 4997, 5036, 5058, 5079, 5120, 5176, 5186, 5238, 5286, 5324, 5360, 5392, 5434, 5472, 5503, 5515, 5550, 5587, 5648, 5694, 5731, 5786, 5809, 5855, 5901, 5910, 5973, 6025, 6084, 6113, 6171, 6187, 6221, 6285, 6325, 6377, 6397, 6417, 6434, 6470, 6501, 6525, 6552, 6602, 6635, 6670, 6725, 6758, 6817, 6871, 6909, 6934, 6972, 7036, 7094, 7142, 7194, 7236, 7272, 7288, 7308, 7324, 7345, 7371, 7409, 7470, 7509, 7557, 7586, 7623, 7658, 7710, 7733, 7757, 7793, 7828, 7880, 7903], "src_txt": ["the existence of incentive - compatible computationally - efficient protocols for combinatorial auctions with decent approximation ratios is the paradigmatic problem in computational mechanism design .", "it is believed that in many cases good approximations for combinatorial auctions may be unattainable due to an inherent clash between truthfulness and computational efficiency .", "however , to date , researchers lack the machinery to prove such results .", "in this paper , we present a new approach : we take the first steps towards the development of new technologies for lower bounding the vc - dimension of k - tuples of disjoint sets .", "we apply this machinery to prove the first computational - complexity inapproximability results for incentive - compatible mechanisms for combinatorial auctions .", "these results hold for the important class of vcg - based mechanisms , and are based on the complexity assumption that np has no polynomial - size circuits .", "we believe that our approach holds great promise .", "indeed , subsequently to our work , buchfuhrer and umans [ 10 ] , and , independently , dughmi et al. [ 20 ] , strengthened our results via extensions of our techniques , thus proving conjectures we presented in [ 32 ] the field of algorithmic mechanism design [ 34 ] is about the reconciliation of bounded computational resources and strategic interaction between selfish participants .", "in combinatorial auctions , the paradigmatic problem in this area , a set of items is sold to bidders with private preferences over subsets of the items , with the intent of maximizing the social welfare ( i.e. , the sum of bidders ' utilities from their allocated items ) .", "researchers constantly seek auction protocols that are both incentive - compatible and computationally - efficient , and guarantee decent approximation ratios .", "sadly , to date , huge gaps exist between the state of the art approximation ratios obtained by unrestricted , and by truthful , algorithms .", "it is believed that this could be due to an inherent clash between the truthfulness and computational - efficiency requirements , that manifests itself in greatly degraded algorithm performance .", "such tension between the two desiderata was recently shown to exist in [ 36 ] for a different mechanism design problem called combinatorial public projects [ 40 ] .", "however , in the context of combinatorial auctions , due to their unique combinatorial structure , the algorithmic game theory community currently lacks the machinery to prove this [ 38 ] .", "the celebrated class of vickrey - clarke - groves ( vcg ) mechanisms [ 43,11,23 ] is the only known universal technique for the design of deterministic incentive - compatible mechanisms ( in certain interesting cases vcg mechanisms are the only truthful mechanisms [ 8,19,27,37,36 ] ) .", "while a naive application of vcg is often computationally intractable , more clever uses of vcg are the key to the best known ( deterministic ) approximation ratios for combinatorial auctions [ 16,25 ] .", "for these reasons , the exploration of the computational limitations of such mechanisms is an important research agenda ( pursued in [ 15,19,27,33,36 ] ) .", "recently , it was shown [ 36 ] that the computational - complexity of vcg - based mechanisms is closely related to the notion of vc dimension .", "[ 36 ] was able to make use of existing vc machinery to prove computational hardness results for combinatorial public projects .", "however , for combinatorial auctions , these techniques are no longer applicable .", "this is because , unlike combinatorial public projects , the space of outcomes in combinatorial auctions does not consist of subsets of the universe of items , bur rather of partitions of this universe ( between the bidders ) .", "this calls for the development of new vc machinery for the handling of such problems.we formally define the notion of the vc dimension of collections of partitions of a universe 1 and present techniques for establishing lower bounds on this vc dimension .", "we show how these results can be used to prove computational - complexity inapproximability results for vcg - based mechanisms for combinatorial auctions .", "( we note that these results actually hold for the more general class of mechanisms that are affine maximizers [ 27,37 ] . )", "our inapproximability results depend on the computational assumption that sat does not have polynomial - size circuits .", "informally , our method of lower bounding 2 the approximability of vcg - based mechanisms via vc arguments is the following : we consider well - known auction environments for which exact optimization is np - hard .", "we show that if a vcg - based mechanism approximates closely the optimal social welfare , then it is implicitly solving optimally a smaller , but still relatively large , optimization problem of the same nature - an np - hard feat .", "we establish this by showing that the subset of outcomes ( partitions of items ) considered by the vcg - based mechanism \" shatters \" a relatively large subset of the items.our results imply the first computational complexity lower bounds for vcg - based mechanisms , and truthful mechanisms in general , for combinatorial auctions ( with the possible exception of a result in [ 27 ] for a related auction environment ) .", "in fact , we show that in some auction en - 1 by a partition in this paper we mean an ordered k - tuple of disjoint subsets which , however , may not exhaust the universe .", "2 we use the term lower bound as a general reference to an inapproximability result .", "hence , a lower bound of 1 2 means ( as we are looking at a maximization problem ) that no approximation better than 1 2 is possible .", "this use is similar to that of hastad in [ 24 ] .", "vironments these results actually apply to all truthful algorithms .", "we illustrate our techniques via 2 - bidder combinatorial auctions .", "it is also our belief that the notion of the vc dimension of k - tuples of disjoint sets is of independent interest , and suggests many new and exciting problems in combinatorics .", "combinatorial auctions have been extensively studied in both the economics and the computer science literature [ 9,12,13 ] .", "it is known that if the preferences of the bidders are unrestricted then no constant approximation ratios are achievable ( in polynomial time ) [ 30,35 ] .", "hence , much research has been devoted to the exploration of restrictions on bidders ' preferences that allow for good approximations , e.g. , for subadditive , and submodular , preferences constant approximation ratios have been obtained [ 16,18,21,22,29,44 ] .", "in contrast , the known truthful approximation algorithms for these classes have non-constant approximation ratios [ 14,16,17 ] .", "it is believed that this gap may be due to the computational burden imposed by the truthfulness requirement .", "however , to date , this belief remains unproven .", "in particular , no computational complexity lower bounds for truthful mechanisms for combinatorial auctions are known.vickrey - clarke - groves ( vcg ) mechanisms [ 43,11,23 ] , named after their three inventors , are the fundamental technique in mechanism design for inducing truthful behaviour of strategic agents .", "nisan and ronen [ 33,34 ] were the first to consider the computational issues associated with the vcg technique .", "in particular , [ 33 ] defines the notion of vcg - based mechanisms .", "vcg - based mechanisms have proven to be useful in designing approximation algorithms for combinatorial auctions [ 16,25 ] .", "in fact , the best known ( deterministic ) truthful approximation ratios for combinatorial auctions were obtained via vcg - based mechanisms [ 16,25 ] ( with the notable exception of an algorithm in [ 5 ] for the case that many duplicates of each item exist ) .", "moreover , lavi , mu'alem and nisan [ 27 ] have shown that in certain interesting cases vcg - based mechanisms are essentially the only truthful mechanisms ( see also [ 19 ] ) .", "dobzinski and nisan [ 15 ] tackled the problem of proving inapproximability results for vcgbased mechanisms by taking a communication complexity [ 45,26 ] approach .", "hence , in the settings considered in [ 15 ] , it is assumed that each bidder has an exponentially large string of preferences ( in the number of items ) .", "however , real - life considerations render problematic the assumption that bidders ' preferences are exponential in size .", "our intractability results deal with bidder preferences that are succinctly described , and therefore relate to computational complexity .", "thus , our techniques enable us to prove lower bounds even for the important case in which bidders ' preferences can be concisely represented.the connection between the vc dimension and vcg - based mechanisms was observed in [ 36 ] , where a general ( i.e. , not restricted to vcg - based mechanisms ) inapproximability result was presented , albeit in the context of a different mechanism design problem , called combinatorial public projects ( see also [ 40 ] ) .", "the analysis in [ 36 ] was carried out within the standard vc framework , and so it relied on existing machinery ( namely , the sauer - shelah lemma [ 39,41 ] and its probabilistic version due to ajtai [ 1 ] ) .", "to handle the unique technical challenges posed by combinatorial auctions ( specifically , the fact that the universe of items is partitioned between the bidders ) new machinery is required .", "indeed , our technique can be interpreted as an extension of the sauer - shelah lemma to the case of partitions ( lemma 2.12 in sec. 2 ) .", "made between the the vc dimension and the approximability of combinatorial auctions .", "subsequently to this work [ 32 ] , buchfuhrer and umans [ 10 ] , and , independently , dughmi et al. [ 20 ] , strengthened our results via extensions of our techniques .", "specifically , both works show that no constant approximation ratios are achievable for n - bidder case of the combinatorial auction environment we discuss in sec. 3 , thus proving a conjecture we presented in [ 32 ] .", "the techniques in these two works are quite different , as we briefly discuss below.one of the main challenges in dealing with partitions of items is the possibility of unallocated items ( as we shall later explain ) .", "our lower bounds for vcg - based mechanisms fall into two categories : ( 1 ) lower bounds that rely on the assumption that the auctioneer allocates all items .", "( 2 ) lower bounds for the general case that items may remain unallocated .", "while case ( 1 ) enables a straightforward use of the sauer - shelah lemma , case ( 2 ) requires heavier machinery.the work of dughmi et al. [ 20 ] strengthens our results for case ( 2 ) via a clever and subtle generalization of our proof techniques .", "the main ingredients in the proof in [ 20 ] are : ( i ) an analogue of the sauer - shelah lemma that incorporates sets of partial k - colorings , generalizing our lemma 2.12 , that can be regarded as the case of partial 2 - colorings .", "( ii ) our lower bounds are based on a collection of sets such that every pair of them are \" epsilon - close to orthogonal \" ( see theorem 2.14 ) .", "[ 20 ] get sharper lower bounds by considering collections of sets such that every - tuple of them are epsilon - close to orthogonal.buchfuhrer and umans [ 10 ] overcome the problem of unallocated items via a clever \" reduction \" from case ( 2 ) to case ( 1 ) .", "they use a counting argument that shows that , for any vcg - based mechanism that obtains a \" good \" approximation ratio , there must be a reasonably large subset of items that are fully allocated in exponentially many different ways .", "this enables an indirect application of the sauer - shelah lemma .", "in sec. 2 we present our approach to analyzing the vc dimension of partitions .", "in sec. 3 we prove our inapproximability results for combinatorial auctions .", "we conclude and present open questions in sec. 4 .", "the main hurdle in combinatorial auctions stems from the fact that the outcomes are partitions of the set of items .", "approximation algorithms for combinatorial auctions can be thought of as functions that map bidders ' preferences to partitions of items .", "this motivates our extension of the standard notion of vc dimension to the vc dimension of partitions .", "this section presents this notion of vc dimension and lower bounding techniques .", "in sec. 3 we harness this machinery to prove computational complexity lower bounds for combinatorial auctions .", "we focus on partitions that consist of two disjoint subsets ( our definitions can easily be extended to k - tuples ) .", "our formal definition of a partition of a universe is the following : definition 2.1 ( partitions ) a partition t = ( t 1 , t 2 ) of a universe u = { 1 , ... , m } is a pair of two disjoint subsets of u , i.e. t 1 , t 2 \u2286 [ m ] and t 1 \u2229 t 2 = \u2205 .", "observe that we do not require that every element in the universe appear in one of the two disjoint subsets that form a partition .", "this definition of partitions will later enable us to address crucial aspects of combinatorial auctions .", "we refer to partitions that do exhaust the universe ( i.e. , cover all elements in the universe ) as \" covering partitions \" ( we shall refer to not - necessarily - covering partitions as \" general partitions \" ) .", "definition 2.2 ( covering partitions ) a partition ( t 1 , t 2 ) of a universe u is said to cover u if t 1 \u222a t 2 = u .", "c ( u ) is defined to be the set of all partitions that cover u .", "for every subset e of a universe u , we can define ( in an analogous way ) what a partition of e is , and denote by p ( e ) the set of all partitions of e and by c ( e ) the set of all partitions of e that cover e.definition 2.3 ( projections ) the projection of a partition ( s 1 , s 2 ) \u2208 p ( u ) on e \u2286 u , denoted by ( s 1 , s 2 ) | e , is the partition ( s 1 \u2229 e , s 2 \u2229 e ) \u2208 p ( e ) .", "for any collection of partitions r \u2286 p ( u ) we define r 's projection on e \u2286 u , r | e , to be r | e = { ( t 1 , t 2 ) | \u2203 ( s 1 , s 2 ) \u2208 r s.t. ( s 1 , s 2 ) | e = ( t 1 , t 2 ) } .", "observe that if a partition ( s 1 , s 2 ) of e \u2286 u is in c ( e ) , then for any e \u2286 e ( s 1 , s 2 ) | e \u2208 c ( e ) .", "we are now ready to define the notions of shattering and vc dimension in our context : r \u2286 p ( u ) if c ( e ) \u2286 r | e .", "observe that that if e \u2286 u is shattered by a collection of partitions r \u2286 p ( u ) then so are all subsets of e. definition 2.5 ( vc dimension ) the vc dimension v c ( r ) of a collection of partitions r \u2286 p ( u ) is the cardinality of the biggest subset e \u2286 u that is shattered by r.we now introduce the useful concept of \u03b1 - approximate collections of partitions .", "informally , a collection r of partitions is \u03b1 - approximate if , for every partition s of the universe ( not necessarily in r ) , there is some partition in r that is \" not far \" ( in terms of \u03b1 ) from s .", "we are interested in the connection between the value of \u03b1 of an \u03b1 - approximate collection of partitions and its vc dimension .", "this will play a major role in the proofs of our results for combinatorial auctions.definition 1 ( \u03b1 - approximate collections of partitions ) let r be a collection of partitions of a universe u .", "r is said to be \u03b1 - approximate if for every partition s = ( s 1 , s 2 ) \u2208 p ( u ) there exists some partitiont = ( t 1 , t 2 ) \u2208 r such that | s 1 \u2229 t 1 | + | s 2 \u2229 t 2 | \u2265 \u03b1 ( | s 1 | + | s 2 | ) .", "when dealing with collections of covering partitions it is possible to use existing vc machinery to lower bound their vc dimension .", "specifically , a straightforward application of the sauer - shelah lemma [ 39,41 ] implies that : lemma 2.6 ( lower bounding the vc dimension of covering partitions ) for every r \u2286 c ( u ) it holds that v c ( r ) = \u03c9 ( log | r | log | u | ) .", "proof : let r 1 = { s 1 | \u2203 s 2 s.t. ( s 1 , s 2 ) \u2208 r } .", "because r only consists of covering partitions it must be that | r 1 | = | r | .", "we now recall the sauer - shelah lemma : lemma 2.7 ( [ 39,41 ] ) for any family z of subsets of a universe u , there is a subset e of u of size \u03b8 ( log | z | log | u | ) such that for each e \u2286 e there is a z \u2208 z such that e = z \u2229 e.the sauer - shelah lemma , when applied to r 1 implies the existence of a set e ( as in the statement of the lemma ) of size \u03c9 ( log | r 1 | log | u | ) ( that is , a large set that is shattered in the traditional sense ) .", "the fact that all partitions in r are covering partitions now immediately implies that v c ( r ) = \u03c9 ( log | r 1 | log | u | ) = \u03c9 ( log | r | log | u | ) .", "lemma 2.6 enables us to prove a lower bounds on the vc dimension of ( 1 2 + ) - approximate collections of covering partitions.theorem 2.8 let r \u2286 c ( u ) .", "if r is ( 1 2 + ) - approximate ( for any small constant > 0 ) then there exists some constant \u03b1 > 0 such that v c ( r ) \u2265 m \u03b1 .", "proof : [ sketch ] we use a probabilistic construction argument : consider a partition of u , s = ( s 1 , s 2 ) , that is chosen , uniformly at random , out of all possible partitions in c ( u ) .", "observe that ( by the chernoff bounds ) , for every partition t = ( t 1 , t 2 ) \u2208 r , the probability that | s 1 \u2229 t 1 | + | s 2 \u2229 t 2 | \u2265 ( 1 2 + ) ( | s 1 | + | s 2 | ) = ( 1 2 + ) m is exponentially small in m.hence , for r to be ( 1 2 + ) - approximate it must contain exponentially many partitions in c ( u ) .", "we can now apply lemma 2.6 to conclude the proof .", "observe that the proof lemma 2.6 heavily relied on the fact that the partitions considered were covering partitions .", "dealing with collections of general partitions necessitates the development of different techniques for lower bounding the vc dimension .", "we shall now present such a method , that can be regarded as an extension of the sauer - shelah lemma [ 39,41 ] to the case of collections of general partitions : definition 2.9 ( distance between partitions ) given a universe u , two partitions in p ( u ) , ( t 1 , t 2 ) and ( the proof follows the basic idea of [ 3,6,31 ] .", "our novel observation is that the same proof strategy applies with our new definition of distance.t 1 , t 2 ) , are said to be b - far ( or at distance b ) if | t 1 \u2229 t 2 | + | t 1 \u2229 t 2 | \u2265 b. [ sketch ] fix > 0 , k , m .", "we wish to prove that t ( , k , m ) \u2265 k \u03b1 , for some constant \u03b1 > 0 .", "we shall bound t ( , k , m ) by induction ( shall remain fixed throughout the proof and the induction is on k and m ) .", "let r be some collection of partitions as in the statement of the lemma .", "arbitrarily partition r into pairs .", "since the partitions that make up each pair are at least m - far there must exist ( via simple counting ) an element e \u2208 u , such that in at least k 2 pairs ( t 1 , t 2 ) , ( t 1 , t 2 ) , e \u2208 t 1 \u2229 t 2 or e \u2208 t 1 \u2229 t 2 .", "let r \u2286 r be the collection of all partitions ( t 1 , t 2 ) in r in which e \u2208 t 1 .", "let r \u2286 r be the collection of all partitions ( t 1 , t 2 ) in r in which e \u2208 t 2 .", "by the arguments above we are guaranteed that | r | \u2265 k 2 and | r | \u2265 k 2 .", "let i be all the subsets of u that are shattered by r .", "we wish to lower bound | i | .", "let r \u2212 e be all the partitions of u \\ { e } we get by removing e from t 1 for every partition ( t 1 , t 2 ) \u2208 r .", "let i be all the subsets of u \\ { e } shattered by r \u2212 e .", "as there are at least k 2 sets in r , by definition | i | \u2265 t ( , k 2 , m \u2212 1 ) .", "similarly , let r \u2212 e be all the partitions of u \\ { e } we get by removing e from t 1 for every partition ( t 1 , t 2 ) \u2208 r .", "let i be all the subsets of u \\ { e } shattered by r \u2212 e .", "as there are at least k 2 sets in r , by definition | i | \u2265 t ( , k 2 , m \u2212 1 ) .", "we claim that | i | \u2265 | i | + | i | .", "to see why this is true consider the following argument : all sets in i \\ i and in i \\ i are distinct and belong to i. let s be a set in i \u2229 i .", "observe that this means that not only is s in i , but so is s \u222a { e } .", "so , i \u2265 | i \\ i | + | i \\ i | + 2 | i \u2229 i | = | i | + | i | .", "hence , t ( , k , m ) \u2265 2 \u00d7 t ( , k 2 , m \u2212 1 ) .", "we now use the induction hypothesis to conclude the proof.lemma 2.12 and observation 2.11 imply the following important corollary : corollary 2.13 for every constant \u03b1 > 0 , and ( sufficiently small ) constant > 0 , there exists a \u03b2 > 0 such that , if r \u2286 p ( u ) and it holds that : ( 1 ) | r | \u2265 e m \u03b1 , and ( 2 ) every two partitions in r are m - far , then v c ( r ) \u2265 m \u03b2 .", "we shall now discuss the connection between the value of \u03b1 of an \u03b1 - approximate collection of partitions and its vc dimension .", "we prove the following theorem : theorem 2.14 let r \u2286 p ( u ) .", "if r is ( 3 4 + ) - approximate ( for any constant > 0 ) then there exists some constant \u03b1 > 0 such that v c ( r ) \u2265 m \u03b1 .", "proof : to prove the theorem we use the following claim : claim 2.15 for every small constant \u03b4 > 0 , there is a family f of partitions ( t 1 , t 2 ) in c ( [ m ] ) and a constant \u03b1 > 0 such that | f | = e \u03b1m and every two partitions in f are at least 1 \u2212 \u03b4 2 m - far .", "we will prove the claim for partitions t = ( t 1 , t 2 ) wheret 1 \u222a t 2 = [ m ] .", "for such partitions , the distance between partition t = ( t 1 , t 2 ) and t = ( t 1 , t 2 ) is just the size of the symmetric difference of t 1 and t 2 .", "the existence of the desired collection now follows from the existence of good codes , see e.g. [ 42 ] .", "for completeness we include the standard construction to show the existence of f .", "let t = ( t 1 , t 2 ) and t = ( t 1 , t 2 ) be two partitions in c ( [ m ] ) chosen at random in the following way : for each item j \u2208 [ m ] we choose , uniformly at random , whether it will be placed in t 1 or in t 2 .", "similarly , we choose , uniformly at random , whether each item j shall be placed in t 1 or t 2 .", "using standard chernoff arguments it is easy to show that the probability that there are at least m + \u03b4 2 that appear in either t 1 \u2229 t 1 or t 2 \u2229 t 2 is exponentially small in .", "observe that this immediately implies ( by our definition of distance ) that the probability that the distance between t and t is less than 1 \u2212 \u03b4 2 m is exponentially small i \u03b4 .", "hence , a family f of exponential size must exist.lemma 2.16 let > 0 .", "let r \u2286 p ( u ) such that r is ( 3 4 + ) - approximate .", "then , there is a subset of r , r , of size exponential in m such that every two elements of r are at least \u03b1m - far ( for some constant \u03b1 > 0 ) .", "by claim 2.15 we know that , for our universe of u , there exists an exponential - sized family of partitions in c ( u ) , f , such that every two partitions in f are at least 1 \u2212 \u03b4 2 m - far ( for some arbitrarily small \u03b4 > 0 ) .", "fix some t , t \u2208 f .", "by definition of f , t and t are identical only on at most 1 + \u03b4 2 m elements ( that is , only for at most 1 + \u03b4 2 m items j , either j \u2208 t 1 \u2229 t 1 or j \u2208 t 2 \u2229 t 2 ) .", "let r t and r t represent two partitions in r that obtain 3 4 + \" approximations \" for t and t ' , respectively ( because r is ( 3 4 + ) - approximate such partitions must exist ) .", "even if we assume that both r t and r t are identical on all elements on which t and t are identical , we are still left with 1 \u2212 \u03b4 2 m elements .", "observe that for each such element , if r t and r t are identical on it , it holds that it can only contribute to the approximation obtained by one of them .", "this implies that to obtain the promised approximation r t and r t must differ on quite a lot ( a constant fraction ) of the elements in u .", "this , in turn , implies that there is some \u03b1 > 0 such that r t and r t are \u03b1m - far.corollary 2.13 now concludes the proof of the theorem .", "in this section we present the connection between our results for collections of partitions in sec. 2 and the problem of social - welfare - maximization in combinatorial auctions .", "we use the vc dimension framework developed in the previous section to present a general technique for proving computational complexity lower bounds for vcg - based mechanisms .", "2 - bidder combinatorial auctions .", "we consider auction environments of the following form : there is a set of items 1 . . . , m that are sold to 2 bidders , 1 and 2 .", "each bidder i has a private valuation function ( sometimes simply referred to as a valuation ) v i that assigns a nonnegative real value to every subset of the items .", "v i ( s ) can be regarded as i 's maximum willingness to pay for the bundle of items s. each v i is assumed to be nondecreasing , i.e. , \u2200 s \u2286 t it holds that v i ( s ) \u2264 v i ( t ) .", "the objective is find a partition of the items ( s 1 , s 2 ) between the two bidders that maximizes the social welfare , i.e. , the expression \u03c3 i v i ( s i ) .", "it is known that optimizing the social welfare value in 2 - bidder combinatorial auctions is computationally intractable even for very restricted classes of valuation functions .", "in particular , [ 29 ] shows that this task is np - hard even for the simple class of capped additive valuations : definition 2 ( additive valuations ) a valuation function a is said to be additive if there exist per - item values a i1 , . . . , a im , such that for every bundle s \u2286 [ m ] , a ( s ) = \u03c3 j \u2208 s a ij .", "s \u2286 [ m ] , v ( s ) = min { a ( s ) , b } .", "intuitively , a bidder has a capped additive valuation if his value for each bundle of items is simply the additive sum of his values for the items in it , up to some maximum amount he is willing to spend .", "this class of valuations shall be used throughout this section to illustrate our impossibility results ( as we aim to prove inapproximablity results the restrictedness of this class works to our advantage ) .", "maximal - in - range mechanisms .", "mechanisms that rely on the vcg technique to ensure truthfulness ( vcg - based mechanisms ) are known to have the useful combinatorial property of being maximal - in - range [ 15,33,37 ] : 3 maximal - in - range mechanisms are mechanisms that always exactly optimize over a ( fixed ) set of outcomes .", "in our context , this means that for every maximal - in - range mechanism m there exists some r m \u2286 p ( [ m ] ) such that m always outputs an optimal outcome in r m ( with respect to social - welfare maximization ) .", "we refer to r m as m 's range.definition 4 ( maximal - in - range mechanisms ) a mechanism m is maximal - in - range if there is a collection of partitions r m \u2286 p ( [ m ] ) such that for every pair of valuations , ( v 1 , v 2 ) , m outputs a partition ( t 1 , t 2 ) \u2208 argmax ( s 1 , s 2 ) \u2208 r m v 1 ( s 1 ) + v 2 ( s 2 ) .", "it is know that every maximal - in - range mechanism can be made incentive compatible via the vcg technique [ 33,34 ] .", "this suggests a general way for the design of truthful mechanisms for combinatorial auctions : fix the range r m of a maximal - in - range mechanism m to be such that ( 1 ) optimizing over r m can be done in polynomial time , and ( 2 ) the optimal outcome in r m always provides a \" good \" approximation to the globally - optimal outcome .", "this approach was shown to be useful in [ 16,25 ] .", "observe that the maximal - in - range mechanism in which r m contains all possible partitions of items is computationally intractable even for capped additive valuations .", "in contrast , the fact that bidders ' valuations are nondecreasing implies the following general upper bound : observation 3.1 ( the trivial upper bound ) for any 2 - bidder combinatorial auction , the maximalin - range mechanism m for which r m = { ( [ m ] , \u2205 ) , ( \u2205 , [ m ] ) } provides a 1 2 - approximation to the optimal social welfare.that is , the maximal - in - range mechanism that bundles all items together and allocates them to the bidder with the highest value provides a 1 2 - approximation to the optimal social welfare .", "this mechanism is easy to implement in a computationally - efficient manner as it only requires learning the value of each bidder for the bundle of all items.is the trivial upper bound optimal ?", "naturally , we are interested in the question of whether a more clever choice of range than { ( [ m ] , \u2205 ) , ( \u2205 , [ m ] ) } can lead to better approximation ratios ( without jeopardizing computational efficiency ) .", "let us consider 2 - bidder combinatorial auctions with capped additive valuations .", "for this restricted case , a non-truthful ptas exists [ 4 ] .", "can a similar result be obtained via a maximal - in - range mechanism ?", "we show that the answer to this question is no by proving that the approximation ratios obtained by computationally - efficient vcg - based mechanisms are always bounded away from 1 .", "we stress that these are the first computational complexity lower bounds on the approximability of vcg - based mechanisms for combinatorial auctions .", "in fact , as we shall later show , in certain cases these bounds extend to all incentive - compatible mechanisms .", "we now present our method of proving lower bounds on the approximability of vcg - based mechanisms using the vc framework .", "on a high level , our technique for proving that a maximal - in - range mechanism m can not obtain an \u03b1 - approximation consists of three steps : \u2022 observe that m 's range must be an \u03b1 - approximate collection of partitions .", "\u2022 conclude ( from our results in sec. 2 ) the existence of a shattered set of items of size m \u03b1 ( if \u03b1 is sufficiently high ) .", "\u2022 show a non-uniform reduction from np - hard 2 - bidder combinatorial auctions with m \u03b1 items to the optimization problem solved by m .", "we illustrate these three steps by proving a lower bound of 3 4 for 2 - bidder combinatorial auctions with capped additive valuations ( which naturally extends to the more general classes of submodular , and subadditive , valuations ) .", "we stress that our proof technique can be applied to prove the same lower bound for practically any np - hard 2 - bidder combinatorial auction environment .", "essentially , our only requirement from the class of valuations is that it be expressive enough to contain the class of 0 / 1 - additive valuations defined below.definition 5 ( 0 / 1 - additive valuations ) a valuation v is said to be 0 / 1 - additive if it is an additive valuation in which all the per - item values are in { 0 , 1 } .", "we make the following observation : observation 3.2 any \u03b1 - approximation maximal - in - range mechanism for 2 - bidder combinatorial auctions with 0 / 1 - additive valuations has a range that is an \u03b1 - approximate collection of partitions .", "a 0 / 1 - additive valuation can be regarded as an indicator function that specifies some subset of the universe ( that contains only the items that are assigned a value of 1 ) .", "hence , pairs of such valuations that specify disjoint subsets correspond to partitions of the universe .", "now , it is easy to see that , by definition , the range of an \u03b1 - approximation maximal - in - range mechanism must be an \u03b1 - approximate collection of partitions .", "observation 3.2 enables us to make use of theorem 2.14 to conclude that : theorem 3.3 the range of any ( 3 4 + ) - approximation maximal - in - range mechanism for 2 - bidder combinatorial auctions with 0 / 1 - additive valuations shatters a set of items of size m \u03b1 ( for some constant \u03b1 > 0 ) .", "we can now exploit the existence of a large shattered set of items to prove our lower bound by showing a non-uniform reduction from an np - hard optimization problem : theorem 3.4 no polynomial - time maximal - in - range mechanism obtains an approximation ratio of 3 4 + for 2 - bidder combinatorial auctions with capped additive valuations unless np \u2286 p / poly.proof : let m be a mechanism as in the statement of the theorem .", "since 0 / 1 - additive valuations are a special case of capped additive valuations , by theorem 3.3 there exists a constant \u03b1 > 0 such that r m shatters a set of items e of size m \u03b1 .", "therefore , given an auction with m \u03b1 items and capped additive valuation functions v 1 , v 2 we can identify each item in this smaller auction with some unique item in e , and construct valuation functions v 1 , v 2 , such that v i is identical to v i on e and assigns 0 to all other items .", "observe that this means that m will output for v 1 , v 2 the optimal solution for v 1 , v 2 ( as m 's range contains all partitions in c ( e ) ) .", "we now have a non-uniform reduction from an np - hard problem ( social - welfare maximization in the smaller auction ) to the optimization problem solved by m .", "recall that the trivial upper bound provides an approximation ratio of 1 2 .", "we leave the problem of closing the gap between this upper bound and our lower bound open .", "we conjecture that the trivial upper bound is , in fact , tight .", "this conjecture is motivated by the following result.the allocate - all - items case .", "we now consider the well - studied case that the auctioneer must allocate all items [ 19,27 ] .", "observe that , in this case , the range of a maximal - in - range mechanism can only consist of covering partitions , for which stronger results are obtained in sec. 2 .", "this enables us to use our technique to prove the following theorem : theorem 3.5 for the allocate - all - items case , no polynomial - time maximal - in - range mechanism obtains an approximation ratio of 2 \u2212 for 2 - bidder combinatorial auctions with capped additive valuations unless np \u2286 p / poly.if bidders have subadditive valuations , and all items are allocated , then maximal - in - range mechanisms are the only truthful mechanisms [ 19 ] .", "since capped additive valuations are a special case of subadditive valuations , the lower bound in theorem 3.5 holds for all truthful mechanisms in this more general environment .", "in appendix a , we show that , for a superclass of capped additive valuations , it is possible to relax the computational assumption in the statement of theorem 3.5 to the assumption that np is not contained in bpp .", "this is achieved by using ajtai 's [ 1 ] probabilistic version of the sauer - shelah lemma .", "swe believe that our work opens a new avenue for proving complexity - theoretic inapproximability results for maximal - in - range mechanisms for auctions .", "in particular , the following important questions remain wide open : ( 1 ) can our inapproximability results be made to hold for all truthful mechanisms ?", "so far , despite much work on this subject [ 37,27,28,8,19,36 ] , very little is known about characterizations of truthfulness in combinatorial auctions ( and in other multi-parameter environments ) .", "( 2 ) our computational complexity results depend on the assumption that sat does not have polynomial - size circuits .", "can this assumption be relaxed by proving probabilistic versions of our vc machinery ( see appendix a ) ?", "we believe that our work opens a new avenue for proving complexity - theoretic inapproximability results for maximal - in - range mechanisms for auctions .", "in particular , the following important questions remain wide open : ( 1 ) can our inapproximability results be made to hold for all truthful mechanisms ?", "so far , despite much work on this subject [ 37,27,28,8,19,36 ] , very little is known about characterizations of truthfulness in combinatorial auctions ( and in other multi-parameter environments ) .", "( 2 ) our computational complexity results depend on the assumption that sat does not have polynomial - size circuits .", "can this assumption be relaxed by proving probabilistic versions of our vc machinery ( see appendix a ) ?"], "tgt_txt": "vc v. vcg : inapproximability of combinatorial auctions via generalizations of the vc dimension michael schapira yale university and uc berkeley joint work with christos papadimitriou and yaron singer ( 2008 ) and elchanan mossel , christos papadimitriou and yaron singer ( 2009 ) auctions : different concerns computational concerns : bounded computational resources optimization economic concerns : truthful behaviour fairness computatio nal efficiency incentivecompatibilit y algorithmic mechanism design can these different desiderata coexist ?<q>the central problem in algorithmic mechanism design [ nisan - ronen ] illustration : restricted combinatorial auctions a set of m items for sale { 1 , m } .<q>n bidders { 1 , , n } .<q>each bidder i has an additive valuation with a spending constraint vi .<q>per - item values ai1 , , aim maximum spending value bi for every bundle s , vi ( s ) = min { j in s aij , bi } , goal : find a partition of the items between the bidders s1 , , sn such that social welfare i vi ( si ) is maximized what do we want ?<q>quality of the solution : as close to the optimum as possible .<q>computationally tractable : polynomial running time ( in n and m ) .<q>truthful : motivate ( via payments ) agents to report their true values .<q>the utility of each user is ui = vi ( s ) pi solution concepts : dominant strategies , ex-post nash .<q>state of the art easy from an economic perspective .<q>vcg !<q>easy to solve computationally .<q>np - hard ( even for n = 2 ) [ lehmann - lehmann - nisan ] but we can get arbitrarily close to the optimum for any constant n ( ptas ) !<q>[ andelman - mansour ] can both be achieved simultaneously ?<q>huge gap !<q>?<q>non-truthful : get arbitrarily close to opt .<q>truthful : 1 / n - appx mechanism truthfulness and computation clash : combinatorial public projects problem ( cppp ) orthogonal to combinatorial auctions ( elections , overlay networks ) .<q>easy from a purely economic perspective ( vcg ) , and from a purely computational perspective ( in apx ) .<q>theorem ( informal ) [ papadimitriou - s - singer ] : no truthful and computationally - efficient mechanism for cppp obtains a constant approximation ratio .<q>combinatorial public projects : the proof complexit y theory mechanis m design combinator ics ( the embedding of np - hard problems ) ( characterization of truthful mechanisms , based on roberts theorem ) ( vc dimension ) what about combinatorial auctions ?<q>complexit y theory mechanis m design combinator ics ( the embedding of np - hard problems ) ( characterization of truthful mechanisms , based on roberts theorem ) ( vc dimension ) consider a specific class of mechanisms ( vcg - based ) .<q>generalize the vc dimension to handle partitions of a universe .<q>vcg - based mechanisms vcg - based = maximal - in - range ( mir ) .<q>mir mechanisms provide the best known ( deterministic ) approximations for a large variety of problems : combinatorial auctions ( general , subadditive , submodular ) .<q>multi-unit auctions .<q>unrelated machine scheduling .<q>in fact , sometimes mir is all you can do .<q>[ roberts , lavi - mualem - nisan , dobzinski - sundararajan , papadimitriou - ssinger ] maximal - in - range mechanisms a mechanism m is mir ( = vcg - based ) if : theres a fixed subset rm of the possible outcomes ( allocations of the m items between the n bidders ) = ms range .<q>for every valuation profile ( v1 , vn ) m outputs the optimal partition in rm .<q>example : the trivial ( 1 / n - appx . )<q>mechanism bundle all items together .<q>allocated them to the highest bidder .<q>fact : mir mechanisms are truthful ( vcg ) .<q>rm all partitions can we do better than the trivial mir mechanism ?<q>can we choose rm such that the optimum in rm always provides a constant approximation to the global optimum .<q>optimizing over rm can be done in a computationallyefficient manner .<q>not for the more general class of submodular valuations !<q>[ dobzinski - nisan ] but the input there is assumed to be exponentially large !<q>( exp .<q>communication ) what about succinctly - described valuations ?<q>no computational - complexity results are known !<q>the case of 2 bidders not trivial even for n = 2 !<q>we shall focus on this case .<q>let us first consider the ( more easy ) allocate - all - items case .<q>all outcomes in rm do not leave any item unallocated .<q>theorem : no computationally - efficient mir mechanism m obtains an appx - ratio of + in the allocate - all - items case .<q>unless np has polynomial size circuits .<q>proof let m be a mir mechanism for the 2bidder case .<q>assume , by contradiction , that m obtains an appx - ratio of ( 1/2 + ) .<q>we shall prove that optimizing over rm implicitly means solving an nphard problem .<q>proof ( intuition ) items mechanism m rm m is ( implicitly ) optimally solving a 2 - item auction proof so , we wish to prove the existence of a subset of items e that is shattered by ms range ( rm ) .<q>embed a smaller auction in e. not too small !<q>( | e | m ) vc dimension !<q>proof lemma : if a mir mechanism m obtains an appx - ratio of + in the allocate - all - items case then | rm | 2m ( for some constant > 0 ) .<q>proof by probabilistic construction .<q>corollary : bidder 1 can be assigned at least 2m different subsets of items by m. denote this collection of subsets by rm ,1 proof the sauer - shelah lemma : let r be a collection of subsets of a universe u. then , there exists a subset e of u such that : rs projection on e is 2e .<q>| e | ( log ( | r | ) / log ( | u | ) ) .<q>corollary ( set r = rm ,1 ) : there is a subset of items e , | e | m , s.t. bidder 1 can be assigned all subsets of e in m. corollary : all partitions of e are induced by rm .<q>because all items are allocated .<q>proof we can now conclude that if m optimizes over its range then it is optimally solving an identical auction with m items .<q>an np - hard task .<q>a non-uniform reduction .<q>we do not know how to find e in polynomial time .<q>so no computationally - efficient mir mechanism m obtains an appx - ratio of + in the allocate - all - items case ( unless np has polynomial size circuits ) .<q>qed getting rid of the allocate - allitems assumption not trivial !<q>if we just allocate unallocated items arbitrarily we might lose the mir property !<q>our approach : generalizing the vc dimension .<q>of independent interest .<q>an analogue of the sauershelah lemma definition : a partition of a universe is a pair of disjoint subsets of the universe .<q>does not necessarily exhaust the universe !<q>definition : two partitions , ( t1 , t2 ) and ( t1 , t2 ) , are said to be b - far ( or at distance b ) if | t1 u t2 | + | t1 u t2 | b .<q>an analogue of the sauershelah lemma lemma : let > 0 be some constant .<q>let r be a collection of partitions of a universe u , such that every two partitions in r are | u | - far .<q>then , there exists a subset e of u such that : rs projection on e is all partitions of e. | e | ( log ( | r | ) / log ( | u | ) ) .<q>a lower bound theorem : for any mir mechanism m that obtains an appx - ratio of + , there exists some r rm such that r is exponential in m. every two partitions in r are m - far ( for some constant > 0 ) theorem : no computationally - efficient mir mechanism m obtains an appx - ratio of + unless np has polynomial size circuits .<q>directions for future research a recent result [ buchfuhrer - umans ] : for any constant n , no mir mechanism m obtains an appx - ratio of 1 / n + ( unless np has polynomial size circuits ) .<q>tight for all constant ns .<q>non-constant ns ?<q>other classes of valuation functions .<q>characterizing truthful mechanisms for combinatorial auctions .<q>relaxing the computational assumption .<q>many intriguing questions regarding the vc dimension of partitions .<q>thank youthank you", "sections": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17], "token_sections": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]}