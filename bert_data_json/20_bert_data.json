{"src": [101, 2057, 2817, 1996, 22863, 23207, 4818, 2270, 2622, 3291, 1006, 18133, 9397, 1007, 1999, 2029, 1050, 6074, 2024, 4137, 1037, 16745, 1997, 1049, 4219, 1997, 2946, 1047, 2061, 2004, 2000, 25845, 1996, 2591, 7574, 1012, 102, 101, 22863, 23207, 4818, 2270, 3934, 2024, 2019, 24504, 1997, 2116, 7692, 1011, 8775, 3471, 1006, 4274, 1011, 3141, 2897, 2640, 1010, 3864, 1010, 4385, 29625, 1007, 1012, 102, 101, 2009, 2003, 2124, 2008, 2065, 2035, 6074, 2031, 4942, 5302, 8566, 1011, 2474, 2099, 26004, 2015, 2059, 1037, 5377, 20167, 2003, 9353, 4048, 13331, 3468, 1999, 17505, 2051, 1012, 102, 101, 2174, 1010, 4942, 5302, 8566, 8017, 3012, 2003, 1037, 2844, 11213, 2008, 2515, 2025, 2467, 2907, 1999, 3218, 1012, 102, 101, 2057, 2265, 2008, 1006, 4406, 2714, 3471, 2107, 2004, 22863, 23207, 4818, 10470, 2015, 1007, 2130, 7263, 23370, 2015, 1997, 1996, 4942, 5302, 8566, 8017, 3012, 11213, 2765, 1999, 2512, 29624, 8663, 12693, 2102, 2896, 19202, 2005, 20167, 1012, 102, 101, 2045, 2024, 2536, 2613, 1011, 2088, 10906, 1999, 2029, 1037, 2275, 1997, 4219, 2003, 4217, 2000, 13643, 3710, 2019, 2972, 2451, 1024, 1999, 3864, 1010, 2005, 6013, 1010, 5347, 2024, 4217, 2000, 3710, 1037, 2451, 1997, 7206, 1012, 102, 101, 2163, 5454, 2029, 4925, 2000, 3857, 2005, 1996, 5770, 1997, 2037, 3901, 1012, 102, 101, 2178, 5875, 2742, 2003, 2008, 1997, 10549, 2058, 8485, 6125, 1999, 1996, 4274, 1031, 1017, 29623, 2475, 1033, 1006, 2005, 6013, 1010, 1999, 1996, 6123, 1997, 6970, 9527, 8113, 16972, 1007, 1024, 1037, 13045, 1999, 1996, 2897, 15867, 1996, 15502, 16745, 1997, 14164, 2000, 2799, 4026, 2083, 1010, 1999, 1037, 5450, 2029, 2003, 2087, 15189, 102, 101, 2107, 2019, 2058, 8485, 1011, 1996, 16745, 1997, 4217, 14164, 2083, 2029, 4026, 2003, 19578, 1011, 2003, 15189, 2000, 2367, 7846, 1999, 2367, 5445, 1012, 102, 101, 2023, 9005, 1996, 7669, 1997, 20446, 6026, 1996, 2591, 7574, 1999, 2023, 4292, 1006, 2004, 1999, 1996, 10906, 2682, 1007, 1012, 102, 101, 1996, 22863, 23207, 4818, 2270, 2622, 3291, 1006, 18133, 9397, 1007, 1010, 3728, 3591, 1998, 3273, 1999, 1031, 2324, 1033, 1010, 2003, 2019, 24504, 1997, 2107, 10906, 1012, 102, 101, 1999, 18133, 9397, 2045, 2024, 1049, 4219, 1998, 1050, 6074, 1010, 2169, 2007, 1037, 26004, 3853, 4225, 2058, 2035, 16745, 2015, 1997, 4219, 1010, 1998, 1996, 7863, 2003, 2000, 5454, 1996, 1047, 4219, 2029, 25845, 1996, 2591, 7574, 1997, 1996, 6074, 1012, 102, 101, 2009, 2003, 3733, 2000, 2156, 2008, 18133, 9397, 2003, 27937, 2524, 1012, 102, 101, 2174, 1010, 1999, 1996, 2553, 2073, 2169, 26004, 3853, 2003, 4942, 5302, 8566, 8017, 18133, 9397, 4473, 2005, 2204, 20167, 2015, 1031, 2321, 29623, 15136, 1033, 1006, 2306, 1015, 1597, 1015, 1041, 1007, 1012, 102, 101, 1018, 1037, 26004, 3853, 1058, 2003, 2056, 2000, 2022, 4942, 5302, 8566, 8017, 2065, 2005, 2296, 2048, 16745, 2015, 1997, 4219, 1055, 1010, 1056, 2057, 2031, 1058, 1006, 1055, 1605, 1056, 1007, 1009, 1058, 1006, 1055, 1604, 1056, 1007, 1608, 1058, 1006, 1055, 1007, 1009, 1058, 1006, 1056, 1007, 1012, 102, 101, 1999, 2023, 3259, 2057, 2817, 18133, 9397, 1010, 7995, 2006, 15078, 1998, 4807, 11619, 2896, 19202, 2029, 2765, 2013, 23370, 2015, 1997, 1996, 2682, 4942, 5302, 8566, 8017, 3012, 3200, 1012, 102, 101, 5262, 1010, 2041, 1997, 1996, 25028, 2015, 1997, 3471, 2029, 2064, 2022, 8212, 2004, 22863, 23207, 4818, 2270, 3934, 1010, 1999, 2116, 12107, 1996, 4942, 5302, 8566, 8017, 3012, 27142, 2515, 2025, 6611, 1012, 102, 101, 2057, 19141, 2023, 2391, 1999, 2930, 1016, 1010, 2073, 2057, 2265, 2129, 1996, 4489, 2090, 4942, 5302, 8566, 8017, 1998, 2236, 26004, 2015, 18600, 2090, 2048, 9428, 2485, 4274, 1011, 3141, 2897, 2640, 3471, 1006, 2058, 8485, 6125, 1007, 1012, 102, 101, 2256, 2364, 2765, 2003, 4760, 2008, 2130, 2235, 23370, 2015, 1997, 1996, 4942, 5302, 8566, 8017, 3012, 3200, 1999, 22863, 23207, 4818, 2270, 3934, 2765, 1999, 2844, 27118, 9397, 3217, 9048, 2863, 8553, 19202, 1024, 9872, 1024, 11381, 2019, 20167, 6463, 1997, 1049, 1037, 26004, 3853, 1058, 2003, 4942, 4215, 23194, 3512, 2065, 2005, 2296, 2048, 16745, 2015, 1997, 4219, 1055, 1010, 1056, 2057, 2031, 2008, 102, 101, 1999, 2755, 1010, 2057, 6011, 2256, 2896, 5391, 2005, 1037, 2062, 7775, 2465, 1997, 26004, 2015, 2170, 12884, 3973, 1011, 4942, 4215, 23194, 3512, 1031, 1022, 1033, 1006, 3107, 1999, 1031, 2459, 1033, 1998, 12061, 1000, 1060, 2891, 1000, 2045, 1007, 1012, 102, 101, 2023, 2896, 5391, 21009, 2008, 1999, 3408, 1997, 22480, 9581, 8553, 2045, 2003, 1037, 4121, 6578, 2090, 1996, 4942, 5302, 8566, 8017, 1998, 4942, 4215, 23194, 3512, 2553, 1012, 102, 101, 2023, 2003, 1999, 9762, 5688, 2000, 2054, 2003, 2124, 2055, 1996, 3141, 22863, 23207, 4818, 10470, 2015, 3291, 1010, 2005, 2029, 1037, 1016, 1011, 20167, 2003, 9353, 4048, 13331, 3468, 2005, 4942, 4215, 23194, 3512, 26004, 2015, 1031, 1022, 1033, 1012, 102, 101, 2057, 2265, 2008, 2256, 2896, 5391, 2003, 3053, 4389, 2011, 10886, 1037, 3722, 1051, 1006, 1049, 1999, 1031, 2324, 1033, 2009, 2003, 3491, 1010, 2005, 1996, 2553, 1997, 18133, 9397, 2007, 4942, 5302, 8566, 8017, 26004, 2015, 1010, 2008, 2096, 1037, 5377, 20167, 6463, 2003, 2825, 1010, 2053, 2107, 6463, 2003, 9353, 4048, 13331, 3468, 3081, 3606, 3993, 13792, 102, 101, 1996, 1051, 1006, 1049, 1015, 1016, 1007, 20167, 9896, 2005, 4942, 4215, 23194, 3512, 26004, 2015, 3591, 1999, 2023, 3259, 2003, 3606, 3993, 1012, 102, 101, 6516, 1010, 2256, 3463, 2265, 2008, 1996, 23608, 1997, 18133, 9397, 2007, 4942, 4215, 23194, 3512, 26004, 2015, 2003, 2349, 2000, 15078, 4436, 1998, 2025, 2000, 1996, 3606, 20938, 9095, 1012, 102, 101, 2008, 2003, 1010, 3606, 3993, 20167, 13792, 4685, 2074, 1010, 2030, 3053, 1010, 2004, 2092, 2004, 16591, 20623, 13792, 29625, 16294, 3973, 1010, 2057, 2817, 1996, 22480, 9581, 8553, 1997, 18133, 9397, 2007, 2236, 26004, 2015, 1012, 102, 101, 2057, 6011, 2048, 21053, 2896, 19202, 1010, 2028, 1999, 1996, 15078, 1011, 11619, 2944, 1998, 2028, 1999, 1996, 4807, 1011, 11619, 2944, 1024, 9872, 1024, 11381, 2019, 20167, 1997, 1051, 1006, 1050, 1015, 1016, 1597, 1007, 1999, 18133, 9397, 2007, 2236, 26004, 2015, 1010, 2005, 2151, 1028, 1014, 1010, 2003, 5263, 4983, 102, 101, 11381, 2019, 20167, 1997, 1051, 1006, 1050, 1015, 1597, 1007, 2003, 5263, 4983, 1052, 1027, 1062, 2361, 1052, 1012, 102, 101, 9872, 1024, 11381, 2019, 20167, 1997, 1006, 1015, 1597, 1007, 1050, 2005, 18133, 9397, 2007, 2236, 26004, 2015, 5942, 27258, 4807, 1999, 1049, 1006, 2005, 2151, 1028, 1014, 1998, 2005, 2151, 1050, 1026, 29629, 1016, 1049, 1007, 1012, 102, 101, 1999, 2023, 2930, 2057, 6246, 2556, 18133, 9397, 1998, 2256, 2944, 1012, 102, 101, 2057, 9587, 29068, 3686, 18133, 9397, 2011, 10886, 2019, 4274, 1011, 3141, 2897, 2640, 4292, 2029, 2003, 8100, 19788, 2004, 1037, 22863, 23207, 4818, 2270, 2622, 1012, 102, 101, 2057, 2224, 2023, 2742, 2000, 19141, 1996, 5197, 1997, 6195, 23370, 2015, 1997, 4942, 5302, 8566, 8017, 3012, 1012, 102, 101, 1999, 18133, 9397, 2045, 2003, 1037, 2275, 1997, 1050, 6074, 1050, 1027, 1063, 1015, 1010, 1012, 1012, 1012, 1010, 1050, 1065, 1010, 1037, 2275, 1997, 1049, 4219, 1049, 1027, 1063, 1015, 1010, 1012, 1012, 1012, 1010, 1049, 1065, 1010, 1998, 1037, 16381, 1015, 1608, 1047, 1608, 1049, 29625, 2169, 4005, 2038, 1037, 102, 101, 2057, 2191, 2048, 3115, 17568, 4953, 2169, 26004, 3853, 1058, 1045, 1024, 2008, 1058, 1045, 1006, 1593, 1007, 1027, 1014, 1006, 3671, 3550, 1007, 1998, 2008, 2005, 2035, 1055, 1611, 1056, 1611, 1031, 1049, 1033, 2009, 4324, 2008, 1058, 1045, 1006, 1055, 1007, 1608, 1058, 1045, 1006, 1056, 1007, 1006, 2512, 29624, 3207, 16748, 21369, 3070, 102, 101, 1996, 7863, 1999, 18133, 9397, 2003, 2000, 2424, 1037, 16745, 1997, 4219, 1055, 1008, 1997, 2946, 1047, 2029, 25845, 2015, 1996, 2591, 1011, 7574, 1012, 102, 101, 2008, 2003, 1010, 2057, 4299, 2000, 2424, 1055, 1008, 1596, 12098, 21693, 8528, 1055, 1611, 1031, 1049, 1033, 1010, 1064, 1055, 1064, 1027, 1047, 1045, 1058, 1045, 1006, 1055, 1007, 1012, 102, 101, 2057, 5478, 13792, 2005, 18133, 9397, 2000, 2448, 1999, 2051, 2008, 2003, 17505, 1999, 1996, 3019, 11709, 1997, 1996, 3291, 1011, 1050, 1998, 1049, 1012, 102, 101, 1999, 2070, 3572, 6074, 1005, 26004, 2015, 2064, 2022, 9530, 18380, 2135, 3421, 1006, 12359, 1999, 2686, 17505, 1999, 1049, 1998, 1050, 1007, 1012, 102, 101, 1999, 2122, 3572, 2057, 4299, 2000, 8849, 1996, 15078, 11619, 1997, 1996, 3291, 29625, 14406, 22507, 1010, 1999, 2236, 1010, 1996, 2946, 1997, 1996, 1000, 7953, 1000, 1006, 1996, 26004, 2015, 1007, 2064, 2022, 27258, 1999, 1049, 1010, 1998, 2061, 2057, 2442, 20648, 2129, 2009, 2064, 2022, 11570, 1012, 102, 101, 2057, 2202, 1037, 1000, 2304, 3482, 1000, 1006, 5509, 11619, 1007, 3921, 1006, 2156, 1031, 1019, 1033, 1007, 1024, 2296, 26004, 3853, 2003, 5071, 2000, 2022, 3421, 2011, 2019, 14721, 2029, 2064, 3437, 1037, 3056, 2828, 1997, 10861, 5134, 1010, 1998, 2057, 21573, 2256, 13792, 2000, 3198, 17505, 2135, 1006, 1999, 2119, 102, 101, 2057, 5136, 2048, 3115, 4127, 1997, 10861, 5134, 1024, 1011, 3643, 10861, 5134, 1024, 1037, 3643, 23032, 2000, 1037, 26004, 1058, 1045, 2003, 1999, 1996, 2433, 1997, 1037, 16745, 1997, 4219, 1055, 1611, 1031, 1049, 1033, 1012, 102, 101, 1996, 3437, 2003, 3432, 1058, 1045, 1006, 1055, 1007, 1012, 102, 101, 2023, 2003, 1037, 3019, 2828, 1997, 23032, 2000, 2224, 2043, 12697, 13792, 2005, 18133, 9397, 1012, 102, 101, 1011, 2236, 10861, 5134, 1024, 1037, 2236, 23032, 4473, 2151, 2828, 1997, 3980, 1006, 2130, 15078, 2135, 26721, 23576, 3924, 1007, 1010, 2004, 2146, 2004, 2169, 3160, 2003, 8280, 2000, 1037, 2309, 1058, 1045, 1012, 102, 101, 2057, 2069, 5478, 2008, 1996, 1000, 2946, 1000, 1997, 1996, 23032, 2025, 2022, 2205, 1000, 2312, 1000, 1012, 102, 101, 2023, 2003, 5662, 2000, 23711, 1005, 2015, 4807, 2944, 1031, 2322, 1033, 1999, 2029, 1996, 2367, 4243, 2024, 15078, 2135, 18168, 3490, 11008, 4765, 1998, 2057, 5468, 1996, 2193, 1997, 9017, 2027, 2442, 3863, 2000, 24134, 1037, 2445, 3853, 1006, 2156, 2019, 4955, 2000, 4807, 11619, 1999, 1031, 2260, 1033, 1007, 1012, 102, 101, 1996, 14269, 3997, 1997, 2236, 10861, 5134, 2003, 6179, 2005, 4760, 17727, 15094, 13464, 3463, 1012, 102, 101, 5136, 1996, 2206, 4274, 1011, 4427, 4292, 1031, 1017, 29623, 2475, 1033, 2057, 2655, 1996, 2058, 8485, 2897, 3291, 1024, 2057, 2024, 2445, 1037, 2897, 10629, 1043, 1027, 1006, 1058, 1010, 1041, 1007, 1010, 2073, 2615, 1027, 1055, 1605, 1049, 1605, 1040, 1006, 1055, 1010, 1049, 1010, 1040, 2024, 4487, 2015, 5558, 18447, 1007, 1012, 102, 101, 2057, 4618, 6523, 2000, 1996, 14164, 1999, 1055, 2004, 3120, 1011, 14164, 1010, 2000, 1996, 14164, 1999, 1049, 2004, 4022, 2058, 8485, 14164, 1010, 1998, 2000, 1996, 14164, 1999, 1040, 2004, 7688, 3630, 6155, 1012, 102, 101, 7868, 2008, 2045, 2003, 2070, 12046, 3853, 1049, 2008, 24022, 1037, 2512, 29624, 2638, 26792, 2613, 3643, 1049, 1041, 2000, 2296, 1041, 1596, 1041, 1006, 7868, 2008, 1049, 1005, 2015, 3643, 2005, 1037, 2512, 29624, 10288, 27870, 3372, 3341, 2003, 1601, 1007, 1012, 102, 101, 2169, 13045, 1045, 1596, 1055, 2038, 1037, 26004, 3853, 1058, 1045, 2008, 24022, 1037, 2512, 29624, 2638, 26792, 2613, 3643, 2000, 2296, 16745, 1997, 4022, 2058, 8485, 2015, 1049, 1611, 1049, 1012, 102, 101, 29202, 2135, 1010, 2005, 2296, 1049, 1611, 1049, 1010, 1058, 1045, 1006, 1049, 1007, 27171, 1045, 1005, 2015, 4792, 2000, 2799, 2083, 1049, 2000, 1996, 14164, 1999, 1040, 29625, 2169, 1058, 1045, 2003, 8335, 2007, 1996, 12046, 1049, 1999, 1996, 2206, 3168, 1024, 2005, 2296, 1049, 1010, 1049, 1611, 1049, 1010, 1058, 1045, 102, 101, 1019, 1996, 3125, 2003, 2000, 5454, 2019, 2058, 8485, 2897, 2013, 1996, 4022, 2058, 8485, 14164, 1012, 102, 101, 2005, 1037, 2445, 16381, 1015, 1608, 1047, 1608, 1064, 1049, 1064, 1010, 2057, 2215, 2000, 2424, 1037, 16745, 1997, 1049, 1997, 2946, 1047, 2008, 25845, 2015, 1996, 2591, 7574, 1997, 1996, 3120, 14164, 1012, 102, 101, 2008, 2003, 1010, 2057, 4299, 2000, 2424, 1037, 2275, 1049, 1008, 1027, 12098, 21693, 8528, 1049, 1611, 1049, 1010, 1064, 1049, 1064, 1027, 1047, 1173, 1045, 1596, 1055, 1058, 1045, 1006, 1049, 1007, 1012, 102, 101, 2009, 2003, 3733, 2000, 2156, 2008, 1996, 2058, 8485, 2897, 3291, 2003, 1037, 2569, 2553, 1997, 18133, 9397, 1999, 2029, 1996, 6074, 2024, 1996, 3120, 14164, 1010, 1996, 4219, 2024, 1996, 4022, 2058, 8485, 2015, 1998, 1996, 6074, 1005, 26004, 2015, 2024, 10572, 2011, 1996, 2897, 10629, 1998, 1996, 12046, 3853, 1020, 1012, 102, 101, 2057, 10782, 2090, 2048, 4617, 1997, 2023, 3291, 1010, 2029, 19141, 1996, 2502, 5966, 2090, 12107, 2005, 2029, 4942, 5302, 8566, 8017, 3012, 2515, 1010, 1998, 2515, 2025, 1010, 6611, 1024, 1011, 1996, 4942, 5302, 8566, 8017, 2553, 1024, 11949, 2008, 2065, 2053, 2048, 14164, 1999, 1049, 2024, 3495, 4198, 3081, 2019, 3341, 1999, 1041, 2059, 1996, 102, 101, 2023, 2003, 2349, 2000, 1996, 2755, 2008, 2027, 8327, 1996, 16922, 14785, 5300, 3200, 2008, 2003, 2124, 2000, 2022, 5662, 2000, 4942, 5302, 8566, 8017, 3012, 1024, 2005, 2296, 13045, 1045, 1596, 1055, 1010, 2005, 2296, 1049, 1611, 1049, 1611, 1049, 1010, 1998, 2005, 2296, 1037, 1596, 1049, 1010, 2009, 4324, 2008, 2615, 1045, 1006, 102, 101, 1011, 1996, 2512, 29624, 6342, 25526, 7716, 7934, 2553, 1024, 1999, 1996, 2062, 2236, 2553, 1010, 1999, 2029, 14164, 1999, 1049, 2064, 2022, 4198, 2000, 2028, 2178, 1010, 1996, 26004, 4972, 2024, 2053, 2936, 12361, 2000, 2022, 4942, 5302, 8566, 8017, 1012, 102, 101, 2005, 2742, 1010, 2228, 1997, 1037, 2897, 10629, 1043, 1027, 1006, 1058, 1010, 1041, 1007, 2007, 2176, 14164, 1024, 1037, 2309, 3120, 13045, 1045, 1010, 1037, 2309, 7688, 13045, 1040, 1010, 1998, 2048, 4022, 2058, 8485, 14164, 1037, 1010, 1038, 29625, 12054, 17897, 2008, 1041, 1027, 1063, 1006, 1045, 1010, 1037, 1007, 1010, 1006, 102, 101, 11949, 2008, 1058, 1045, 2003, 5262, 8335, 2007, 1049, 1010, 2021, 2003, 4445, 4942, 5302, 8566, 8017, 4496, 4942, 4215, 23194, 3512, 29625, 2378, 2023, 2944, 1996, 4489, 2090, 2236, 1998, 4942, 5302, 8566, 8017, 26004, 2015, 16896, 2013, 3251, 2030, 2025, 1996, 14164, 1999, 1049, 2024, 4198, 2000, 2169, 2060, 1012, 102, 101, 2122, 1019, 6246, 1010, 2005, 2296, 13045, 1045, 1596, 1055, 1010, 1998, 2005, 2296, 16745, 1049, 1611, 1049, 2057, 9375, 25022, 1006, 1049, 1007, 2000, 2022, 1996, 7680, 1997, 1996, 10742, 1997, 1996, 20047, 10425, 2013, 1045, 2000, 2035, 14164, 1999, 1040, 2008, 2069, 2175, 2083, 14164, 1999, 1049, 1012, 102, 101, 2008, 2003, 1010, 2065, 2057, 9375, 1006, 100, 1045, 1596, 1055, 1010, 1040, 1596, 1040, 1007, 1039, 8909, 1006, 1049, 1007, 2000, 2022, 1996, 3091, 1997, 1996, 20047, 2799, 1006, 2445, 1049, 1007, 2008, 2038, 1045, 2004, 2049, 2034, 13045, 1010, 1040, 2004, 2049, 2197, 13045, 1010, 1998, 2035, 7783, 102, 101, 6819, 1006, 1049, 1007, 1609, 6819, 1006, 1049, 1007, 2065, 2546, 25022, 1006, 1049, 1007, 1608, 25022, 1006, 1049, 1007, 1012, 102, 101, 5351, 2063, 7976, 2407, 1997, 1058, 2046, 1055, 1010, 1049, 1010, 1998, 1040, 2003, 2069, 3223, 2005, 7496, 1997, 13080, 1012, 102, 101, 9428, 11259, 1998, 27018, 5966, 2599, 2000, 13302, 1997, 4942, 5302, 8566, 8017, 3012, 2029, 9587, 29068, 3686, 2256, 2817, 1997, 18133, 9397, 2007, 26004, 2015, 2029, 2024, 2025, 4942, 5302, 8566, 8017, 1012, 102, 101, 1999, 2023, 2930, 2057, 2817, 18133, 9397, 2007, 4942, 4215, 23194, 3512, 26004, 2015, 1012, 102, 101, 2057, 6011, 2256, 2364, 2765, 1010, 2029, 2003, 4760, 1037, 2896, 5391, 1997, 1049, 1015, 1018, 2005, 1037, 2465, 9975, 4838, 1999, 4942, 4215, 23194, 3512, 26004, 2015, 1012, 102, 101, 2023, 2765, 3065, 2008, 23370, 2015, 1997, 4942, 5302, 8566, 8017, 3012, 2008, 2089, 4025, 2235, 2012, 2034, 6054, 1010, 1998, 2024, 2025, 2205, 17047, 2005, 2060, 3471, 1006, 1041, 29625, 2290, 29625, 1010, 22863, 23207, 4818, 10470, 2015, 1031, 1021, 29623, 2620, 1033, 1007, 1010, 2599, 2000, 29205, 20167, 21879, 2005, 18133, 9397, 29625, 8545, 2265, 2008, 2023, 2896, 5391, 2003, 3053, 4389, 2011, 10886, 102, 101, 2023, 9896, 2036, 2038, 1996, 5056, 1997, 2108, 3606, 3993, 1012, 102, 101, 6516, 1010, 2057, 2265, 2008, 2005, 18133, 9397, 2007, 4942, 4215, 23194, 3512, 26004, 2015, 1996, 6578, 2090, 3606, 3993, 1998, 16591, 20623, 13792, 1999, 3408, 1997, 20167, 6463, 2003, 27018, 1006, 2023, 2003, 1999, 5688, 2000, 1996, 4942, 5302, 8566, 8017, 2553, 1999, 2029, 1996, 6578, 2003, 4121, 1031, 2324, 1033, 1007, 1012, 102, 101, 2057, 6011, 2256, 2765, 2005, 12884, 3973, 1011, 4942, 4215, 23194, 3512, 26004, 2015, 1031, 1022, 1033, 1006, 4225, 1999, 1031, 2459, 1033, 1998, 12061, 1000, 1060, 2891, 1000, 2045, 1007, 1012, 102, 101, 2023, 2765, 2003, 4719, 1999, 1996, 4807, 11619, 1006, 2236, 10861, 5134, 1007, 2944, 1012, 102, 101, 2947, 1010, 2057, 2265, 2008, 2130, 2065, 6074, 2024, 15078, 2135, 14668, 1996, 2193, 1997, 9017, 2027, 2442, 3863, 2000, 6855, 1037, 2204, 20167, 2003, 29205, 1012, 102, 101, 1996, 6947, 3594, 1037, 4013, 3676, 27965, 4588, 2810, 1997, 1037, 3074, 1997, 16745, 2015, 1997, 4219, 1010, 2029, 2038, 6179, 22863, 23207, 4818, 5144, 1012, 102, 101, 2122, 5144, 2024, 2059, 18516, 1999, 1037, 7312, 2013, 1037, 2092, 2124, 3291, 1999, 4807, 11619, 1012, 102, 101, 1055, 1611, 1049, 1058, 1006, 1055, 1007, 1027, 1173, 1046, 1596, 1055, 1058, 1006, 1063, 1046, 1065, 1007, 1012, 102, 101, 21858, 1010, 1037, 26004, 3853, 2003, 12884, 3973, 1011, 4942, 4215, 23194, 3512, 2065, 2009, 2003, 1996, 2391, 14244, 4555, 2058, 1037, 2275, 1997, 29167, 1006, 7399, 1007, 26004, 2015, 29625, 3207, 16294, 22753, 1016, 1012, 102, 101, 1037, 26004, 3853, 1058, 2003, 2056, 2000, 2022, 12884, 3973, 4942, 4215, 23194, 3512, 2065, 2045, 2003, 1037, 2275, 1997, 29167, 1006, 7399, 1007, 26004, 2015, 1063, 1037, 1015, 1010, 2133, 1010, 1037, 1048, 1065, 2107, 2008, 2005, 2296, 2015, 1611, 1049, 1058, 1006, 1055, 1007, 1027, 4098, 1054, 1596, 1031, 1048, 1033, 1037, 1054, 1006, 102, 101, 1996, 2465, 1997, 12884, 3973, 1011, 4942, 4215, 23194, 3512, 26004, 4972, 2003, 2124, 2000, 2022, 9975, 4838, 1999, 1996, 2465, 1997, 4942, 4215, 23194, 3512, 26004, 2015, 1998, 2000, 9975, 5383, 2035, 4942, 5302, 8566, 8017, 26004, 2015, 1031, 2459, 29623, 17134, 1033, 1012, 102, 101, 8081, 1037, 2235, 1028, 1014, 1012, 102, 101, 2057, 6011, 1996, 9872, 2005, 1996, 2553, 1050, 1027, 1047, 1027, 1600, 1049, 1012, 102, 101, 1996, 6947, 2003, 2011, 7312, 2013, 1996, 2275, 4487, 2015, 5558, 18447, 2791, 3291, 1012, 102, 101, 1999, 1996, 2275, 4487, 2015, 5558, 18447, 2791, 3291, 1010, 2057, 2031, 1050, 4243, 1012, 102, 101, 2169, 2283, 1045, 1027, 1015, 1010, 1016, 1010, 2133, 1010, 1050, 4324, 1037, 1056, 1011, 2978, 5164, 2029, 27171, 1037, 16745, 1037, 1045, 1611, 1063, 1015, 1010, 1012, 1012, 1012, 1010, 1056, 1065, 1012, 102, 101, 1996, 4243, 2024, 3223, 2000, 10782, 2090, 1996, 2048, 2206, 6034, 3572, 1024, 1015, 1012, 102, 101, 1604, 1050, 1045, 1027, 1015, 1037, 1045, 1027, 1593, 1016, 1012, 102, 101, 2005, 2296, 1045, 1027, 1046, 2009, 4324, 2008, 1037, 1045, 1604, 1037, 1046, 1027, 1593, 1996, 2275, 4487, 2015, 5558, 18447, 2791, 3291, 2001, 3273, 1999, 1031, 1015, 1033, 2073, 2009, 2001, 3491, 2000, 5478, 1179, 1006, 1056, 1050, 1018, 1007, 4807, 11619, 1012, 102, 101, 1999, 1031, 2385, 1033, 9152, 8791, 3065, 1037, 2896, 5391, 2349, 2000, 26498, 23017, 2078, 1998, 5185, 3490, 12044, 2319, 1997, 1179, 1006, 1056, 1050, 1007, 1012, 102, 101, 2005, 2256, 7312, 1010, 2057, 4299, 2000, 2034, 2265, 1996, 4598, 1997, 1037, 27258, 2135, 2312, 2155, 1997, 4520, 1997, 5167, 2007, 1037, 6179, 22863, 23207, 4818, 3200, 1024, 1031, 1049, 1033, 2003, 2056, 2000, 2031, 1996, 1054, 1011, 6840, 3200, 2065, 1010, 2005, 2296, 1055, 1010, 1056, 1596, 1042, 1010, 1064, 1055, 102, 101, 1037, 3074, 1042, 1997, 16745, 2015, 1997, 1011, 1042, 2038, 1996, 1016, 2213, 1011, 6840, 3200, 1012, 102, 101, 1011, 2005, 2169, 1055, 1596, 1042, 2009, 4324, 2008, 1064, 1055, 1064, 1609, 1600, 1049, 29625, 1011, 1064, 1042, 1064, 1609, 1041, 1155, 2213, 2005, 2070, 5377, 1155, 1028, 1014, 1012, 102, 101, 2057, 6011, 1996, 3393, 14760, 3081, 1037, 4013, 3676, 27965, 4588, 2810, 1012, 102, 101, 2169, 2275, 1055, 1596, 1042, 2003, 3833, 2011, 10549, 27423, 2012, 6721, 2169, 5783, 1048, 1596, 1031, 1049, 1033, 2000, 2022, 1999, 1055, 2007, 9723, 1049, 1597, 1015, 1016, 1012, 102, 101, 2292, 1055, 1998, 1056, 2022, 2048, 2107, 4520, 1999, 1042, 1012, 102, 101, 2057, 4299, 2000, 2265, 2008, 2169, 2107, 2275, 2003, 1000, 2312, 1000, 1998, 2008, 1996, 6840, 2090, 2068, 2003, 1000, 2235, 1000, 1010, 2007, 2200, 2152, 9723, 1012, 102, 101, 2057, 2097, 2224, 1996, 24188, 3630, 4246, 5391, 29625, 25154, 1012, 102, 101, 1006, 24188, 3630, 4246, 5391, 1007, 2292, 1060, 1015, 1010, 1012, 1012, 1012, 1010, 1060, 1049, 2022, 1037, 2275, 1997, 1049, 2981, 6721, 10857, 2008, 2202, 5300, 1999, 1063, 1014, 1010, 1015, 1065, 2107, 2008, 2005, 2296, 1048, 1010, 1052, 1054, 1031, 1060, 1048, 1027, 1015, 1033, 1027, 1052, 29625, 2059, 1010, 2005, 102, 101, 11949, 1010, 2008, 1996, 9723, 2008, 1060, 1048, 1027, 1015, 2003, 1049, 1597, 1015, 1010, 1998, 2011, 1015, 1024, 2361, 1054, 1031, 1064, 1055, 1604, 1056, 1064, 1028, 1016, 2213, 1033, 1027, 1052, 1054, 1031, 1173, 1048, 1060, 1048, 1028, 1016, 2213, 1033, 1026, 1041, 1597, 1049, 1017, 5332, 4328, 8017, 2135, 1010, 2005, 2296, 1055, 1596, 102, 101, 2947, 1010, 2057, 2113, 2045, 6526, 1037, 2155, 1997, 4520, 1042, 1027, 1063, 1055, 1015, 1010, 1012, 1012, 1012, 1010, 1055, 1056, 1065, 2073, 1056, 1027, 1041, 1155, 2213, 2005, 2070, 5377, 1155, 1028, 1014, 1010, 2007, 1996, 3200, 2008, 2296, 2275, 2003, 2012, 2560, 1997, 2946, 1600, 1049, 1998, 1064, 102, 101, 2292, 1015, 1010, 1016, 1010, 2133, 1010, 1600, 1049, 2022, 1996, 4243, 1010, 1998, 2275, 1056, 1027, 1041, 1155, 2213, 1012, 102, 101, 2292, 1037, 1045, 2022, 1996, 16745, 1997, 1031, 1056, 1033, 2218, 2011, 2283, 1045, 1012, 102, 101, 2057, 9570, 2019, 6013, 1997, 18133, 9397, 2007, 1049, 4219, 1010, 1050, 1027, 1600, 1049, 6074, 1006, 7978, 2000, 1996, 1600, 1049, 4243, 1999, 1996, 2275, 4487, 2015, 5558, 18447, 2791, 3291, 1007, 1010, 1998, 2275, 1996, 2193, 1997, 4219, 2000, 2022, 4217, 2000, 1047, 1027, 1600, 1049, 1012, 102, 101, 2057, 6709, 2169, 5783, 1054, 1596, 1031, 1056, 1033, 2007, 1037, 2275, 1055, 1054, 1999, 1996, 2155, 1042, 1997, 16745, 2015, 1997, 1031, 1049, 1033, 2649, 2682, 1012, 102, 101, 2169, 4005, 1045, 9570, 2015, 1037, 26004, 3853, 1058, 1045, 1999, 1996, 2206, 5450, 1024, 2292, 1037, 1055, 19090, 1996, 29167, 26004, 2008, 24022, 1037, 3643, 1997, 1015, 2000, 2296, 7692, 1999, 1055, 1998, 1037, 3643, 1997, 1014, 2000, 2296, 7692, 1046, 1013, 1596, 1055, 29625, 2292, 1058, 1045, 1027, 4098, 1063, 102, 101, 11949, 2008, 2065, 1045, 1037, 1045, 1027, 1593, 2059, 2045, 2003, 1037, 2275, 1055, 1054, 2008, 2038, 1037, 7978, 29167, 26004, 1999, 2035, 1997, 1996, 1058, 1045, 1005, 2015, 1012, 102, 101, 6516, 1010, 23911, 2075, 1037, 16745, 1997, 1055, 1054, 1997, 2946, 1600, 1049, 2000, 1996, 6074, 1006, 23599, 2011, 1996, 2275, 4487, 2015, 5558, 18447, 2791, 4243, 1007, 3463, 1999, 1037, 2591, 7574, 3643, 1997, 1049, 1012, 102, 101, 2054, 6433, 2065, 2005, 2296, 2048, 1045, 1027, 1046, 1596, 1031, 1056, 1033, 1055, 1045, 1604, 1055, 1046, 1027, 1593, 1029, 102, 101, 2057, 4618, 2085, 2265, 2008, 1999, 2023, 2553, 1996, 15502, 2591, 7574, 2003, 1051, 1006, 1049, 1017, 1018, 1009, 1007, 1012, 102, 101, 2023, 2052, 2812, 2008, 2019, 20167, 1997, 1051, 1006, 1049, 1015, 1018, 1597, 1007, 2000, 1996, 18133, 9397, 2007, 12884, 3973, 6342, 9024, 23194, 3512, 26004, 2015, 12939, 1996, 7835, 2090, 1996, 2048, 6034, 3572, 1999, 1996, 2275, 4487, 2015, 5558, 18447, 2791, 3291, 1012, 102, 101, 3568, 1010, 2057, 2097, 2059, 2022, 2583, 2000, 16519, 2008, 1179, 1006, 1056, 1050, 1007, 9017, 2024, 3223, 2000, 2079, 2061, 1006, 1037, 2193, 27258, 1999, 2119, 1050, 1998, 1049, 1007, 1012, 102, 101, 2061, 1010, 2057, 2024, 2187, 2007, 4760, 2008, 2065, 2005, 2296, 2048, 1045, 1027, 1046, 1596, 1031, 1056, 1033, 1055, 1045, 1604, 1055, 1046, 1027, 1593, 2059, 1996, 15502, 2591, 7574, 2003, 1051, 1006, 1049, 1017, 1018, 1009, 1007, 1012, 102, 101, 7868, 1010, 2005, 1996, 3800, 1997, 26917, 1010, 2008, 2045, 2003, 2070, 2275, 1056, 1997, 2946, 1600, 1049, 2107, 2008, 1996, 2591, 7574, 5173, 2013, 1056, 1010, 25430, 1006, 1056, 1007, 1010, 2003, 3618, 2084, 1016, 2213, 1017, 1018, 1009, 1012, 102, 101, 2292, 1037, 1045, 2022, 2019, 29167, 26004, 3853, 1997, 1045, 2005, 2029, 1058, 1045, 2003, 25845, 2094, 1006, 2005, 1056, 1007, 1012, 102, 101, 11949, 2008, 25430, 1006, 1056, 1007, 1027, 1173, 1045, 1596, 1031, 1050, 1033, 1037, 1045, 1006, 1056, 1007, 1012, 102, 101, 7868, 1010, 1059, 29625, 2140, 29625, 2080, 29625, 2290, 29625, 1010, 2008, 1056, 1027, 1063, 1015, 1010, 2133, 1010, 1600, 1049, 1065, 1012, 102, 101, 2005, 2296, 7692, 1048, 1596, 1056, 1010, 2292, 1060, 1048, 2022, 1996, 2193, 1997, 1996, 1037, 1045, 1005, 2015, 2008, 23911, 1037, 3643, 1997, 1015, 2000, 1048, 29625, 11949, 2008, 26760, 1006, 1056, 1007, 1027, 1173, 1045, 1596, 1031, 1050, 1033, 1037, 1045, 1006, 1056, 1007, 1027, 1173, 1048, 1596, 1056, 1060, 1048, 102, 101, 2036, 11949, 2008, 1173, 1048, 1596, 1056, 1060, 1048, 1006, 1060, 1048, 1597, 1015, 1007, 1027, 1173, 1045, 1027, 1046, 1064, 1055, 1045, 1604, 1055, 1046, 1604, 1056, 1064, 1012, 102, 101, 2144, 2057, 2113, 2008, 1996, 7185, 3012, 1997, 1996, 6840, 1997, 2296, 2048, 4520, 2064, 2025, 13467, 1016, 2213, 2057, 2085, 2031, 2008, 1024, 1016, 2213, 1015, 1009, 1027, 1016, 2078, 1016, 1049, 1609, 1045, 1027, 1046, 1064, 1055, 1045, 1604, 1055, 1046, 1604, 1056, 1064, 1027, 1048, 1596, 1056, 1060, 1048, 1006, 1060, 102, 101, 1006, 2023, 2003, 2349, 2000, 1996, 2755, 2008, 1996, 5409, 2553, 6463, 2003, 4719, 2043, 2035, 1060, 1048, 1005, 2015, 2024, 5020, 1012, 1007, 102, 101, 11566, 1996, 2197, 2048, 11380, 3957, 2149, 2008, 26760, 1006, 1056, 1007, 1027, 1048, 1596, 1056, 1060, 1048, 1608, 1016, 2213, 1017, 1018, 1009, 1012, 102, 101, 2057, 2265, 2008, 1996, 2765, 3090, 1999, 1996, 2682, 9872, 2003, 3053, 4389, 2011, 10886, 1037, 3722, 3606, 3993, 9896, 2029, 6855, 2015, 1037, 8117, 1063, 1047, 1010, 1600, 1049, 1065, 20167, 6463, 1006, 2005, 2151, 3643, 1997, 1047, 1998, 1050, 1007, 1998, 5942, 2012, 2087, 1050, 1087, 1049, 3643, 10861, 5134, 29625, 10760, 9896, 102, 101, 1011, 3198, 2169, 4005, 2000, 20648, 2014, 3643, 2005, 2169, 1997, 1996, 2367, 16745, 2015, 1055, 1056, 1012, 102, 101, 1011, 5454, 1996, 16745, 1055, 1056, 2008, 25845, 2015, 1996, 2591, 7574, 2072, 1058, 1045, 1006, 1055, 1056, 1007, 1012, 102, 101, 2023, 9896, 1010, 2714, 2000, 2008, 3591, 1999, 1031, 1019, 1033, 1010, 2003, 1037, 3722, 29160, 1011, 1999, 1011, 2846, 9896, 1031, 1019, 29623, 2575, 1033, 1010, 1998, 2061, 2009, 2064, 2022, 2081, 3606, 3993, 3081, 18315, 2290, 10504, 1031, 2539, 29623, 2549, 29623, 14526, 1033, 1012, 102, 101, 11949, 2008, 1996, 9896, 5262, 5942, 2012, 2087, 1049, 3643, 10861, 5134, 2000, 2022, 8280, 2000, 2169, 1997, 1996, 1050, 6074, 1012, 102, 101, 3568, 1010, 2035, 2008, 2003, 2187, 2000, 2265, 2003, 2008, 1996, 9896, 3640, 1996, 3223, 20167, 1011, 6463, 1012, 102, 101, 2057, 2265, 2023, 2005, 4942, 4215, 23194, 3512, 26004, 2015, 29625, 21572, 26994, 3943, 2065, 1058, 1015, 1010, 1012, 1012, 1012, 1010, 1058, 1050, 2024, 4942, 4215, 23194, 3512, 2059, 1996, 9896, 3640, 2019, 20167, 6463, 1997, 8117, 1063, 1047, 1010, 1600, 1049, 1065, 1012, 102, 101, 2292, 1047, 1608, 1600, 1049, 29625, 2292, 1051, 2022, 1037, 2275, 1997, 2946, 1047, 2008, 25845, 2015, 1996, 2591, 7574, 1012, 102, 101, 2059, 1010, 2011, 1006, 2009, 25284, 2224, 1997, 1007, 4942, 4215, 23194, 7730, 1010, 2005, 2296, 1045, 1596, 1031, 1050, 1033, 1010, 1058, 1045, 1006, 1051, 1007, 1608, 1046, 1596, 1051, 1058, 1045, 1006, 1063, 1046, 1065, 1007, 1012, 102, 101, 6516, 1010, 1045, 1596, 1031, 1050, 1033, 1058, 1045, 1006, 1051, 1007, 1608, 1045, 1596, 1031, 1050, 1033, 1046, 1596, 1051, 1058, 1045, 1006, 1063, 1046, 1065, 1007, 1027, 1046, 1596, 1031, 1051, 1033, 1045, 1596, 1031, 1050, 1033, 1058, 1045, 1006, 1063, 1046, 1065, 1007, 1012, 102, 101, 2023, 12748, 2008, 2045, 2003, 2019, 5783, 1046, 1596, 1031, 1049, 1033, 2107, 2008, 1996, 2591, 7574, 5173, 2013, 1046, 2003, 2012, 2560, 1015, 1064, 1051, 1064, 1027, 1015, 1047, 1997, 1996, 15502, 2591, 7574, 1012, 102, 101, 2023, 8875, 1046, 3544, 1999, 2028, 1997, 1996, 1055, 1056, 1005, 2015, 1010, 1998, 2061, 1010, 2138, 1996, 26004, 2015, 2024, 2512, 29624, 3207, 16748, 21369, 3070, 1010, 1996, 2591, 7574, 5173, 2013, 2008, 1055, 1056, 2003, 2036, 2012, 2560, 1015, 1047, 1997, 1996, 15502, 2591, 7574, 1012, 102, 101, 2144, 1996, 9896, 23569, 27605, 11254, 2058, 2035, 1996, 1055, 1056, 1005, 2015, 2009, 2003, 5391, 2000, 6162, 1996, 9059, 20167, 6463, 29625, 7485, 1047, 1028, 1600, 1049, 29625, 2292, 1051, 2022, 1996, 2275, 1997, 2946, 1047, 2008, 25845, 2015, 1996, 2591, 7574, 1012, 102, 101, 2138, 1996, 26004, 2015, 2024, 2512, 29624, 3207, 16748, 21369, 3070, 1010, 1173, 1045, 1058, 1045, 1006, 1051, 1007, 1608, 1173, 1045, 1058, 1045, 1006, 1031, 1049, 1033, 1007, 1012, 102, 101, 2292, 1055, 1015, 1010, 1012, 1012, 1012, 1010, 1055, 1600, 20301, 2070, 15275, 13571, 1997, 1031, 1049, 1033, 2046, 1600, 1049, 4487, 2015, 5558, 18447, 16745, 2015, 1997, 2946, 1600, 1049, 29625, 18077, 2075, 4942, 4215, 23194, 7730, 1999, 1037, 2126, 2714, 2000, 2008, 3491, 2682, 12748, 2008, 2005, 2028, 1997, 2122, 4520, 1996, 2591, 7574, 2003, 2012, 2560, 102, 101, 2023, 14730, 1996, 6947, 1997, 1996, 14848, 1012, 102, 101, 1999, 2023, 2930, 2057, 2817, 18133, 9397, 2007, 2236, 26004, 2015, 1006, 2021, 2145, 3671, 3550, 1998, 2512, 29624, 3207, 16748, 21369, 3070, 1007, 1012, 102, 101, 2004, 1996, 2058, 8485, 6125, 2742, 1006, 2930, 1016, 1007, 1010, 1998, 2500, 1006, 3864, 4385, 29625, 1007, 1010, 19141, 1010, 1999, 2116, 3572, 4942, 5302, 8566, 8017, 3012, 1010, 1998, 2130, 4942, 4215, 23194, 7730, 1010, 2079, 2025, 6611, 1012, 102, 101, 2057, 6011, 2844, 27118, 9397, 3217, 9048, 2863, 8553, 3463, 2005, 18133, 9397, 2007, 2236, 26004, 2015, 1999, 2119, 1996, 15078, 1011, 1998, 1996, 4807, 1011, 11619, 4275, 1012, 102, 101, 1999, 1996, 4807, 1011, 11619, 2944, 2256, 2896, 5391, 2003, 4389, 1006, 1037, 20610, 9844, 3356, 5391, 6526, 1007, 1012, 102, 101, 9872, 4601, 11381, 2019, 20167, 1997, 1051, 1006, 1050, 1015, 1016, 1597, 1007, 2000, 1996, 2591, 7574, 1999, 18133, 9397, 2007, 2236, 26004, 2015, 1010, 2005, 2151, 1028, 1014, 1010, 2003, 5263, 4983, 1052, 1027, 1050, 1052, 1012, 102, 101, 11381, 2019, 20167, 1997, 1051, 1006, 1050, 1015, 1597, 1007, 2000, 1996, 2591, 7574, 2003, 5263, 4983, 1052, 1027, 1062, 2361, 1052, 1012, 102, 101, 2057, 5547, 2013, 1996, 29160, 7574, 3392, 1006, 12464, 2102, 1007, 3291, 3273, 1999, 1996, 6123, 1997, 5500, 9896, 2594, 7337, 2640, 1031, 2184, 29623, 2683, 29623, 16932, 1033, 1012, 102, 101, 2256, 7312, 18536, 1996, 23608, 3463, 2005, 2023, 3291, 2004, 3491, 1999, 1031, 2403, 1033, 1012, 102, 101, 1999, 1996, 12464, 2102, 3291, 2057, 2024, 2445, 1037, 10629, 1043, 1027, 1006, 1050, 1010, 1048, 1007, 2007, 1037, 2275, 1997, 14164, 1050, 1998, 6971, 1048, 1012, 102, 101, 1037, 4310, 7688, 13045, 1040, 2003, 2445, 1998, 2169, 13045, 1037, 1596, 1050, 1032, 1063, 1040, 1065, 2038, 1037, 26004, 3853, 1058, 1037, 1024, 1052, 1037, 1585, 1054, 1609, 1014, 1010, 2073, 1052, 1037, 2003, 2109, 2000, 19090, 1996, 2275, 1997, 2035, 3722, 10425, 2013, 1037, 2000, 1996, 7688, 1040, 102, 101, 1996, 7863, 1999, 12464, 2102, 2003, 2000, 2433, 1037, 3392, 15685, 1999, 1040, 2029, 25845, 2015, 1996, 2591, 7574, 1010, 1045, 29625, 2063, 29625, 1010, 5454, 1996, 3392, 1056, 1008, 2107, 2008, 2102, 1008, 1596, 12098, 21693, 8528, 1056, 1596, 1056, 1040, 1048, 1037, 1596, 1050, 1032, 1063, 1040, 1065, 1058, 1037, 1006, 1056, 1007, 1010, 2073, 1056, 102, 101, 2057, 5136, 1996, 2569, 2553, 1997, 12464, 2102, 1999, 2029, 2005, 2035, 1037, 1596, 1050, 1032, 1063, 1040, 1065, 2057, 2031, 1058, 1037, 1024, 1052, 1037, 1585, 1063, 1014, 1010, 1015, 1065, 1012, 102, 101, 2009, 2003, 2124, 2008, 2005, 2151, 1028, 1014, 22480, 22835, 12464, 2102, 1010, 2130, 2005, 2023, 2569, 2553, 1010, 2306, 1037, 5387, 1997, 1051, 1006, 1050, 1015, 1016, 1597, 1007, 2003, 5263, 4983, 1052, 1027, 1050, 1052, 1998, 22480, 22835, 2306, 1037, 5387, 1997, 1051, 1006, 1050, 1015, 1597, 1007, 2003, 5263, 4983, 102, 101, 1996, 7312, 2013, 12464, 2102, 2003, 2004, 4076, 1024, 2445, 2019, 6013, 1997, 12464, 2102, 2107, 2008, 1996, 2846, 1997, 2035, 26004, 4972, 2003, 1063, 1014, 1010, 1015, 1065, 1010, 2005, 2169, 4957, 1048, 1596, 1048, 2057, 5482, 1037, 7692, 1048, 1999, 18133, 9397, 1998, 2169, 13045, 1037, 1596, 1050, 1032, 1063, 1040, 102, 101, 2009, 3464, 2000, 9375, 1996, 26004, 3853, 1997, 1037, 1012, 102, 101, 3602, 2008, 2144, 2256, 3037, 2003, 1999, 4760, 1037, 2896, 5391, 1010, 2057, 2064, 4748, 14028, 10980, 9215, 2275, 1996, 2193, 1997, 4217, 5167, 2000, 2022, 1047, 1027, 1064, 1050, 1064, 1597, 1015, 1012, 102, 101, 2085, 1010, 2292, 1052, 1009, 1037, 2022, 1996, 2275, 1997, 10425, 2005, 2029, 1058, 1037, 1027, 1015, 1012, 102, 101, 2005, 2035, 1041, 1611, 1048, 1010, 1996, 26004, 3853, 2005, 1996, 7978, 4005, 1037, 1999, 18133, 9397, 2003, 4225, 2011, 1024, 1058, 1037, 1006, 1041, 1007, 1027, 1015, 100, 1052, 1596, 1052, 1009, 1037, 1024, 1052, 1611, 1041, 1998, 1041, 1596, 1056, 1040, 1048, 1014, 4728, 1006, 1017, 1007, 11949, 2008, 102, 101, 18868, 1010, 10549, 1037, 2275, 1997, 4219, 1056, 1999, 18133, 9397, 1055, 29625, 2102, 29625, 25430, 1006, 1056, 1007, 1027, 1039, 9352, 2965, 2008, 2057, 2064, 12241, 1056, 2000, 1037, 2275, 1997, 7926, 1056, 2029, 3596, 1037, 16972, 3392, 2007, 1040, 2004, 2049, 3120, 1010, 1998, 2008, 2057, 2031, 3599, 1039, 14164, 2029, 2031, 102, 101, 11381, 2019, 20167, 6463, 1997, 1006, 1015, 1597, 1007, 1050, 2005, 2236, 26004, 2015, 5942, 27258, 4807, 1999, 1049, 1006, 2005, 2151, 1028, 1014, 1998, 2005, 2151, 1050, 1026, 29629, 1016, 1049, 1007, 1012, 102, 101, 2005, 18133, 9397, 2007, 2236, 26004, 4972, 1010, 1050, 6074, 1010, 1049, 5167, 1998, 1037, 16381, 1015, 1608, 1047, 1608, 1049, 2057, 2265, 1037, 2896, 5391, 1997, 1179, 1006, 1049, 1047, 1087, 1050, 1597, 1015, 1007, 2153, 2011, 8161, 2013, 1996, 2275, 4487, 2015, 5558, 18447, 2791, 3291, 29625, 8545, 9570, 2019, 6013, 1997, 18133, 9397, 2007, 1050, 102, 101, 2292, 1055, 1015, 1010, 1012, 1012, 1012, 1010, 1055, 1056, 2022, 1996, 1006, 3641, 1007, 4520, 1999, 1996, 2846, 1997, 2035, 2825, 16169, 2015, 1997, 2946, 1047, 29625, 2005, 2169, 2283, 1045, 1999, 2275, 4487, 2015, 5558, 18447, 2791, 2007, 1996, 2275, 1037, 1045, 1611, 1063, 1015, 1010, 1012, 1012, 1012, 1010, 1056, 1065, 1010, 2057, 102, 101, 2292, 1055, 1048, 2022, 1996, 2275, 2029, 25845, 2015, 1996, 2591, 7574, 1010, 1045, 29625, 2063, 29625, 1010, 1048, 1596, 12098, 21693, 8528, 1048, 1596, 1031, 1040, 1033, 1064, 1063, 1037, 1045, 1064, 1048, 1596, 1037, 1045, 1065, 1064, 1012, 102, 101, 2000, 15796, 1996, 2591, 7574, 2306, 1037, 5387, 1997, 1006, 1015, 1597, 1007, 1050, 2005, 2151, 1028, 1014, 1010, 2028, 2442, 2035, 24755, 2618, 2070, 2275, 1055, 2005, 2029, 2045, 2024, 2012, 2560, 2048, 6074, 1045, 1998, 1046, 2107, 2008, 1058, 1045, 1006, 1055, 1007, 1027, 1058, 1046, 1006, 1055, 1007, 1027, 102, 101, 2349, 2000, 1996, 2682, 2810, 1997, 1996, 6074, 1005, 26004, 4972, 2023, 9352, 12748, 10561, 2090, 1996, 2048, 6034, 3572, 1997, 1996, 2275, 4487, 2015, 5558, 18447, 2791, 3291, 1012, 102, 101, 2947, 1010, 2005, 1040, 1027, 1049, 1047, 2057, 2131, 1037, 2896, 5391, 1997, 1162, 1006, 1049, 1047, 1087, 1050, 1597, 1015, 1007, 2005, 18133, 9397, 2007, 2236, 26004, 4972, 29625, 2378, 1996, 4807, 2944, 1037, 20610, 9844, 3356, 5391, 1997, 1050, 6526, 1024, 23032, 2169, 4005, 1045, 2005, 2014, 2087, 11126, 2275, 1055, 102, 101, 2009, 2003, 3733, 2000, 2156, 2008, 2023, 5262, 21586, 2019, 18996, 21572, 9048, 28649, 1012, 102, 101, 25430, 2063, 22775, 4067, 4828, 2891, 13008, 22172, 4183, 9488, 2226, 2005, 2116, 14044, 1998, 5875, 10287, 1012, 102, 101, 2057, 22775, 4067, 4828, 2891, 13008, 22172, 4183, 9488, 2226, 2005, 2116, 14044, 1998, 5875, 10287, 1012, 102], "tgt": [1, 27118, 9397, 3217, 9048, 2863, 8553, 1997, 22863, 23207, 4818, 2270, 3934, 2745, 8040, 3270, 8197, 2527, 1006, 7996, 2118, 1998, 15384, 8256, 1007, 4101, 2147, 2007, 8038, 4948, 3220, 1006, 15384, 8256, 1007, 19184, 1997, 1996, 2831, 1996, 22863, 23207, 4818, 2270, 2622, 3291, 1012, 3, 1996, 4942, 5302, 8566, 8017, 2553, 4281, 1012, 3, 1037, 20610, 3606, 3993, 20167, 1011, 9896, 1012, 3, 2256, 2364, 2765, 1012, 3, 15306, 1998, 2330, 3980, 1012, 3, 9896, 2594, 7337, 2640, 9896, 2594, 7337, 2640, 9144, 2007, 12697, 8114, 10595, 2005, 11519, 7941, 3550, 3274, 3550, 10906, 1031, 9152, 8791, 1011, 6902, 2368, 1033, 1012, 3, 3138, 2046, 4070, 2119, 1996, 6143, 5248, 1997, 1996, 2367, 6818, 1998, 1996, 5156, 15078, 8122, 16852, 1012, 3, 4539, 5097, 1024, 16744, 2005, 4274, 10058, 1012, 3, 22863, 23207, 4818, 2270, 2622, 2275, 1997, 1050, 5198, 1025, 2275, 1997, 1049, 4219, 1025, 2169, 5310, 1045, 2038, 1037, 26004, 3853, 1024, 6819, 1024, 1016, 1031, 1049, 1033, 1054, 2692, 7863, 1024, 2445, 1037, 16381, 1047, 1010, 5454, 1037, 2275, 1997, 4219, 1055, 1008, 1997, 2946, 1047, 2029, 25845, 2015, 1996, 2591, 7574, 1024, 1055, 1008, 1027, 12098, 21693, 8528, 1045, 6819, 1006, 1055, 1007, 1055, 1031, 1049, 1033, 1010, 1064, 1055, 1064, 1027, 1047, 17568, 4953, 2169, 26004, 3853, 3671, 3550, 1024, 1058, 1006, 1007, 1027, 1014, 2512, 29624, 3207, 16748, 21369, 3070, 1024, 1058, 1006, 1055, 1007, 1058, 1006, 1056, 1007, 1055, 1056, 4942, 4215, 23194, 3512, 1024, 1058, 1006, 1055, 1007, 1009, 1058, 1006, 1056, 1007, 1058, 1006, 1055, 1056, 1007, 1031, 4942, 5302, 8566, 8017, 1024, 1058, 1006, 1055, 1063, 1046, 1065, 1007, 1058, 1006, 1055, 1007, 1058, 1006, 1056, 1063, 1046, 1065, 1007, 1058, 1006, 1056, 1007, 1055, 1056, 1033, 9587, 29068, 5844, 4973, 3864, 2005, 1037, 2837, 1024, 1996, 6074, 2024, 7206, 1010, 4219, 2024, 4022, 5347, 1012, 3, 2058, 8485, 6125, 1024, 2057, 4299, 2000, 7276, 1037, 16745, 1997, 14164, 1999, 1037, 10629, 2008, 2097, 3853, 2004, 2019, 2058, 8485, 2897, 1012, 3, 1031, 8299, 29627, 29626, 29626, 2078, 5244, 29625, 6169, 12502, 29625, 22930, 29625, 2098, 2226, 29626, 4948, 29626, 1033, 3229, 4275, 2129, 2064, 2057, 3229, 1996, 7953, 1029, 3, 2028, 6061, 1024, 10514, 14693, 12273, 2102, 26004, 2015, 15078, 11619, 3921, 1012, 3, 1996, 2304, 3482, 3921, 1024, 2169, 7226, 4063, 2003, 3421, 2011, 2019, 14721, 2029, 2064, 3437, 3056, 10861, 5134, 1012, 3, 4807, 11619, 3921, 1012, 3, 2054, 2079, 2057, 2215, 1029, 3, 3737, 1997, 1996, 5576, 1024, 2004, 2485, 2000, 1996, 23569, 28591, 2004, 2825, 1012, 3, 15078, 2135, 12859, 3085, 1024, 17505, 2770, 2051, 1006, 1999, 1050, 1998, 1049, 1007, 1012, 3, 3606, 3993, 1024, 9587, 29068, 3686, 1006, 3081, 10504, 1007, 6074, 2000, 3189, 2037, 2995, 5300, 7539, 1997, 2060, 6074, 4311, 1012, 3, 1996, 9710, 1997, 2169, 5310, 2003, 21318, 1027, 6819, 1006, 1055, 1007, 1011, 14255, 1996, 4942, 5302, 8566, 8017, 2553, 1031, 13008, 22172, 4183, 9488, 2226, 1011, 7020, 9912, 1033, 15078, 7339, 1024, 1037, 1015, 1011, 1015, 1013, 1041, 20167, 6463, 2003, 9353, 4048, 13331, 3468, 2349, 2000, 1996, 4942, 5302, 8566, 8017, 3012, 1997, 1996, 26004, 2015, 1006, 2021, 2025, 3606, 3993, 1007, 1037, 4389, 2896, 5391, 6526, 1031, 24664, 3351, 1033, 1012, 3, 6143, 7339, 1024, 1037, 3606, 3993, 5576, 2003, 9353, 4048, 13331, 3468, 3081, 18315, 2290, 10504, 1006, 2021, 27937, 1011, 2524, 2000, 6855, 1007, 2054, 2055, 10910, 2119, 7453, 1029, 3, 1996, 4942, 5302, 8566, 8017, 2553, 1024, 3606, 1998, 22334, 2079, 23961, 4666, 9872, 1031, 13008, 22172, 4183, 9488, 2226, 1011, 1055, 1011, 3220, 1033, 1024, 2151, 3606, 3993, 9896, 2005, 1996, 22863, 23207, 4818, 2270, 2622, 3291, 2029, 15796, 2015, 2488, 2084, 1049, 5942, 27258, 4807, 1999, 1049, 29625, 2130, 2005, 1050, 1027, 1016, 1012, 3, 13494, 2005, 2572, 2094, 1024, 1037, 4121, 6578, 2090, 3606, 3993, 1004, 17505, 13792, 1010, 1998, 3606, 3993, 1013, 17505, 13792, 1012, 3, 1037, 20610, 1049, 1011, 20167, 9896, 2005, 4942, 4215, 23194, 16402, 6074, 1996, 9896, 1024, 2065, 2463, 1010, 3432, 5454, 1996, 2309, 7692, 1046, 2005, 2029, 1996, 2591, 1011, 7574, 2003, 25845, 2094, 1012, 3, 2065, 1047, 1028, 1049, 1010, 11443, 1996, 1049, 4219, 2000, 1049, 4487, 2015, 5558, 18447, 4520, 1997, 5020, 2946, 1998, 5454, 1996, 2028, 2008, 25845, 2015, 1996, 2591, 7574, 1012, 3, 1996, 9896, 2003, 3606, 3993, 2755, 1024, 29160, 1011, 1999, 1011, 2846, 13792, 2024, 3606, 3993, 1006, 18315, 2290, 1007, 1012, 3, 1011, 1028, 1996, 20610, 20167, 9896, 2003, 1006, 7687, 1007, 1996, 2190, 3606, 3993, 9896, 2005, 1996, 4942, 5302, 8566, 8017, 2553, 1012, 3, 2036, 2005, 1996, 4942, 4215, 23194, 3512, 2553, 1012, 3, 3356, 1998, 2896, 19202, 4942, 5302, 8566, 8017, 1049, 3606, 3993, 3356, 5391, 5377, 2512, 1011, 3606, 3993, 3356, 19202, 4839, 4942, 4215, 23194, 3512, 1049, 3606, 3993, 3356, 5391, 1029, 3, 2152, 8069, 5519, 3291, 1024, 22863, 23207, 4818, 10470, 2015, 1012, 3, 9872, 1006, 11900, 1007, 1024, 2045, 2003, 1037, 23409, 9397, 3217, 9048, 28649, 9896, 2005, 22863, 23207, 4818, 10470, 2015, 2007, 4942, 4215, 23194, 3512, 7226, 13375, 1012, 3, 1031, 24664, 3351, 1033, 2256, 2364, 2765, 9872, 1024, 2151, 20167, 9896, 2005, 1996, 22863, 23207, 4818, 2270, 2622, 3291, 2007, 4942, 4215, 23194, 3512, 6074, 2029, 15796, 2015, 2488, 2084, 1051, 1006, 23290, 1013, 1018, 1007, 5942, 27258, 4807, 1999, 1049, 29625, 13494, 1024, 1996, 20610, 3606, 3993, 20167, 9896, 2003, 3053, 4389, 2130, 2013, 1037, 11850, 15078, 7339, 1012, 3, 2060, 3463, 1998, 2019, 2330, 3160, 1037, 4807, 11619, 2896, 5391, 2005, 2236, 26004, 2015, 1012, 3, 1037, 15078, 11619, 2896, 5391, 2005, 2236, 26004, 2015, 1012, 3, 2330, 3160, 1024, 6011, 1037, 15078, 9006, 19386, 3012, 21800, 1997, 2256, 2765, 1012, 3, 4283, 999, 2], "src_sent_labels": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "segs": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "clss": [0, 37, 66, 97, 118, 159, 199, 214, 271, 298, 321, 351, 395, 409, 445, 497, 530, 566, 608, 676, 720, 751, 794, 855, 881, 914, 953, 1007, 1028, 1068, 1082, 1111, 1132, 1186, 1244, 1271, 1304, 1331, 1357, 1408, 1462, 1501, 1513, 1531, 1568, 1588, 1642, 1660, 1717, 1754, 1799, 1833, 1888, 1907, 1943, 1979, 2034, 2093, 2150, 2194, 2250, 2304, 2356, 2408, 2431, 2454, 2490, 2507, 2538, 2606, 2619, 2675, 2709, 2726, 2755, 2783, 2802, 2823, 2861, 2919, 2966, 2974, 2990, 3007, 3024, 3060, 3077, 3090, 3136, 3165, 3220, 3239, 3272, 3287, 3319, 3332, 3362, 3375, 3430, 3489, 3542, 3565, 3582, 3633, 3663, 3717, 3749, 3788, 3811, 3834, 3881, 3915, 3957, 4000, 4024, 4045, 4070, 4125, 4157, 4213, 4239, 4266, 4323, 4343, 4365, 4414, 4438, 4459, 4506, 4529, 4570, 4619, 4657, 4707, 4753, 4785, 4846, 4856, 4883, 4926, 4957, 4979, 5019, 5044, 5076, 5094, 5123, 5175, 5235, 5270, 5325, 5380, 5392, 5428, 5448, 5501, 5557, 5593, 5653, 5711, 5753, 5807, 5839, 5894, 5911, 5931], "src_txt": ["we study the combinatorial public project problem ( cppp ) in which n agents are assigned a subset of m resources of size k so as to maximize the social welfare .", "combinatorial public projects are an abstraction of many resource - assignment problems ( internet - related network design , elections , etc. ) .", "it is known that if all agents have submodu - lar valuations then a constant approximation is achievable in polynomial time .", "however , submodularity is a strong assumption that does not always hold in practice .", "we show that ( unlike similar problems such as combinatorial auctions ) even slight relaxations of the submodularity assumption result in non-constant lower bounds for approximation .", "there are various real - world settings in which a set of resources is chosen to collectively serve an entire community : in elections , for instance , candidates are chosen to serve a community of voters .", "states choose which roads to build for the benefit of their residents .", "another interesting example is that of choosing overlay networks in the internet [ 3,2 ] ( for instance , in the context of interdomain routing ) : a node in the network chooses the optimal subset of nodes to route traffic through , in a manner which is most beneficial to its clients 3 .", "such an overlay - the subset of chosen nodes through which traffic is routed - is beneficial to different clients in different degrees .", "this creates the difficulty of maximizing the social welfare in this setting ( as in the settings above ) .", "the combinatorial public project problem ( cppp ) , recently presented and studied in [ 18 ] , is an abstraction of such settings .", "in cppp there are m resources and n agents , each with a valuation function defined over all subsets of resources , and the objective is to choose the k resources which maximize the social welfare of the agents .", "it is easy to see that cppp is np hard .", "however , in the case where each valuation function is submodular cppp allows for good approximations [ 15,18 ] ( within 1 \u2212 1 e ) .", "4 a valuation function v is said to be submodular if for every two subsets of resources s , t we have v ( s \u222a t ) + v ( s \u2229 t ) \u2264 v ( s ) + v ( t ) .", "in this paper we study cppp , focusing on computational and communication complexity lower bounds which result from relaxations of the above submodularity property .", "indeed , out of the myriads of problems which can be depicted as combinatorial public projects , in many instances the submodularity constraint does not apply .", "we illustrate this point in section 2 , where we show how the difference between submodular and general valuations separates between two seemingly close internet - related network design problems ( overlay networks ) .", "our main result is showing that even small relaxations of the submodularity property in combinatorial public projects result in strong inapproximability bounds : theorem : obtaining an approximation ratio of m a valuation function v is subadditive if for every two subsets of resources s , t we have that v ( s \u222a t ) \u2264 v ( s ) + v ( t ) .", "in fact , we prove our lower bound for a more restricted class of valuations called fractionally - subadditive [ 8 ] ( introduced in [ 17 ] and termed \" xos \" there ) .", "this lower bound establishes that in terms of approximability there is a huge gap between the submodular and subadditive case .", "this is in stark contrast to what is known about the related combinatorial auctions problem , for which a 2 - approximation is achievable for subadditive valuations [ 8 ] .", "we show that our lower bound is nearly tight by presenting a simple o ( m in [ 18 ] it is shown , for the case of cppp with submodular valuations , that while a constant approximation ratio is possible , no such ratio is achievable via truthful algorithms .", "the o ( m 1 2 ) approximation algorithm for subadditive valuations presented in this paper is truthful .", "hence , our results show that the hardness of cppp with subadditive valuations is due to computational reasons and not to the truthfulness requirement .", "that is , truthful approximation algorithms perform just , or nearly , as well as unrestricted algorithms.finally , we study the approximability of cppp with general valuations .", "we prove two complementary lower bounds , one in the computational - complexity model and one in the communication - complexity model : theorem : obtaining an approximation of o ( n 1 2 \u2212 ) in cppp with general valuations , for any > 0 , is impossible unless p = n p .", "obtaining an approximation of o ( n 1 \u2212 ) is impossible unless p = zp p .", "theorem : obtaining an approximation of ( 1 \u2212 ) n for cppp with general valuations requires exponential communication in m ( for any > 0 and for any n << 2 m ) .", "in this section we formally present cppp and our model .", "we motivate cppp by presenting an internet - related network design setting which is naturally formulated as a combinatorial public project .", "we use this example to illustrate the importance of considering relaxations of submodularity .", "in cppp there is a set of n agents n = { 1 , . . . , n } , a set of m resources m = { 1 , . . . , m } , and a parameter 1 \u2264 k \u2264 m. each agent has a valuation function ( sometimes simply referred to as a valuation ) v i : 2 [ m ] \u2192 r \u2265 0 .", "we make two standard assumptions regarding each valuation function v i : that v i ( \u2205 ) = 0 ( normalized ) and that for all s \u2286 t \u2286 [ m ] it holds that v i ( s ) \u2264 v i ( t ) ( non-decreasing ) .", "the objective in cppp is to find a subset of resources s * of size k which maximizes the social - welfare .", "that is , we wish to find s * \u2208 argmax s \u2286 [ m ] , | s | = k i v i ( s ) .", "we require algorithms for cppp to run in time that is polynomial in the natural parameters of the problem - n and m .", "in some cases agents ' valuations can be concisely represented ( encoded in space polynomial in m and n ) .", "in these cases we wish to explore the computational complexity of the problem.however , in general , the size of the \" input \" ( the valuations ) can be exponential in m , and so we must specify how it can be accessed .", "we take a \" black box \" ( concrete complexity ) approach ( see [ 5 ] ) : every valuation function is assumed to be represented by an oracle which can answer a certain type of queries , and we restrict our algorithms to ask polynomially ( in both m and n ) many such queries .", "we consider two standard types of queries : - value queries : a value query to a valuation v i is in the form of a subset of resources s \u2286 [ m ] .", "the answer is simply v i ( s ) .", "this is a natural type of query to use when designing algorithms for cppp .", "- general queries : a general query allows any type of questions ( even computationally intractable ones ) , as long as each question is addressed to a single v i .", "we only require that the \" size \" of the query not be too \" large \" .", "this is equivalent to yao 's communication model [ 20 ] in which the different parties are computationally omnipotent and we measure the number of bits they must exchange to compute a given function ( see an introduction to communication complexity in [ 12 ] ) .", "the immense strength of general queries is useful for showing impossibility results .", "consider the following internet - inspired setting [ 3,2 ] we call the overlay network problem : we are given a network graph g = ( v , e ) , wherev = s \u222a m \u222a d ( s , m , d are disjoint ) .", "we shall refer to the nodes in s as source - nodes , to the nodes in m as potential overlay nodes , and to the nodes in d as destinationnodes .", "assume that there is some metric function m that assigns a non-negative real value m e to every e \u2208 e ( assume that m 's value for a non-existent edge is \u221e ) .", "each node i \u2208 s has a valuation function v i that assigns a non-negative real value to every subset of potential overlays m \u2286 m .", "intuitively , for every m \u2286 m , v i ( m ) specifies i 's desire to route through m to the nodes in d. each v i is consistent with the metric m in the following sense : for every m , m \u2286 m , v i ( m ) \u2265 v i ( m ) iff the sum of the lengths of the shortest routes from i to all nodes in d that only go through nodes in m is at most that obtained from routing only through nodes in m .", "5 the goal is to choose an overlay network from the potential overlay nodes .", "for a given parameter 1 \u2264 k \u2264 | m | , we want to find a subset of m of size k that maximizes the social welfare of the source nodes .", "that is , we wish to find a set m * = argmax m \u2286 m , | m | = k \u03c3 i \u2208 s v i ( m ) .", "it is easy to see that the overlay network problem is a special case of cppp in which the agents are the source nodes , the resources are the potential overlays and the agents ' valuations are induced by the network graph and the metric function 6 .", "we distinguish between two versions of this problem , which illustrate the big differences between instances for which submodularity does , and does not , apply : - the submodular case : observe that if no two nodes in m are directly connected via an edge in e then the valuation functions of the source nodes in the overlay network problem are submodular .", "this is due to the fact that they exhibit the decreasing marginal values property that is known to be equivalent to submodularity : for every node i \u2208 s , for every m \u2286 m \u2286 m , and for every a \u2208 m , it holds thatv i ( m \u222a { a } ) \u2212 v i ( m ) \u2265 v i ( m \u222a { a } ) \u2212 v i ( m ) .", "- the non-submodular case : in the more general case , in which nodes in m can be connected to one another , the valuation functions are no longer guaranteed to be submodular .", "for example , think of a network graph g = ( v , e ) with four nodes : a single source node i , a single destination node d , and two potential overlay nodes a , b.assume that e = { ( i , a ) , ( a , b ) , ( b , d ) } and that m assigns a value of 0 to every edge in e. let v i ( { a } ) = v i ( { b } ) = 0 and v i ( { a , b } ) = 1 .", "observe that v i is indeed consistent with m , but is neither submodular nor subadditive.in this model the difference between general and submodular valuations originates from whether or not the nodes in m are connected to each other .", "these 5 formally , for every node i \u2208 s , and for every subset m \u2286 m we define ci ( m ) to be the sum of the lengths of the shortest paths from i to all nodes in d that only go through nodes in m .", "that is , if we define ( \u2200 i \u2208 s , d \u2208 d ) c id ( m ) to be the length of the shortest route ( given m ) that has i as its first node , d as its last node , and all intermediate nodes inm , then ci ( m ) = \u03c3 d \u2208 d c id m .", "vi ( m ) \u2265 vi ( m ) iff ci ( m ) \u2264 ci ( m ) .", "6the artificial division of v into s , m , and d is only required for ease of exposition .", "seemingly subtle and insignificant differences lead to violations of submodularity which motivate our study of cppp with valuations which are not submodular .", "in this section we study cppp with subadditive valuations .", "we prove our main result , which is showing a lower bound of m 1 4 for a class strictly contained in subadditive valuations .", "this result shows that relaxations of submodularity that may seem small at first glance , and are not too costly for other problems ( e.g. , combinatorial auctions [ 7,8 ] ) , lead to unreasonable approximation ratios for cppp.we show that this lower bound is nearly tight by presenting a simple \u221a m approximation algorithm .", "this algorithm also has the advantage of being truthful .", "hence , we show that for cppp with subadditive valuations the gap between truthful and unrestricted algorithms in terms of approximation ratio is insignificant ( this is in contrast to the submodular case in which the gap is huge [ 18 ] ) .", "we prove our result for fractionally - subadditive valuations [ 8 ] ( defined in [ 17 ] and termed \" xos \" there ) .", "this result is achieved in the communication complexity ( general queries ) model .", "thus , we show that even if agents are computationally unlimited the number of bits they must exchange to obtain a good approximation is unreasonable .", "the proof uses a probabilistic construction of a collection of subsets of resources , which has useful combinatorial properties .", "these properties are then exploited in a reduction from a well known problem in communication complexity .", "s \u2286 m v ( s ) = \u03c3 j \u2208 s v ( { j } ) .", "informally , a valuation function is fractionally - subadditive if it is the pointwise maximum over a set of additive ( linear ) valuations.definition 2 .", "a valuation function v is said to be fractionally subadditive if there is a set of additive ( linear ) valuations { a 1 , ... , a l } such that for everys \u2286 m v ( s ) = max r \u2208 [ l ] a r ( s ) .", "the class of fractionally - subadditive valuation functions is known to be strictly contained in the class of subadditive valuations and to strictly contain all submodular valuations [ 17,13 ] .", "fix a small > 0 .", "we prove the theorem for the case n = k = \u221a m .", "the proof is by reduction from the set disjointness problem .", "in the set disjointness problem , we have n parties .", "each party i = 1 , 2 , ... , n holds a t - bit string which specifies a subset a i \u2286 { 1 , . . . , t } .", "the parties are required to distinguish between the two following extreme cases : 1 .", "\u2229 n i = 1 a i = \u2205 2 .", "for every i = j it holds that a i \u2229 a j = \u2205 the set disjointness problem was studied in [ 1 ] where it was shown to require \u03c9 ( t n 4 ) communication complexity .", "in [ 16 ] nisan shows a lower bound due to radhakrishnan and srinivasan of \u03c9 ( t n ) .", "for our reduction , we wish to first show the existence of a exponentially large family of sets of items with a useful combinatorial property : [ m ] is said to have the r - intersection property if , for every s , t \u2208 f , | s \u2229 t | \u2264 r.definition 3 .", "a collection f of subsets of - f has the 2m - intersection property .", "- for each s \u2208 f it holds that | s | \u2265 \u221a m. - | f | \u2265 e \u03b1m for some constant \u03b1 > 0 .", "we prove the lemma via a probabilistic construction .", "each set s \u2208 f is constructed by choosing uniformly at random each element l \u2208 [ m ] to be in s with probability m \u2212 1 2 .", "let s and t be two such sets in f .", "we wish to show that each such set is \" large \" and that the intersection between them is \" small \" , with very high probability .", "we will use the chernoff bound.claim .", "( chernoff bound ) let x 1 , . . . , x m be a set of m independent random variables that take values in { 0 , 1 } such that for every l , p r [ x l = 1 ] = p. then , for any \u03b4 is in the range [ 0 , 2e \u2212 1 ] we have that :p r [ m l = 1 x l > ( 1 + \u03b4 ) pm ] \u2264 e \u2212 \u03b4 2 pm 3 ( 1 ) p r [ m l = 1 x l < ( 1 \u2212 \u03b4 ) pm ] \u2264 e \u2212 \u03b4 2 pm 3 ( 2 ) for every resource l \u2208 [ m ] we define a random variable x l that is a assigned a value of 1 if l \u2208 s \u2229 t and of 0 otherwise .", "observe , that the probability that x l = 1 is m \u2212 1 , and by 1 :p r [ | s \u2229 t | > 2m ] = p r [ \u03c3 l x l > 2m ] < e \u2212 m 3similarly , for every s \u2208 f , define a random variable x l that is assigned a value of 1 if l \u2208 s and 0 otherwise , by 2 we have that for any \u03b4 \u2208 ( 0 , 1 ) :p r [ | s | < ( 1 \u2212 \u03b4 ) m 1 + 2 ] = p r [ \u03c3 l x l < ( 1 \u2212 \u03b4 ) m 1 + 2 ] < e \u2212 \u03b4 2 m 1 + 2 3we thus have that there is some constant \u03b1 > 0 such that :p r [ | s \u2229 t | > 2m or | s | < m 1 2 or | t | < m 1 2 ] < e \u2212 2\u03b1msince these bounds must hold for any s , t we get that as long as | f | 2 \u2264 e 2\u03b1m there is such a collection f .", "thus , we know there exists a family of sets f = { s 1 , . . . , s t } where t = e \u03b1m for some constant \u03b1 > 0 , with the property that every set is at least of size \u221a m and | s i \u2229 s j | \u2264 2m \u2200 i = j \u2208 t.now , we show the reduction from the set disjointness problem .", "let 1 , 2 , ... , \u221a m be the parties , and set t = e \u03b1m .", "let a i be the subset of [ t ] held by party i .", "we construct an instance of cppp with m resources , n = \u221a m agents ( corresponding to the \u221a m parties in the set disjointness problem ) , and set the number of resources to be chosen to k = \u221a m .", "we identify each element r \u2208 [ t ] with a set s r in the family f of subsets of [ m ] described above .", "each agent i constructs a valuation function v i in the following manner : let a s denote the additive valuation that assigns a value of 1 to every resource in s and a value of 0 to every resource j / \u2208 s. let v i = max { a sr | r \u2208 a i } .", "observe that if i a i = \u2205 then there is a set s r that has a corresponding additive valuation in all of the v i 's .", "hence , assigning a subset of s r of size \u221a m to the agents ( simulated by the set disjointness parties ) results in a social welfare value of m .", "what happens if for every two i = j \u2208 [ t ] s i \u2229 s j = \u2205 ?", "we shall now show that in this case the optimal social welfare is o ( m 3 4 + ) .", "this would mean that an approximation of o ( m 1 4 \u2212 ) to the cppp with fractionallysubadditive valuations enables the distinction between the two extreme cases in the set disjointness problem .", "therefore , we will then be able to conclude that \u03c9 ( t n ) bits are required to do so ( a number exponential in both n and m ) .", "so , we are left with showing that if for every two i = j \u2208 [ t ] s i \u2229 s j = \u2205 then the optimal social welfare is o ( m 3 4 + ) .", "assume , for the purpose of contradiction , that there is some set t of size \u221a m such that the social welfare derived from t , sw ( t ) , is greater than 2m 3 4 + .", "let a i be an additive valuation function of i for which v i is maximized ( for t ) .", "observe that sw ( t ) = \u03c3 i \u2208 [ n ] a i ( t ) .", "assume , w.l.o.g. , that t = { 1 , ... , \u221a m } .", "for every resource l \u2208 t , let x l be the number of the a i 's that assign a value of 1 to l. observe thatsw ( t ) = \u03c3 i \u2208 [ n ] a i ( t ) = \u03c3 l \u2208 t x l .", "also observe that \u03c3 l \u2208 t x l ( x l \u2212 1 ) = \u03c3 i = j | s i \u2229 s j \u2229 t | .", "since we know that the cardinality of the intersection of every two sets can not exceed 2m we now have that : 2m 1 + = 2n 2 m \u2265 i = j | s i \u2229 s j \u2229 t | = l \u2208 t x l ( x l \u2212 1 ) using elementary calculus , it is easy to show that l \u2208 t x 2 l \u2265 m 1 4 l \u2208 t x l .", "( this is due to the fact that the worst case ratio is achieved when all x l 's are equal . )", "combining the last two equations gives us thatsw ( t ) = l \u2208 t x l \u2264 2m 3 4 + .", "we show that the result stated in the above theorem is nearly tight by presenting a simple truthful algorithm which obtains a min { k , \u221a m } approximation ratio ( for any value of k and n ) and requires at most n \u00b7 m value queries.the algorithm : - arbitrarily partition [ m ] into r = max { m k , \u221a m } disjoint subsets of equal size s 1 , ... , s r .", "- ask each agent to specify her value for each of the different subsets s t .", "- choose the subset s t that maximizes the social welfarei v i ( s t ) .", "this algorithm , similar to that presented in [ 5 ] , is a simple maximal - in - range algorithm [ 5,6 ] , and so it can be made truthful via vcg payments [ 19,4,11 ] .", "observe that the algorithm indeed requires at most m value queries to be addressed to each of the n agents .", "therefore , all that is left to show is that the algorithm provides the required approximation - ratio .", "we show this for subadditive valuations.proposition 33 if v 1 , . . . , v n are subadditive then the algorithm provides an approximation ratio of min { k , \u221a m } .", "let k \u2264 \u221a m. let o be a set of size k that maximizes the social welfare .", "then , by ( iterative use of ) subadditivity , for every i \u2208 [ n ] , v i ( o ) \u2264 j \u2208 o v i ( { j } ) .", "hence , i \u2208 [ n ] v i ( o ) \u2264 i \u2208 [ n ] j \u2208 o v i ( { j } ) = j \u2208 [ o ] i \u2208 [ n ] v i ( { j } ) .", "this implies that there is an element j \u2208 [ m ] such that the social welfare derived from j is at least 1 | o | = 1 k of the optimal social welfare .", "this item j appears in one of the s t 's , and so , because the valuations are non-decreasing , the social welfare derived from that s t is also at least 1 k of the optimal social welfare .", "since the algorithm optimizes over all the s t 's it is bound to achieve the desired approximation ratio.let k > \u221a m. let o be the set of size k that maximizes the social welfare .", "because the valuations are non-decreasing , \u03c3 i v i ( o ) \u2264 \u03c3 i v i ( [ m ] ) .", "let s 1 , . . . , s \u221a mbe some arbitrary partition of [ m ] into \u221a m disjoint subsets of size \u221a m. exploiting subadditivity in a way similar to that shown above implies that for one of these sets the social welfare is at least a 1 \u221a m fraction of the social welfare for the entire set [ m ] .", "this concludes the proof of the proposition .", "in this section we study cppp with general valuations ( but still normalized and non-decreasing ) .", "as the overlay networks example ( section 2 ) , and others ( elections etc. ) , illustrate , in many cases submodularity , and even subadditivity , do not apply .", "we prove strong inapproximability results for cppp with general valuations in both the computational - and the communication - complexity models .", "in the communication - complexity model our lower bound is tight ( a trivial matching upper bound exists ) .", "theorem 41 obtaining an approximation of o ( n 1 2 \u2212 ) to the social welfare in cppp with general valuations , for any > 0 , is impossible unless p = n p .", "obtaining an approximation of o ( n 1 \u2212 ) to the social welfare is impossible unless p = zp p .", "we reduce from the maximal welfare tree ( mwt ) problem studied in the context of distributed algorithmic mechanism design [ 10,9,14 ] .", "our reduction preserves the hardness results for this problem as shown in [ 14 ] .", "in the mwt problem we are given a graph g = ( n , l ) with a set of nodes n and links l .", "a unique destination node d is given and each node a \u2208 n \\ { d } has a valuation function v a : p a \u2192 r \u2265 0 , where p a is used to denote the set of all simple paths from a to the destination d .", "the objective in mwt is to form a tree rooted in d which maximizes the social welfare , i.e. , choose the tree t * such thatt * \u2208 argmax t \u2208 t d l a \u2208 n \\ { d } v a ( t ) , where t d l is the set of all possible trees in l rooted in d .", "we consider the special case of mwt in which for all a \u2208 n \\ { d } we have v a : p a \u2192 { 0 , 1 } .", "it is known that for any > 0 approximating mwt , even for this special case , within a factor of o ( n 1 2 \u2212 ) is impossible unless p = n p and approximating within a factor of o ( n 1 \u2212 ) is impossible unless p = zp p [ 14 ] .", "the reduction from mwt is as follows : given an instance of mwt such that the range of all valuation functions is { 0 , 1 } , for each link l \u2208 l we associate a resource l in cppp and each node a \u2208 n \\ { d } in mwt will correspond to an agent a in cppp .", "it remains to define the valuation function of a .", "note that since our interest is in showing a lower bound , we can adversarially set the number of chosen items to be k = | n | \u2212 1 .", "now , let p + a be the set of paths for which v a = 1 .", "for all e \u2286 l , the valuation function for the corresponding agent a in cppp is defined by : v a ( e ) = 1 \u2203 p \u2208 p + a : p \u2286 e and e \u2208 t d l 0 otherwise ( 3 ) observe that choosing a tree t in mwt with social welfare value sw ( t ) = c corresponds to choosing a set of resources that induces the same social welfare value in cppp .", "conversely , choosing a set of resources t in cppp s.t. sw ( t ) = c necessarily means that we can trim t to a set of edges t which forms a routing tree with d as its source , and that we have exactly c nodes which have routes to d in t , and hence sw ( t ) = c in mwt .", "obtaining an approximation ratio of ( 1 \u2212 ) n for general valuations requires exponential communication in m ( for any > 0 and for any n << 2 m ) .", "for cppp with general valuation functions , n agents , m items and a parameter 1 \u2264 k \u2264 m we show a lower bound of \u03c9 ( m k \u00b7 n \u2212 1 ) again by reducing from the set disjointness problem.we construct an instance of cppp with n agents in which no restrictions ( except for being normalized and non-decreasing ) apply to the agents ' valuation functions .", "let s 1 , . . . , s t be the ( ordered ) sets in the range of all possible allocations of size k. for each party i in set disjointness with the set a i \u2286 { 1 , . . . , t } , we associate an agent i in cppp with the following valuation function : v i ( s r ) = 1 r \u2208 a i 0 otherwiseobserve that these valuation functions are indeed normalized and non-decreasing .", "let s l be the set which maximizes the social welfare , i.e. , l \u2208 argmax l \u2208 [ d ] | { a i | l \u2208 a i } | .", "to approximate the social welfare within a factor of ( 1 \u2212 ) n for any > 0 , one must allocate some set s for which there are at least two agents i and j such that v i ( s ) = v j ( s ) = 1 .", "due to the above construction of the agents ' valuation functions this necessarily implies deciding between the two extreme cases of the set disjointness problem .", "thus , for d = m k we get a lower bound of \u03b8 ( m k \u00b7 n \u2212 1 ) for cppp with general valuation functions.in the communication model a trivial matching upper bound of n exists : query each agent i for her most valued set s i of size k , and assign the agents a set t \u2208 argmax i v i ( s i ) .", "it is easy to see that this indeed guarantees an napproximation .", "swe warmly thank christos papadimitriou for many helpful and interesting discussions .", "we warmly thank christos papadimitriou for many helpful and interesting discussions ."], "tgt_txt": "inapproximability of combinatorial public projects michael schapira ( yale university and uc berkeley ) joint work with yaron singer ( uc berkeley ) overview of the talk the combinatorial public project problem .<q>the submodular case background .<q>a trivial truthful approximation - algorithm .<q>our main result .<q>conclusions and open questions .<q>algorithmic mechanism design algorithmic mechanism design deals with designing efficient mechanisms for decentralized computerized settings [ nisan - ronen ] .<q>takes into account both the strategic behavior of the different participants and the usual computational efficiency considerations .<q>target applications : protocols for internet environments .<q>combinatorial public project set of n users ; set of m resources ; each user i has a valuation function : vi : 2 [ m ] r0 objective : given a parameter k , choose a set of resources s * of size k which maximizes the social welfare : s * = argmax i vi ( s ) s [ m ] , | s | = k assumptions regarding each valuation function normalized : v ( ) = 0 non-decreasing : v ( s ) v ( t ) s t subadditive : v ( s ) + v ( t ) v ( s t ) [ submodular : v ( s { j } ) v ( s ) v ( t { j } ) v ( t ) s t ] motivating examples elections for a committee : the agents are voters , resources are potential candidates .<q>overlay networks : we wish to select a subset of nodes in a graph that will function as an overlay network .<q>[ http://nms.csail.mit.edu/ron/ ] access models how can we access the input ?<q>one possibility : succinct valuations computational complexity approach .<q>the black box approach : each bidder is represented by an oracle which can answer certain queries .<q>communication complexity approach .<q>what do we want ?<q>quality of the solution : as close to the optimum as possible .<q>computationally tractable : polynomial running time ( in n and m ) .<q>truthful : motivate ( via payments ) agents to report their true values regardless of other agents reports .<q>the utility of each user is ui = vi ( s ) - pi the submodular case [ papadimitriou - ssinger ] computational perspective : a 1 - 1 / e approximation ratio is achievable due to the submodularity of the valuations ( but not truthful ) a tight lower bound exists [ feige ] .<q>strategic perspective : a truthful solution is achievable via vcg payments ( but np - hard to obtain ) what about achieving both simultaneously ?<q>the submodular case : truth and computation do nt mix theorem [ papadimitriou - s - singer ] : any truthful algorithm for the combinatorial public project problem which approximates better than m requires exponential communication in m. even for n = 2 .<q>implications for amd : a huge gap between truthful & polynomial algorithms , and truthful / polynomial algorithms .<q>a trivial m - approximation algorithm for subadditiver agents the algorithm : if km , simply choose the single resource j for which the social - welfare is maximized .<q>if k > m , divide the m resources to m disjoint sets of equal size and choose the one that maximizes the social welfare .<q>the algorithm is truthful fact : maximal - in - range algorithms are truthful ( vcg ) .<q>- > the trivial approximation algorithm is ( essentially ) the best truthful algorithm for the submodular case .<q>also for the subadditive case .<q>upper and lower bounds submodular m truthful upper bound constant non - truthful upper bounds exist subadditive m truthful upper bound ?<q>high hopes twin problem : combinatorial auctions .<q>theorem ( informal ) : there is a 2approximation algorithm for combinatorial auctions with subadditive bidders .<q>[ feige ] our main result theorem : any approximation algorithm for the combinatorial public project problem with subadditive agents which approximates better than o ( m1 / 4 ) requires exponential communication in m. implications : the trivial truthful approximation algorithm is nearly tight even from a purely computational perspective .<q>other results and an open question a communication complexity lower bound for general valuations .<q>a computational complexity lower bound for general valuations .<q>open question : prove a computationalcomplexity analogue of our result .<q>thanks !", "sections": [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 12, 13], "token_sections": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]}