{"src": [101, 1999, 1037, 22863, 23207, 4818, 10470, 1049, 21770, 10624, 6914, 3560, 27427, 12848, 17417, 3468, 5167, 2024, 2853, 2000, 1050, 7226, 13375, 1012, 102, 101, 2023, 3259, 10592, 10906, 1999, 2029, 1996, 26004, 4972, 1997, 1996, 7226, 13375, 2024, 2124, 2000, 2022, 13711, 1011, 2489, 1006, 1037, 29625, 2243, 29625, 2050, 29625, 4942, 4215, 23194, 3512, 1007, 1012, 102, 101, 2057, 3073, 2195, 20167, 13792, 2005, 1996, 2591, 1011, 7574, 20446, 3989, 3291, 1999, 2107, 10906, 1012, 102, 101, 15847, 1010, 2057, 2556, 1037, 8833, 8486, 2705, 7712, 3356, 5391, 2005, 1996, 2553, 2008, 1996, 3229, 2000, 1996, 26004, 4972, 2003, 3081, 5157, 10861, 5134, 1012, 102, 101, 2005, 1996, 15863, 3643, 10861, 5134, 2944, 2057, 3073, 1037, 4389, 1051, 1006, 1600, 1049, 1007, 20167, 1012, 102, 101, 4406, 1996, 2060, 13792, 2057, 2556, 1010, 2023, 9896, 2003, 2036, 20438, 11892, 1012, 102, 101, 2633, 1010, 2057, 2556, 2048, 20167, 13792, 2005, 1996, 2062, 7775, 2465, 1997, 1060, 2891, 26004, 2015, 1024, 1037, 3722, 28283, 25300, 10074, 9896, 2008, 3640, 2019, 20167, 6463, 1997, 1016, 1998, 2019, 15502, 1041, 1041, 1597, 2487, 20167, 4719, 3081, 6721, 3550, 26939, 1012, 102, 101, 2057, 2036, 2556, 15502, 2896, 19202, 2005, 2119, 1996, 5157, 14721, 2015, 2944, 1998, 1996, 3643, 14721, 2015, 2944, 1012, 102, 101, 12935, 26004, 2015, 2000, 2306, 1037, 5387, 1997, 1016, 1597, 1010, 2005, 2151, 5377, 1028, 1014, 1012, 102, 101, 2488, 2084, 1041, 1013, 1006, 1041, 1597, 1015, 1007, 1012, 102, 101, 1996, 2197, 9872, 3065, 2008, 2256, 9896, 2005, 1996, 2465, 1060, 2891, 2003, 4389, 1012, 2487, 29625, 2509, 8304, 14337, 2791, 1012, 102, 101, 1999, 2116, 10906, 1999, 2029, 1996, 22863, 23207, 4818, 10470, 3291, 18653, 1010, 2009, 2003, 3019, 2000, 7868, 2008, 1996, 7226, 13375, 2024, 14337, 1012, 102, 101, 2008, 2003, 1010, 1996, 7226, 13375, 2024, 4699, 2069, 1999, 20446, 6026, 2037, 2219, 9710, 1010, 1998, 2453, 3568, 28616, 2890, 6442, 2037, 18394, 2065, 2009, 11072, 2037, 5426, 1012, 102, 101, 2057, 2024, 3568, 4699, 1999, 3606, 3993, 13792, 2008, 2011, 10449, 10504, 11302, 2008, 2065, 2169, 7226, 4063, 2003, 2000, 3432, 3189, 2010, 2995, 3643, 2002, 2097, 25845, 2010, 5618, 1012, 102, 101, 10889, 1010, 2000, 3058, 1010, 2200, 2261, 15078, 2135, 1011, 22945, 3606, 3993, 10595, 2005, 2023, 3291, 2024, 2124, 2008, 2079, 2025, 6611, 2069, 2000, 2200, 7775, 2309, 1011, 16381, 13100, 1012, 102, 101, 2057, 2556, 2019, 20167, 9896, 2008, 3084, 2224, 1997, 3643, 10861, 5134, 2069, 1010, 1998, 21312, 3606, 20938, 1012, 102, 101, 2023, 20167, 6463, 2089, 4025, 3243, 2919, 2043, 22085, 2007, 1996, 2755, 2008, 2005, 1996, 2465, 1997, 4942, 5302, 8566, 8017, 26004, 2015, 5377, 1011, 20167, 13792, 2008, 2224, 2069, 3643, 10861, 5134, 4839, 1006, 1041, 29625, 2290, 29625, 1010, 2011, 28444, 2078, 3802, 2632, 29625, 1031, 2260, 1033, 1007, 1012, 102, 101, 2174, 1010, 2009, 4332, 2041, 2008, 2023, 9896, 2003, 15502, 1999, 1996, 3643, 14721, 2944, 1010, 2130, 2065, 2035, 7226, 13375, 2031, 1060, 2891, 26004, 2015, 1010, 1998, 2130, 9217, 3606, 20938, 14679, 1024, 9872, 1015, 29625, 2575, 2296, 20167, 9896, 2005, 22863, 23207, 4818, 10470, 2015, 2007, 1060, 2891, 7226, 13375, 2008, 3594, 2069, 3643, 10861, 5134, 1010, 5942, 2019, 27258, 102, 101, 3525, 2000, 2023, 3259, 1010, 24664, 3351, 1031, 1023, 1033, 5301, 1996, 3356, 5391, 2005, 22863, 23207, 4818, 10470, 2015, 2007, 13711, 1011, 2489, 26004, 2015, 2000, 1016, 1012, 102, 101, 2023, 3356, 5391, 3594, 5157, 10861, 5134, 1012, 102, 101, 1996, 4807, 2896, 5391, 2057, 2556, 12748, 2008, 2023, 3356, 5391, 2003, 4389, 29625, 8545, 2085, 6848, 4745, 2147, 3141, 2000, 4942, 5302, 8566, 8017, 26004, 2015, 1012, 102, 101, 1047, 12326, 1010, 5423, 2669, 1010, 2928, 8978, 2015, 1010, 1998, 2033, 22893, 1031, 2340, 1033, 3662, 2008, 2053, 20167, 2488, 2084, 1041, 1041, 1597, 2487, 2478, 3643, 10861, 5134, 2069, 2003, 2825, 1010, 4983, 1052, 1027, 1050, 1052, 1012, 102, 101, 2023, 2896, 5391, 2001, 3728, 13949, 2000, 2019, 4895, 8663, 27064, 2028, 2011, 14719, 27923, 3490, 3802, 2632, 29625, 1031, 1029, 1033, 102, 101, 3854, 7265, 2243, 1031, 2538, 1033, 2038, 3491, 2008, 2023, 2896, 5391, 2003, 4389, 2011, 22922, 1037, 9844, 3356, 5391, 2008, 3594, 3643, 10861, 5134, 2069, 1012, 102, 101, 1999, 1996, 5157, 10861, 5134, 2944, 24664, 3351, 1998, 3854, 7265, 2243, 1031, 2184, 1033, 4663, 2019, 20167, 6463, 3621, 2488, 2084, 1041, 1041, 1597, 2487, 1012, 102, 101, 2027, 2036, 2265, 2008, 22480, 22835, 1996, 7574, 2007, 5157, 14721, 1999, 2023, 2553, 2003, 9706, 2595, 1011, 2524, 29625, 6761, 12399, 2240, 1997, 2470, 2029, 27674, 1999, 2023, 3259, 2003, 11381, 3606, 3993, 10595, 2005, 22863, 23207, 4818, 10470, 2015, 2007, 13711, 1011, 2489, 26004, 2015, 1012, 102, 101, 2079, 2497, 17168, 5488, 1031, 1018, 1033, 4663, 2019, 20167, 6463, 1997, 1051, 1006, 8833, 1049, 8833, 8833, 1049, 1007, 2005, 4942, 4215, 23194, 3512, 26004, 2015, 2478, 1037, 6721, 3550, 7337, 1010, 9229, 2058, 1037, 3025, 2765, 1997, 1031, 1020, 1033, 1012, 102, 101, 2028, 1997, 1996, 2364, 12760, 1999, 2122, 3463, 2003, 1996, 1016, 1011, 20167, 9896, 2005, 1060, 2891, 26004, 2015, 3591, 1999, 2023, 3259, 1012, 102, 101, 1999, 2804, 1010, 24664, 3351, 1031, 1023, 1033, 1010, 3662, 2129, 2000, 10463, 1996, 8833, 1049, 8833, 8833, 1049, 1011, 20167, 9896, 1997, 2023, 3259, 2000, 1037, 3606, 3993, 2028, 1006, 2104, 1037, 15863, 9366, 1997, 3606, 20938, 1007, 1012, 102, 101, 1996, 2190, 28283, 25300, 10074, 7337, 2005, 13711, 1011, 2489, 26004, 2015, 2003, 2145, 1996, 1051, 1006, 1600, 1049, 1007, 1011, 7337, 3591, 1999, 2023, 3259, 29625, 3527, 2497, 17168, 5488, 1998, 9152, 8791, 1031, 1019, 1033, 4928, 2008, 2028, 2064, 2025, 6162, 1037, 2172, 2488, 20167, 5387, 2478, 2023, 2828, 1997, 13792, 1011, 29160, 1999, 2846, 13792, 1006, 102, 101, 2023, 3259, 1998, 4745, 2147, 4340, 1996, 15502, 19202, 2825, 2005, 1996, 3356, 3798, 1997, 1996, 12571, 1010, 8419, 22863, 23207, 4818, 10470, 2015, 2007, 1060, 2891, 1998, 13711, 1011, 2489, 26004, 2015, 1012, 102, 101, 1528, 1996, 2364, 2330, 3160, 2003, 5494, 1996, 6578, 2090, 1996, 2124, 3356, 1998, 2896, 19202, 2005, 4942, 5302, 8566, 8017, 26004, 2015, 1999, 1996, 5157, 14721, 2015, 2944, 1012, 102, 101, 1999, 3327, 1010, 2053, 4807, 2896, 5391, 2003, 2124, 1012, 102, 101, 1528, 2009, 2052, 2036, 2022, 5875, 2000, 6162, 2122, 20167, 21879, 2478, 22863, 23207, 4818, 13792, 1006, 2087, 2110, 1011, 1997, 1011, 1996, 1011, 2396, 13792, 2024, 2241, 2006, 6721, 3550, 26939, 1997, 1996, 6948, 23370, 1997, 1996, 3291, 1007, 1012, 102, 101, 1528, 2178, 2350, 2330, 3160, 2029, 2003, 2145, 2330, 2003, 2000, 5646, 2129, 2092, 3606, 3993, 10595, 2064, 15796, 1996, 7574, 1999, 2035, 3798, 1997, 1996, 12571, 1012, 2475, 1012, 102, 101, 6210, 1998, 6630, 1997, 1060, 2891, 1012, 102, 101, 2023, 2930, 15841, 1996, 6210, 1998, 6630, 1997, 1060, 2891, 26004, 2015, 1012, 102, 101, 9131, 1010, 2008, 2004, 6936, 1999, 1996, 4955, 1996, 2465, 1997, 1060, 2891, 26004, 2015, 9975, 3397, 1996, 2465, 1997, 4942, 5302, 8566, 8017, 26004, 2015, 1031, 2260, 1033, 1012, 102, 101, 1037, 26004, 2003, 2170, 29167, 1006, 1037, 29625, 2243, 29625, 2050, 29625, 7399, 1007, 2065, 2005, 2035, 1055, 1611, 1049, 1010, 1058, 1006, 1055, 1007, 1027, 1173, 1046, 1596, 1055, 1058, 1006, 1063, 1046, 1065, 1007, 1012, 102, 101, 2947, 1010, 2019, 29167, 26004, 2003, 4225, 2011, 1996, 5300, 1037, 1015, 1010, 2133, 1010, 1037, 1049, 2009, 24022, 2000, 5167, 1015, 1010, 2133, 1010, 1049, 4414, 1012, 102, 101, 2057, 6235, 2019, 29167, 26004, 2015, 2011, 1996, 2206, 11075, 1024, 1006, 1060, 1015, 1024, 1037, 1015, 1603, 1060, 1016, 1024, 1037, 1016, 1603, 2133, 1603, 1060, 1049, 1024, 1037, 1049, 1007, 2057, 2064, 2085, 9375, 1060, 2891, 26004, 2015, 1024, 6210, 1016, 29625, 2487, 1037, 26004, 1058, 2003, 2056, 2000, 2022, 1060, 2891, 2065, 2045, 102, 101, 2057, 19090, 1060, 2891, 26004, 2015, 2011, 1006, 1060, 1015, 1024, 1059, 1015, 1006, 1063, 1060, 1015, 1065, 1007, 1603, 2133, 1603, 1060, 1049, 1024, 1059, 1015, 1006, 1063, 1060, 1049, 1065, 1007, 1007, 1612, 2133, 1612, 1006, 1060, 1015, 1024, 1059, 1056, 1006, 1063, 1060, 1015, 1065, 1007, 1603, 2133, 1603, 102, 101, 2057, 2655, 1037, 11075, 1997, 2019, 29167, 26004, 1059, 1010, 2005, 2029, 1058, 1006, 1055, 1007, 1027, 4098, 1047, 1063, 1059, 1047, 1006, 1055, 1007, 1065, 1010, 1037, 20446, 6026, 11075, 2005, 1055, 1999, 1058, 1006, 2065, 2045, 2024, 2195, 2107, 24059, 2057, 12098, 16313, 19848, 6588, 5454, 2028, 1007, 1012, 102, 101, 2019, 1060, 2891, 14721, 2003, 2019, 14721, 2008, 2445, 1037, 14012, 1055, 5651, 1037, 20446, 6026, 11075, 2005, 1055, 1006, 2005, 1037, 3563, 26004, 1058, 1007, 1012, 2475, 29625, 2487, 18228, 21934, 10924, 1060, 2891, 1998, 5157, 10861, 5134, 1012, 102, 101, 2057, 2085, 2265, 2008, 2065, 1996, 7953, 2003, 2445, 1999, 1996, 2433, 1997, 2019, 1060, 2891, 3670, 1010, 1060, 2891, 14721, 2015, 1998, 5157, 14721, 2015, 2064, 2022, 23599, 1999, 2051, 2008, 2003, 17505, 1999, 1996, 7953, 2946, 1012, 102, 101, 2057, 2036, 6011, 2008, 2065, 2035, 26004, 2015, 2024, 4942, 5302, 8566, 8017, 2059, 3643, 10861, 5134, 2064, 26633, 1060, 2891, 10861, 5134, 1999, 17505, 2051, 1012, 102, 101, 3568, 1010, 2065, 2035, 26004, 2015, 2024, 4942, 5302, 8566, 8017, 1010, 1996, 9896, 3591, 1999, 2023, 2930, 5942, 5157, 10861, 5134, 2069, 1006, 9131, 2008, 1037, 3643, 23032, 2064, 2022, 23599, 2011, 1037, 17505, 2193, 1997, 5157, 10861, 5134, 1031, 1016, 1033, 1007, 1012, 102, 101, 14848, 1016, 29625, 2487, 2445, 2019, 1060, 2891, 26004, 2004, 2019, 1060, 2891, 3670, 1010, 2057, 2064, 16157, 2119, 1060, 2891, 10861, 5134, 1998, 5157, 10861, 5134, 1999, 2051, 17505, 1999, 1996, 7953, 2946, 29625, 18907, 1012, 102, 101, 2445, 2019, 1060, 2891, 26004, 1998, 1037, 9207, 1997, 7597, 2057, 4299, 2000, 26633, 1037, 5157, 14721, 1012, 102, 101, 2034, 1010, 2292, 2149, 3602, 2008, 2009, 2003, 3733, 2000, 26633, 1037, 5157, 14721, 2005, 2019, 29167, 26004, 1999, 17505, 2051, 1010, 2011, 3432, 10549, 2035, 15282, 5167, 1012, 102, 101, 2144, 1996, 7953, 2003, 2445, 2004, 2019, 1060, 2891, 5675, 1998, 2169, 11075, 2003, 2019, 29167, 26004, 1010, 2009, 2003, 2438, 2000, 26633, 1037, 5157, 14721, 2005, 2169, 11075, 1998, 5454, 1996, 2087, 15282, 5724, 1012, 102, 101, 1996, 2972, 2832, 5942, 2051, 17505, 1999, 1996, 7953, 2946, 29625, 10128, 1996, 7953, 2003, 2025, 2445, 2004, 2019, 1060, 2891, 3670, 1010, 2059, 2057, 2079, 2025, 2113, 2129, 2000, 3437, 1060, 2891, 10861, 5134, 2445, 2069, 1037, 5157, 14721, 1012, 102, 101, 2174, 1010, 2005, 1996, 2062, 7775, 2465, 1997, 4942, 5302, 8566, 8017, 26004, 2015, 1010, 2130, 1996, 15863, 3643, 14721, 10514, 26989, 9623, 2000, 3437, 1060, 2891, 10861, 5134, 1010, 2004, 1996, 2206, 14848, 3065, 1024, 14848, 1016, 29625, 2475, 2019, 1060, 2891, 11075, 2005, 1037, 14012, 1055, 1997, 1037, 4942, 5302, 8566, 8017, 26004, 1058, 2064, 2022, 10174, 1999, 17505, 2051, 2478, 3643, 102, 101, 2445, 1037, 14012, 1055, 2057, 2265, 2129, 2000, 9570, 1996, 7978, 1060, 2891, 11075, 1012, 102, 101, 8081, 2070, 15275, 2344, 1997, 1996, 5167, 1999, 1055, 29625, 2302, 3279, 1997, 2236, 3012, 1010, 2292, 1055, 1027, 1063, 1015, 1010, 1012, 1012, 1012, 1010, 1064, 1055, 1064, 1065, 1012, 102, 101, 2292, 1056, 1046, 2022, 1996, 14785, 9710, 1997, 1996, 1046, 29618, 2705, 8875, 2445, 1996, 3025, 1046, 1597, 1015, 5167, 1024, 1056, 1046, 1027, 1058, 1006, 1063, 1015, 1010, 1012, 1012, 1012, 1010, 1046, 1065, 1007, 1597, 1058, 1006, 1063, 1015, 1010, 1012, 1012, 1012, 1010, 1046, 1597, 1015, 1065, 1007, 1012, 102, 101, 1996, 1060, 2891, 11075, 2003, 1006, 1056, 1015, 1603, 1012, 1012, 1012, 1603, 1056, 1064, 1055, 1064, 1007, 1012, 102, 101, 2035, 2008, 2057, 2031, 2000, 6011, 2003, 2008, 1058, 1006, 1055, 1007, 1027, 1173, 1046, 1596, 1055, 1056, 1046, 1010, 1998, 2008, 2005, 2296, 1056, 1611, 1055, 1010, 1058, 1006, 1056, 1007, 1609, 1173, 1046, 1596, 1056, 1056, 1045, 1012, 102, 101, 2005, 2008, 2057, 2224, 2019, 4522, 6210, 1997, 4942, 5302, 8566, 8017, 26004, 2015, 1006, 2156, 1031, 2260, 1033, 2005, 2019, 27841, 6947, 1007, 1024, 1037, 26004, 1058, 2003, 4942, 5302, 8566, 8017, 2065, 2005, 2296, 8875, 1046, 1010, 1998, 26825, 2860, 1010, 1056, 1010, 1059, 1611, 1056, 1010, 1046, 1013, 1596, 1056, 1010, 2057, 2031, 2008, 1058, 102, 101, 1996, 2034, 3200, 4324, 3432, 2011, 2810, 1012, 102, 101, 2000, 2156, 2008, 1058, 1006, 1056, 1007, 1609, 1173, 1046, 1596, 1056, 1056, 1045, 1010, 8081, 1056, 1010, 1998, 2292, 1056, 1056, 1046, 2022, 1996, 14785, 9710, 1997, 8875, 1046, 1999, 1056, 1010, 2478, 1996, 2168, 2344, 2057, 2109, 1999, 1055, 1006, 2008, 2003, 1010, 2344, 1996, 5167, 1999, 1055, 102, 101, 9131, 2008, 2019, 4522, 6210, 1997, 4942, 5302, 8566, 8017, 26004, 2758, 2008, 1996, 14785, 9710, 2515, 2025, 9885, 2043, 5167, 2024, 17159, 1010, 6516, 1058, 1006, 1056, 1007, 1027, 1173, 1046, 1596, 1056, 1056, 1056, 1045, 1609, 1173, 1046, 1596, 1056, 1056, 1045, 2633, 1010, 2000, 2265, 2008, 2023, 11075, 2064, 2022, 102, 101, 22480, 22835, 1996, 7574, 2007, 5157, 14721, 2015, 1012, 102, 101, 6721, 3550, 26939, 1997, 2019, 6948, 16570, 8528, 3370, 1997, 1037, 3291, 2003, 1037, 3115, 6028, 1010, 1998, 2256, 13792, 2224, 2009, 1012, 102, 101, 2174, 1010, 2043, 2028, 4740, 6721, 3550, 26939, 2006, 14743, 3471, 2107, 2004, 22863, 23207, 4818, 10470, 2015, 1996, 3463, 2024, 2025, 2204, 1025, 1037, 6721, 3550, 3601, 2097, 2200, 3497, 10750, 2512, 29624, 7959, 21369, 3468, 7300, 1010, 4983, 1996, 4013, 3676, 14680, 4217, 5547, 1996, 3517, 3737, 1997, 5576, 2011, 1037, 2312, 1051, 1006, 1600, 1049, 1007, 5387, 29625, 18384, 2232, 13792, 102, 101, 2023, 16169, 2038, 1037, 3643, 2008, 2003, 2485, 2000, 1996, 23569, 28591, 1010, 2021, 6854, 2003, 2025, 22945, 1012, 102, 101, 24010, 3314, 2024, 8971, 11543, 1999, 1996, 13711, 2489, 1998, 1996, 1060, 2891, 3572, 1010, 1998, 5262, 1037, 2172, 2488, 6463, 2003, 4663, 2005, 1996, 1060, 2891, 2553, 29625, 4783, 29278, 2063, 7851, 1996, 6721, 3550, 26939, 7709, 1010, 2292, 2149, 9131, 1996, 3115, 6948, 23370, 2005, 22863, 23207, 4818, 10470, 2015, 1024, 25845, 1024, 1173, 1045, 1010, 1055, 1060, 102, 101, 2023, 2003, 2589, 2011, 13729, 1996, 7037, 7399, 2565, 2478, 1996, 3449, 15000, 6499, 3593, 4118, 1012, 102, 101, 2478, 1996, 3449, 15000, 6499, 3593, 4118, 5942, 1037, 1000, 8745, 1000, 14721, 1010, 1998, 2023, 2089, 2022, 3495, 7528, 2478, 1996, 5157, 14721, 2015, 1997, 1996, 7226, 13375, 1012, 102, 101, 2023, 2001, 2034, 10003, 2011, 9152, 8791, 1998, 16562, 2140, 1031, 2539, 1033, 1010, 1998, 1999, 2062, 4751, 2011, 14154, 2213, 13278, 2078, 1998, 9152, 8791, 1031, 1016, 1033, 1012, 102, 101, 1996, 3653, 29624, 8095, 23909, 2003, 4663, 3081, 6721, 3550, 26939, 2004, 4076, 1024, 2005, 2169, 7226, 4063, 1045, 2057, 9174, 5454, 1037, 2275, 1055, 1045, 2011, 4488, 1996, 2206, 6721, 7551, 1024, 2169, 2275, 1055, 2003, 4217, 2007, 9723, 1060, 1045, 1010, 1055, 1010, 1998, 1996, 4064, 2275, 2003, 4217, 2007, 9723, 1015, 1597, 102, 101, 11949, 2008, 1996, 6721, 3550, 26939, 5576, 27852, 2019, 9897, 5576, 2007, 2019, 3517, 3643, 1997, 6728, 1056, 1008, 1010, 1996, 15502, 12884, 2389, 5576, 1012, 102, 101, 2174, 1010, 1996, 5576, 2003, 2025, 22945, 1010, 2004, 2019, 8875, 2453, 2022, 11095, 2000, 2062, 2084, 2028, 7226, 4063, 1012, 102, 101, 1996, 2048, 13792, 2057, 2556, 6551, 11234, 1999, 2129, 2027, 9611, 2023, 1999, 7959, 21369, 8553, 29625, 2050, 2773, 2055, 1996, 14721, 2015, 2734, 2000, 10408, 2256, 13792, 1012, 102, 101, 1996, 9896, 2005, 13711, 1011, 2489, 26004, 2015, 2057, 2556, 1999, 2023, 2930, 5942, 3229, 2000, 1037, 5157, 14721, 1006, 2005, 2169, 3563, 26004, 1058, 1007, 1012, 102, 101, 2119, 13792, 2005, 1060, 2891, 26004, 2015, 2057, 2556, 5478, 1999, 2804, 3229, 2000, 2019, 1060, 2891, 14721, 1012, 2509, 29625, 2487, 13711, 1011, 2489, 26004, 2015, 1012, 102, 101, 5262, 1010, 1996, 3653, 29624, 8095, 23909, 7137, 1037, 2512, 29624, 7959, 21369, 3468, 5576, 1012, 102, 101, 2174, 1010, 2122, 2512, 29624, 7959, 21369, 3468, 7300, 2024, 2069, 1037, 8833, 8486, 2705, 7712, 5387, 2185, 2013, 24010, 1006, 1999, 1996, 3168, 2008, 2007, 2152, 9723, 2169, 8875, 2003, 11095, 2012, 2087, 1037, 8833, 8486, 2705, 7712, 2193, 1997, 2335, 1007, 1012, 102, 101, 2005, 2236, 26004, 2015, 2023, 2755, 2515, 2025, 2393, 1010, 2021, 2004, 2057, 2097, 2265, 2009, 10514, 26989, 9623, 2005, 12935, 26004, 2015, 1006, 2156, 2036, 1031, 1021, 1033, 2005, 2178, 4292, 1010, 1996, 1047, 1011, 24473, 2015, 2544, 1997, 22863, 23207, 4818, 10470, 2015, 1010, 1999, 2029, 2023, 2755, 5260, 2000, 2204, 20167, 2015, 1007, 1012, 102, 101, 1996, 2364, 8089, 2012, 1996, 2540, 1997, 2256, 9896, 2003, 2008, 2028, 2089, 13571, 2023, 8833, 8486, 2705, 7712, 3973, 8540, 1011, 22945, 5576, 2046, 1037, 8833, 8486, 2705, 7712, 1011, 2946, 2155, 1997, 22945, 7300, 1012, 102, 101, 2005, 1996, 2553, 1997, 13711, 1011, 2489, 26004, 2015, 1010, 1996, 3737, 1997, 2028, 1997, 2122, 7300, 2064, 2022, 10351, 2013, 2917, 29625, 10760, 2434, 2544, 1997, 1996, 9896, 3555, 1037, 6463, 1997, 1051, 1006, 8833, 1049, 1007, 1012, 102, 101, 24664, 3351, 1031, 1023, 1033, 5159, 2008, 1996, 9896, 2941, 3640, 2019, 20167, 6463, 1997, 1051, 1006, 8833, 1049, 8833, 8833, 1049, 1007, 1010, 1998, 2023, 2003, 1996, 6463, 2008, 2003, 3591, 2182, 1012, 102, 101, 2057, 2036, 3602, 2008, 24664, 3351, 1031, 1023, 1033, 7534, 2019, 2742, 2029, 3065, 2008, 1996, 20167, 6463, 1997, 1996, 9896, 2003, 2012, 2560, 1179, 1006, 8833, 1049, 8833, 8833, 1049, 1007, 1012, 102, 101, 1006, 1045, 1007, 2224, 6721, 3550, 26939, 2000, 2424, 1037, 1000, 3653, 29624, 8095, 23909, 1000, 1055, 1015, 1010, 2133, 1010, 1055, 1050, 1997, 7689, 1026, 1045, 1010, 1055, 1045, 1028, 2007, 1996, 2206, 5144, 1010, 2073, 1047, 1027, 1051, 1006, 8833, 1049, 8833, 8833, 1049, 1007, 1024, 1528, 2169, 8875, 1046, 3544, 2012, 102, 101, 1528, 1045, 1058, 1045, 1006, 1055, 1045, 1007, 1609, 1015, 1017, 1087, 1006, 1173, 1045, 1010, 1055, 1060, 1045, 1010, 1055, 1058, 1045, 1006, 1055, 1007, 1007, 1012, 102, 101, 1006, 2462, 1007, 2005, 2169, 7226, 4063, 1045, 1010, 13571, 1055, 1045, 2046, 1037, 4487, 2015, 5558, 18447, 2586, 1055, 1045, 1027, 1055, 1015, 1045, 1605, 2133, 1605, 1055, 1047, 2003, 10875, 2008, 2005, 2169, 1015, 1608, 1045, 1015, 1026, 1045, 1016, 1608, 1050, 1998, 1015, 1608, 1054, 1608, 1047, 1010, 2009, 4324, 2008, 1055, 102, 101, 2023, 2003, 2589, 2004, 4076, 1024, 2005, 2169, 1045, 1027, 1015, 1010, 2133, 1010, 1050, 1998, 2169, 1054, 1027, 1015, 1010, 2133, 1010, 1047, 1010, 2057, 2292, 1055, 1054, 1045, 1027, 1063, 1046, 1596, 1055, 1045, 1064, 1046, 3544, 1999, 3599, 1054, 1597, 1015, 1997, 1996, 4520, 1055, 1015, 1010, 102, 101, 1006, 3523, 1007, 2424, 1996, 1054, 2008, 25845, 2015, 1045, 1058, 1045, 1006, 1055, 1054, 1045, 1007, 1010, 1998, 2005, 2169, 1045, 2035, 24755, 2618, 1056, 1045, 1027, 1055, 1054, 1045, 2000, 7226, 4063, 1045, 29625, 1006, 4921, 1007, 2065, 2045, 2003, 1037, 7226, 4063, 1045, 2007, 1058, 1045, 1006, 1049, 1007, 1609, 1173, 1045, 1058, 102, 101, 9872, 1017, 29625, 2487, 2065, 2035, 7953, 26004, 2015, 2024, 13711, 1011, 2489, 2059, 1996, 9896, 7137, 2019, 16169, 2008, 2003, 2019, 1051, 1006, 1047, 1007, 1027, 1051, 1006, 8833, 1049, 8833, 8833, 1049, 1007, 1011, 20167, 2000, 1996, 15502, 2028, 29625, 8545, 2085, 6011, 1996, 9872, 1012, 102, 101, 2875, 2023, 2203, 1010, 2292, 2149, 2562, 2650, 1997, 1996, 1000, 3737, 1000, 1997, 5576, 13339, 2011, 1996, 7783, 4084, 1012, 102, 101, 1006, 1045, 1007, 1996, 6721, 3550, 26939, 7709, 5651, 1996, 15502, 12884, 2389, 5576, 6728, 1056, 1008, 1027, 1173, 1045, 1010, 1055, 1060, 1045, 1010, 1055, 1058, 1045, 1006, 1055, 1007, 1010, 2029, 2003, 2019, 3356, 5391, 2000, 1996, 3643, 1997, 1996, 9897, 15502, 16169, 1010, 6728, 1056, 1012, 102, 101, 1996, 6851, 16268, 2734, 2000, 6011, 2008, 2023, 3357, 5262, 4515, 2007, 1037, 5576, 2008, 2938, 2483, 14213, 2035, 1996, 3223, 3785, 2024, 2445, 2101, 1012, 102, 101, 2012, 2023, 2391, 2057, 2097, 5769, 1996, 4127, 1997, 16268, 2109, 1998, 2054, 2027, 10750, 1012, 102, 101, 2013, 1996, 2034, 16440, 1997, 1996, 6948, 1998, 2478, 3115, 9723, 19202, 2028, 2064, 2265, 2008, 2005, 2296, 8875, 1046, 1010, 1996, 9723, 2008, 2009, 3544, 1999, 2062, 2084, 1047, 4217, 4520, 2003, 27258, 2135, 2235, 1999, 1047, 1012, 102, 101, 1996, 3517, 3643, 1997, 1045, 1058, 1045, 1006, 1055, 1045, 1007, 2012, 2023, 2754, 2003, 2069, 3621, 2625, 2084, 1173, 1045, 1010, 1055, 1060, 1045, 1010, 1055, 1058, 1045, 1006, 1055, 1007, 1027, 6728, 1056, 1008, 1012, 102, 101, 2009, 4076, 2008, 2007, 2200, 2152, 9723, 3904, 1997, 1996, 3223, 14679, 2024, 14424, 1010, 1998, 2947, 2057, 2031, 2072, 1058, 1045, 1006, 1055, 1007, 1609, 1015, 1017, 1087, 6728, 1056, 1008, 2079, 2497, 17168, 23955, 2102, 2632, 29625, 1024, 20167, 2015, 13792, 2005, 6187, 1005, 2015, 2007, 12935, 7226, 13375, 5597, 1997, 3136, 2470, 4002, 1006, 1014, 1007, 102, 101, 22038, 2595, 1011, 22038, 2595, 1010, 1039, 2322, 20348, 15670, 1021, 1006, 2462, 1007, 1996, 2364, 2391, 2182, 2003, 2008, 5262, 2005, 2296, 4964, 1054, 1010, 1996, 4520, 1063, 1055, 1054, 1045, 1065, 1045, 2024, 3940, 14244, 4487, 2015, 5558, 18447, 1998, 2024, 2947, 1037, 9398, 16169, 1012, 102, 101, 2023, 4076, 3495, 2013, 10760, 2810, 1010, 2004, 2296, 24473, 12107, 1997, 2296, 8875, 1046, 2024, 11095, 2000, 4520, 1055, 1054, 1045, 2007, 25582, 2135, 4852, 1054, 29625, 3602, 2008, 2057, 2467, 2562, 1054, 1608, 1047, 2144, 2169, 8875, 3544, 1999, 2012, 2087, 1047, 4520, 1999, 1063, 1055, 1045, 1065, 1012, 102, 101, 1006, 3523, 1007, 1996, 10232, 2224, 1997, 13711, 1011, 2489, 2791, 3310, 2182, 1024, 2144, 2005, 2169, 4964, 1045, 1010, 1055, 1045, 1027, 1054, 1055, 1054, 1045, 1010, 1996, 2755, 2008, 1058, 1045, 2003, 13711, 2489, 12748, 2008, 1054, 1058, 1045, 1006, 1055, 1054, 1045, 1007, 1609, 1058, 1045, 1006, 1055, 102, 101, 2011, 7680, 6562, 2058, 2035, 1045, 2057, 2131, 2008, 1012, 102, 101, 2947, 1010, 1996, 16169, 1056, 1015, 1027, 1055, 1054, 1015, 1010, 2133, 1010, 1056, 1050, 1027, 1055, 1054, 1050, 2003, 2019, 1051, 1006, 8833, 1006, 1049, 1007, 8833, 8833, 1049, 1007, 20167, 2000, 1996, 15502, 16169, 1006, 1998, 2130, 2000, 1996, 15502, 12884, 2389, 16169, 1007, 1012, 102, 101, 1054, 1045, 1058, 1045, 1006, 1055, 1054, 1045, 1007, 1027, 1045, 1054, 1058, 1045, 1006, 1055, 1054, 1045, 1007, 1609, 1045, 1058, 1045, 1006, 1055, 1045, 1007, 1609, 1015, 1017, 1087, 6728, 1056, 1008, 1012, 102, 101, 2009, 1017, 29625, 2487, 29625, 2487, 4751, 1997, 2754, 1006, 1045, 1007, 1012, 102, 101, 2005, 2169, 1046, 1596, 1049, 1010, 2292, 1041, 1046, 19090, 1996, 6721, 8023, 2008, 7127, 3251, 1046, 2001, 11095, 2062, 2084, 1047, 2335, 1012, 102, 101, 2292, 1038, 2022, 1996, 6721, 8023, 2008, 7127, 3251, 2615, 1045, 1006, 1055, 1045, 1007, 1026, 1015, 1017, 6728, 1056, 1008, 1012, 102, 101, 2057, 2097, 6011, 2008, 10975, 1031, 1603, 1046, 1041, 1046, 1603, 1038, 1033, 1026, 1019, 1020, 1012, 102, 101, 2057, 2034, 6011, 2008, 10975, 1031, 1603, 1046, 1041, 1046, 1033, 1026, 1015, 2078, 1012, 102, 101, 8081, 2019, 8875, 1046, 29625, 2292, 1062, 1045, 1010, 1046, 2022, 1996, 6721, 8023, 2008, 16463, 3251, 1046, 1596, 1055, 1045, 1012, 102, 101, 5525, 1010, 1062, 1045, 1010, 1046, 8267, 5300, 1999, 1063, 1014, 1010, 1015, 1065, 1012, 102, 101, 2138, 1997, 1996, 6721, 3550, 26939, 4118, 2057, 2109, 1010, 2057, 2031, 2008, 1996, 10857, 1063, 1062, 1045, 1010, 1046, 1065, 1045, 2024, 2981, 1012, 102, 101, 2057, 9375, 1062, 1046, 1027, 1173, 1045, 1062, 1045, 1010, 1046, 1006, 1045, 29625, 2063, 29625, 1010, 1062, 1046, 2003, 1996, 2193, 1997, 2335, 8875, 1046, 3544, 1999, 1063, 1055, 1045, 1065, 1007, 1012, 102, 101, 2011, 1996, 7399, 3012, 1997, 17626, 1998, 1996, 2034, 4650, 1997, 1996, 6948, 20219, 2057, 2031, 2008, 1041, 1031, 1062, 1046, 1033, 1608, 1015, 1012, 102, 101, 2057, 2085, 2224, 1996, 2206, 2124, 14848, 1010, 1006, 2156, 1010, 1041, 29625, 2290, 29625, 1010, 1996, 2338, 2011, 10210, 10431, 22911, 5886, 1998, 2039, 7011, 2140, 1031, 2403, 1033, 1007, 1024, 3393, 14760, 1017, 29625, 2487, 2292, 1060, 1015, 1010, 2133, 1010, 1060, 1050, 1006, 2005, 12949, 2312, 1050, 1007, 2022, 2981, 16595, 7140, 6894, 7012, 2107, 2008, 2005, 1015, 1608, 1045, 102, 101, 2292, 1060, 1027, 1060, 1015, 1009, 2133, 1009, 1060, 1049, 1012, 102, 101, 2059, 10975, 1031, 1060, 1028, 1017, 8833, 1049, 8833, 8833, 1049, 1033, 1608, 1015, 1049, 23409, 4859, 2947, 2057, 2031, 2008, 10975, 1031, 8875, 1046, 3544, 1999, 2062, 2084, 8833, 1049, 1017, 8833, 8833, 1049, 26825, 1999, 1063, 1055, 1045, 1065, 1033, 1608, 1015, 1049, 1016, 3762, 11243, 1996, 2586, 5391, 2057, 102, 101, 2057, 2097, 2085, 6011, 2008, 10975, 1031, 1038, 1033, 1026, 1017, 1018, 1012, 102, 101, 1059, 29625, 2140, 29625, 2080, 29625, 2290, 29625, 4098, 1045, 1058, 1045, 1006, 1049, 1007, 1027, 1015, 1006, 4728, 1010, 2057, 2064, 11443, 2035, 26004, 2015, 2011, 4098, 1045, 1058, 1045, 1006, 1049, 1007, 1007, 1012, 102, 101, 2065, 6728, 1056, 1008, 1608, 1017, 1010, 2059, 3228, 1049, 2000, 1996, 7226, 4063, 2008, 25845, 2015, 1058, 1045, 1006, 1049, 1007, 1010, 2003, 1037, 22945, 16169, 2029, 3640, 1037, 2204, 20167, 1012, 102, 101, 3568, 1010, 2013, 2085, 2006, 2057, 7868, 2008, 6728, 1056, 1008, 1028, 1017, 1012, 102, 101, 2292, 1037, 2022, 1996, 6721, 8023, 2008, 4152, 1996, 3643, 1997, 1173, 1045, 1058, 1045, 1006, 1055, 1045, 1007, 2044, 3357, 1006, 1045, 1007, 1012, 102, 101, 2057, 2097, 2156, 2008, 1037, 1609, 1173, 1045, 1058, 1045, 1006, 1055, 1007, 1017, 2007, 2152, 9723, 29625, 8545, 2191, 2224, 1997, 1996, 2206, 2522, 28402, 5649, 2013, 18178, 3762, 4095, 6777, 1005, 2015, 16440, 1024, 3393, 14760, 1017, 29625, 2475, 2292, 1060, 2022, 1996, 7680, 1997, 2981, 6721, 10857, 1010, 2169, 1997, 2029, 3658, 1999, 1031, 1014, 29623, 2487, 1033, 1010, 1998, 102, 101, 2059, 1010, 2005, 2151, 1155, 1028, 1014, 1010, 10975, 1031, 1064, 1060, 1597, 1085, 1064, 1609, 1155, 1033, 1608, 1085, 1155, 1016, 1012, 102, 101, 2057, 2064, 2085, 3356, 5391, 1996, 9723, 2008, 2724, 1038, 5158, 29625, 18098, 1031, 1038, 1033, 1027, 10975, 1031, 1037, 1026, 6728, 1056, 1008, 1017, 1033, 1608, 10975, 1031, 1064, 1037, 1597, 6728, 1056, 1008, 1064, 1609, 1016, 7361, 1056, 1008, 1017, 1033, 1608, 1023, 1018, 7361, 1056, 1008, 1608, 1017, 4343, 2063, 2197, 16440, 102, 101, 3568, 1010, 2478, 1996, 2586, 5391, 1024, 10975, 1031, 1603, 1049, 1056, 1027, 1015, 1041, 1056, 1603, 1038, 1033, 1608, 1173, 1046, 1596, 1049, 10975, 1031, 1041, 1046, 1033, 1009, 10975, 1031, 1038, 1033, 1608, 1015, 1050, 1009, 1017, 1018, 1026, 1019, 1020, 8545, 2031, 3491, 2008, 2007, 2204, 9723, 2009, 102, 101, 22038, 2595, 1011, 22038, 2595, 1010, 1039, 2322, 20348, 15670, 1017, 29625, 2475, 1060, 2891, 26004, 2015, 1012, 102, 101, 1996, 9896, 3591, 1999, 2023, 2930, 2003, 2241, 2006, 18077, 2075, 1996, 3252, 1997, 1996, 19962, 2696, 13306, 3973, 4225, 1060, 2891, 2465, 1012, 102, 101, 9131, 2008, 1996, 2465, 1997, 1060, 2891, 26004, 2015, 9975, 3397, 4942, 5302, 8566, 8017, 26004, 2015, 29625, 10760, 9896, 4627, 2011, 11381, 1037, 3653, 29624, 8095, 23909, 2004, 2649, 1999, 1996, 2927, 1997, 1996, 2930, 1010, 2073, 2169, 7226, 4063, 4152, 2012, 2087, 2028, 14012, 1012, 102, 101, 1996, 2279, 3357, 2003, 2000, 1000, 5672, 1000, 1996, 26004, 1997, 1037, 7226, 4063, 2007, 1996, 1060, 2891, 11075, 2008, 14788, 2000, 1996, 14012, 2002, 2288, 1999, 1996, 3653, 29624, 8095, 23909, 1012, 102, 101, 2085, 2057, 2424, 1996, 15502, 5576, 2478, 1996, 1000, 2047, 1000, 26004, 2015, 1012, 102, 101, 11949, 2008, 1037, 3722, 20505, 9896, 4858, 1996, 15502, 16169, 2065, 2035, 7226, 13375, 2031, 29167, 26004, 2015, 29625, 8545, 2024, 2187, 2007, 4760, 2008, 1996, 3643, 1997, 1996, 7013, 16169, 2003, 2025, 2205, 2521, 2013, 1996, 15502, 12884, 2389, 5576, 1012, 102, 101, 2320, 2153, 1010, 1996, 19962, 2696, 13306, 5144, 1997, 1060, 2891, 2272, 2000, 2256, 4681, 1024, 2057, 17908, 1996, 9896, 2011, 10329, 4292, 1037, 2896, 5391, 2006, 1996, 6691, 1997, 2169, 2309, 8875, 2000, 1996, 2561, 2591, 7574, 1012, 102, 101, 1006, 1045, 1007, 6855, 1037, 1000, 3653, 29624, 8095, 23909, 1000, 1055, 1015, 1010, 2133, 1010, 1055, 1050, 2478, 1996, 6721, 3550, 26939, 7709, 1012, 102, 101, 1006, 2462, 1007, 2292, 1006, 1060, 1015, 1024, 1052, 1045, 1015, 1603, 2133, 1603, 1060, 1049, 1024, 1052, 1045, 1049, 1007, 2022, 1996, 20446, 6026, 11075, 2005, 1055, 1045, 1999, 1058, 1045, 1012, 102, 101, 1006, 3523, 1007, 2035, 24755, 2618, 1996, 1046, 29618, 2705, 8875, 2000, 7226, 4063, 1045, 2005, 2029, 1052, 1045, 1046, 1609, 1052, 1045, 1046, 1010, 2005, 2035, 1045, 1596, 1050, 1012, 102, 101, 3602, 2008, 3357, 1006, 1045, 1007, 5942, 3229, 2000, 1037, 5157, 14721, 1010, 1998, 3357, 1006, 2462, 1007, 5942, 3229, 2000, 2019, 1060, 2891, 14721, 1012, 102, 101, 2057, 2079, 2025, 2113, 2065, 2019, 1060, 2891, 14721, 2064, 2022, 23599, 2478, 5157, 10861, 5134, 2069, 1010, 1999, 1996, 2553, 1997, 2236, 1060, 2891, 26004, 2015, 1012, 102, 101, 2174, 1010, 2065, 1037, 26004, 2003, 4942, 5302, 8566, 8017, 1010, 1037, 5157, 14721, 1006, 1998, 1999, 2755, 1010, 1037, 3643, 14721, 1007, 10514, 26989, 9623, 1010, 2004, 2001, 3491, 2077, 1012, 102, 101, 2947, 1010, 2065, 2035, 26004, 2015, 2024, 4942, 5302, 8566, 8017, 2069, 5157, 14721, 2015, 2024, 2734, 2000, 10408, 1996, 9896, 1012, 102, 101, 1015, 1015, 1597, 1006, 1015, 1597, 1015, 1050, 1007, 1050, 1007, 1011, 20167, 2000, 1996, 15502, 2028, 29625, 18907, 1012, 102, 101, 11949, 2008, 1996, 16169, 2550, 2011, 1996, 9896, 2003, 5262, 1037, 22945, 2028, 1012, 102, 101, 2947, 1010, 2035, 2008, 2003, 2187, 2000, 6011, 2003, 2008, 2009, 6162, 2015, 1996, 9059, 20167, 6463, 29625, 29278, 2296, 7226, 4063, 1045, 1998, 14012, 1055, 1010, 2292, 1006, 1060, 1015, 1024, 1052, 1006, 1045, 1010, 1055, 1007, 1015, 1603, 2133, 1603, 1060, 1049, 1024, 1052, 1006, 1045, 1010, 1055, 1007, 1049, 1007, 2022, 102, 101, 2009, 4324, 2008, 1024, 6728, 1056, 1008, 1027, 1173, 1045, 1010, 1055, 1060, 1045, 1010, 1055, 1058, 1045, 1006, 1055, 1007, 1027, 1173, 1045, 1010, 1055, 1060, 1045, 1010, 1055, 1006, 1173, 1046, 1052, 1006, 1045, 1010, 1055, 1007, 1046, 1007, 1027, 1173, 1046, 1006, 1173, 1045, 1010, 1055, 1060, 102, 101, 2292, 2632, 2290, 2022, 1996, 6721, 8023, 2008, 8267, 1996, 3643, 1997, 1996, 2561, 2591, 7574, 2044, 23911, 2075, 2169, 8875, 2004, 1999, 1996, 9896, 1012, 102, 101, 2349, 2000, 1996, 5144, 1997, 1060, 2891, 26004, 2015, 1010, 2632, 2290, 1609, 1173, 1046, 1053, 1046, 1012, 102, 101, 2023, 2003, 2138, 2065, 1006, 1060, 1015, 1024, 1052, 1006, 1045, 1010, 1055, 1007, 1015, 1603, 2133, 1603, 1060, 1049, 1024, 1052, 1006, 1045, 1010, 1055, 1007, 1049, 1007, 2003, 1996, 20446, 6026, 11075, 1997, 1055, 1999, 1058, 1045, 2059, 1010, 2011, 1060, 2891, 1010, 2005, 2296, 2102, 1611, 1055, 1173, 1046, 1596, 102, 101, 2057, 2097, 2085, 2265, 2008, 1996, 17626, 1997, 1053, 1046, 2003, 10351, 2013, 2917, 2011, 1006, 1015, 1597, 1006, 1015, 1597, 1015, 1050, 1007, 1050, 1007, 1087, 1006, 1173, 1045, 1010, 1055, 1060, 1045, 1010, 1055, 1052, 1006, 1045, 1010, 1055, 1007, 1046, 1007, 1012, 102, 101, 2947, 1010, 2011, 1996, 7399, 3012, 1997, 17626, 1024, 1041, 1031, 2632, 2290, 1033, 1609, 1173, 1046, 1041, 1031, 1053, 1046, 1033, 1609, 1173, 1046, 1006, 1015, 1597, 1006, 1015, 1597, 1015, 1050, 1007, 1050, 1007, 1087, 1006, 1173, 1045, 1010, 1055, 1060, 1045, 1010, 1055, 1052, 1006, 1045, 1010, 1055, 1007, 102, 101, 2057, 2097, 2896, 5391, 1996, 3517, 3643, 1997, 1041, 1031, 1053, 1046, 1033, 2011, 6195, 1037, 2367, 2126, 1997, 23911, 2075, 1046, 29625, 2292, 2595, 1046, 1045, 1027, 1173, 1055, 1064, 1046, 1596, 1055, 1060, 1045, 1010, 1055, 1998, 1058, 1046, 1045, 1027, 1173, 1055, 1064, 1046, 1596, 1055, 1060, 1045, 1010, 1055, 102, 101, 2008, 2003, 1010, 1060, 1045, 2003, 1996, 9723, 2008, 7226, 4063, 1045, 4152, 8875, 1046, 1999, 1996, 1000, 3653, 29624, 8095, 23909, 1000, 1010, 1998, 1058, 1046, 1045, 2003, 1996, 3517, 3643, 1997, 1046, 2000, 7226, 4063, 1045, 1010, 22442, 2006, 1045, 4909, 1046, 1999, 1996, 1000, 3653, 29624, 8095, 23909, 1000, 1012, 102, 101, 2344, 1996, 7226, 13375, 1999, 1996, 16922, 2344, 1997, 2037, 1058, 1046, 1045, 1005, 2015, 1012, 102, 101, 2302, 3279, 1997, 2236, 3012, 1010, 2292, 2149, 7868, 2023, 2344, 2000, 2022, 1015, 1010, 2133, 1010, 1050, 1012, 102, 101, 2057, 23911, 1046, 2000, 1996, 3284, 4396, 1006, 2034, 1007, 7226, 4063, 2040, 2288, 8875, 1046, 1999, 1996, 1000, 3653, 29624, 8095, 23909, 1000, 1012, 102, 101, 19090, 2011, 1056, 1046, 1996, 3517, 3643, 1997, 1046, 1999, 2023, 16169, 29625, 16429, 8043, 3726, 2008, 1041, 1031, 1053, 1046, 1033, 1609, 1041, 1031, 1056, 1046, 1033, 2138, 1041, 1031, 1053, 1046, 1033, 2003, 1996, 3517, 3643, 1997, 8875, 1046, 2043, 1046, 2003, 2467, 4137, 2000, 1996, 7226, 4063, 2007, 1996, 3284, 1006, 2566, 102, 101, 3568, 1010, 2000, 6011, 1996, 3393, 14760, 2057, 2097, 5391, 1041, 1031, 1056, 1046, 1033, 2013, 2917, 1012, 102, 101, 2009, 2003, 3733, 2000, 2156, 2008, 2063, 1031, 1056, 1046, 1033, 1027, 1060, 1046, 1015, 1058, 1046, 1015, 1009, 1006, 1015, 1597, 1060, 1046, 1015, 1007, 1060, 1046, 1016, 1058, 1046, 1016, 1009, 2133, 1009, 1006, 1015, 1597, 1060, 1046, 1015, 1007, 1006, 1015, 1597, 1060, 1046, 1016, 1007, 1087, 2133, 102, 101, 3568, 1010, 2057, 2031, 2005, 2296, 1015, 1608, 1047, 1608, 1050, 2008, 1024, 1015, 1597, 1006, 1015, 1597, 1060, 1046, 1015, 1007, 1087, 2133, 1087, 1006, 1015, 1597, 1060, 1046, 1047, 1007, 1609, 1015, 1597, 1006, 1015, 1597, 1173, 1047, 1045, 1027, 1015, 1060, 1046, 1045, 1047, 1007, 1047, 1609, 102, 101, 9375, 1058, 1046, 1050, 1009, 2487, 1027, 1014, 1012, 102, 101, 4800, 22086, 2075, 8522, 1015, 2011, 1006, 1058, 1046, 1047, 1597, 1058, 1046, 1047, 1009, 2487, 1007, 2005, 2296, 1015, 1608, 1047, 1608, 1050, 1010, 1998, 7680, 6562, 2058, 2035, 1047, 1005, 2015, 3065, 2008, 1024, 1041, 1031, 1056, 1046, 1033, 1609, 1006, 1015, 1597, 1006, 1015, 1597, 1015, 1050, 1007, 1050, 1007, 1006, 1173, 102, 101, 2057, 2085, 2556, 1037, 1016, 1011, 20167, 9896, 2005, 22863, 23207, 4818, 10470, 2015, 2007, 1060, 2891, 7226, 13375, 1012, 102, 101, 2096, 1996, 20167, 11302, 2003, 4788, 2084, 1996, 1041, 1041, 1597, 2487, 11302, 1997, 1996, 3025, 9896, 1010, 1996, 2783, 9896, 2003, 22863, 23207, 4818, 1010, 3435, 1010, 1998, 3722, 1012, 102, 101, 5060, 2008, 1999, 3357, 1006, 2462, 1007, 1037, 2057, 5478, 3229, 2000, 1037, 5157, 14721, 1010, 1998, 1999, 3357, 1006, 2462, 1007, 1039, 2057, 5478, 3229, 2000, 2019, 1060, 2891, 14721, 1012, 102, 101, 2005, 2169, 1056, 1611, 1049, 1010, 2057, 19090, 2011, 1052, 1045, 1006, 1056, 1007, 1996, 7680, 1997, 1996, 7597, 1997, 1996, 5167, 1999, 1056, 2012, 1996, 1045, 29618, 2705, 2754, 1997, 1996, 9896, 1012, 102, 101, 2292, 1594, 1045, 1027, 1052, 1045, 1006, 1049, 1007, 1597, 1052, 1045, 1597, 2487, 1006, 1049, 1007, 1010, 1045, 29625, 2063, 29625, 1010, 1996, 2561, 4489, 1999, 7597, 2090, 5711, 1006, 1045, 1597, 1015, 1007, 1998, 1045, 1006, 2007, 1052, 1014, 1006, 1049, 1007, 1027, 1014, 1007, 1012, 102, 101, 2292, 1037, 1015, 1010, 2133, 1010, 1037, 1050, 2022, 1996, 16169, 7013, 2011, 1996, 9896, 1012, 102, 101, 2292, 1051, 1015, 1010, 2133, 1010, 1051, 1050, 2022, 1996, 15502, 16169, 1012, 102, 101, 2057, 2097, 6011, 1996, 19579, 1045, 1058, 1045, 1006, 1051, 1045, 1007, 1608, 1016, 29733, 1045, 1058, 1045, 1006, 1037, 1045, 1007, 1012, 102, 101, 2000, 2079, 2061, 1010, 2057, 6011, 2093, 3722, 3393, 14760, 2015, 1024, 3393, 14760, 1017, 29625, 2549, 1996, 2591, 7574, 1997, 1996, 16169, 7013, 2011, 1996, 9896, 2003, 2012, 2560, 1996, 7680, 1997, 5167, 1005, 7597, 2012, 1996, 2203, 1997, 1996, 9896, 1006, 2044, 1996, 1050, 29618, 2705, 2754, 1007, 1012, 102, 101, 2008, 2003, 1010, 1052, 1050, 1006, 1049, 1007, 1608, 1173, 1045, 1058, 1045, 1006, 1037, 1045, 1007, 1012, 102, 101, 5136, 1037, 3563, 7226, 4063, 1045, 29625, 2292, 1056, 2022, 1996, 14012, 4137, 2000, 2008, 7226, 4063, 2011, 1996, 9896, 1999, 2754, 1045, 29625, 5525, 1037, 1045, 1611, 1056, 1012, 102, 101, 2138, 1058, 1045, 2003, 2019, 1060, 2891, 26004, 1010, 2057, 2031, 2008, 1052, 1045, 1006, 1037, 1045, 1007, 1608, 1058, 1045, 1006, 1037, 1045, 1007, 1012, 102, 101, 2174, 1010, 2144, 1996, 5167, 1999, 1037, 1045, 2020, 2025, 18026, 2044, 1996, 1045, 29618, 2705, 2754, 1010, 1998, 2061, 2037, 7597, 2020, 2025, 8776, 1010, 1052, 1045, 1006, 1037, 1045, 1007, 1027, 1052, 1050, 1006, 1037, 1045, 1007, 1012, 102, 101, 2057, 2031, 2008, 1052, 1050, 1006, 1037, 1045, 1007, 1608, 1058, 1045, 1006, 1037, 1045, 1007, 1010, 1998, 2061, 1052, 1050, 1006, 1049, 1007, 1027, 1173, 1050, 1045, 1027, 1015, 1052, 1050, 1006, 1037, 1045, 1007, 1608, 1173, 1050, 1045, 1027, 1015, 1058, 1045, 1006, 1037, 1045, 1007, 1012, 102, 101, 3393, 14760, 1017, 29625, 2629, 1996, 7597, 4137, 2000, 1996, 5167, 2802, 1996, 7781, 1997, 1996, 9896, 2024, 2512, 29624, 3207, 16748, 21369, 3070, 1012, 102, 101, 2292, 1055, 2022, 1996, 2275, 2008, 25845, 2015, 1996, 5157, 1997, 1996, 1045, 29618, 2705, 7226, 4063, 2012, 1996, 1045, 29618, 2705, 2754, 1997, 1996, 9896, 1012, 102, 101, 2292, 1006, 1060, 1015, 1024, 1053, 1015, 1603, 2133, 1603, 1060, 1049, 1024, 1053, 1049, 1007, 2022, 1996, 1060, 2891, 11075, 1997, 1055, 1999, 1058, 1045, 1012, 102, 101, 2085, 1010, 7868, 2045, 2003, 2019, 8875, 1046, 1596, 1055, 2005, 2029, 1053, 1046, 1026, 1052, 1045, 1046, 1012, 102, 101, 1058, 1045, 2003, 2019, 1060, 2891, 26004, 1998, 2061, 2057, 2031, 2008, 1173, 1056, 1596, 1006, 1055, 1597, 1063, 1046, 1065, 1007, 1053, 1056, 1608, 1058, 1045, 1006, 1055, 1597, 1063, 1046, 1065, 1007, 1998, 1173, 1054, 1596, 1055, 1053, 1054, 1027, 1058, 1045, 1006, 1055, 1007, 1012, 102, 101, 6516, 1024, 1058, 1045, 1006, 1055, 1007, 1597, 1173, 1054, 1596, 1055, 1052, 1045, 1054, 1027, 1173, 1054, 1596, 1055, 1053, 1054, 1597, 1173, 1054, 1596, 1055, 1052, 1045, 1054, 1027, 1006, 1053, 1046, 1597, 1052, 1045, 1046, 1007, 1009, 1006, 1173, 1056, 1596, 1006, 1055, 1597, 1063, 1046, 1065, 102, 101, 2008, 2003, 1010, 1173, 1045, 1058, 1045, 1006, 1051, 1045, 1007, 1608, 1016, 2361, 1050, 1006, 1049, 1007, 1012, 102, 101, 9131, 2008, 1594, 1045, 5836, 1996, 1000, 5157, 1000, 1997, 2447, 1045, 2012, 7597, 1052, 1045, 1597, 2487, 1012, 102, 101, 6516, 1010, 2005, 2169, 1045, 1010, 1015, 1608, 1045, 1608, 1050, 1010, 1594, 1045, 1027, 4098, 1056, 1611, 1049, 1006, 1058, 1045, 1006, 1056, 1007, 1597, 1052, 1045, 1597, 2487, 1006, 1056, 1007, 1007, 1006, 4728, 1010, 1045, 2052, 2031, 4217, 1037, 2367, 14012, 1997, 5167, 1007, 1012, 102, 101, 2057, 2031, 1024, 1058, 1045, 1006, 1051, 1045, 1007, 1597, 1052, 1045, 1597, 2487, 1006, 1051, 1045, 1007, 1608, 1594, 1045, 1012, 102, 101, 2144, 1996, 7597, 2079, 2025, 9885, 2802, 1996, 9896, 1010, 1996, 2206, 16440, 4324, 1024, 1058, 1045, 1006, 1051, 1045, 1007, 1597, 1052, 1050, 1006, 1051, 1045, 1007, 1608, 1594, 1045, 1012, 102, 101, 2011, 7680, 6562, 2039, 2006, 2119, 3903, 1997, 1996, 8522, 2057, 2131, 1024, 1173, 1050, 1045, 1027, 1015, 1058, 1045, 1006, 1051, 1045, 1007, 1597, 1173, 1045, 1052, 1050, 1006, 1051, 1045, 1007, 1608, 1173, 1045, 1594, 1045, 1173, 1045, 1058, 1045, 1006, 1051, 1045, 1007, 1597, 1052, 1050, 1006, 1049, 102, 101, 1996, 2034, 7226, 4063, 1005, 2015, 26004, 2003, 1058, 1015, 1006, 1063, 1037, 1065, 1007, 1027, 1058, 1015, 1006, 1063, 1038, 1065, 1007, 1027, 1058, 1015, 1006, 1063, 1037, 1605, 1038, 1065, 1007, 1027, 1015, 1012, 102, 101, 1996, 26004, 1997, 1996, 2117, 7226, 4063, 2003, 1058, 1016, 1006, 1063, 1037, 1065, 1007, 1027, 1014, 1010, 1058, 1016, 1006, 1063, 1038, 1065, 1007, 1027, 1058, 1016, 1006, 1063, 1037, 1605, 1038, 1065, 1007, 1027, 1015, 1012, 102, 101, 1037, 7574, 1997, 1016, 2064, 2022, 4719, 2011, 2035, 27483, 1037, 2000, 1996, 2034, 7226, 4063, 1010, 1998, 1038, 2000, 1996, 2117, 7226, 4063, 1012, 102, 101, 2174, 1010, 1996, 2034, 7226, 4063, 2453, 4299, 2000, 2131, 1038, 2012, 1996, 2034, 2754, 1010, 1998, 1996, 15502, 2591, 7574, 4719, 2003, 2069, 1015, 1012, 102, 101, 6516, 1010, 1996, 20167, 6463, 4719, 2011, 1996, 9896, 2003, 2025, 2488, 2084, 1016, 1012, 102, 101, 9152, 8791, 1031, 2321, 1033, 10592, 1996, 2206, 22863, 23207, 4818, 10470, 1024, 2169, 7226, 4063, 1045, 2038, 1037, 2275, 1056, 1045, 1997, 26825, 2008, 2002, 2003, 9280, 4699, 1999, 1012, 102, 101, 2057, 2036, 2031, 2008, 2035, 1996, 1056, 1045, 1005, 2015, 2031, 1996, 2168, 2946, 1010, 1056, 1012, 102, 101, 1037, 3563, 6013, 1997, 2023, 22863, 23207, 4818, 10470, 2003, 4340, 2011, 20648, 2075, 1037, 2275, 1045, 1045, 2005, 2169, 7226, 4063, 1045, 1010, 1045, 1045, 1611, 1056, 1045, 1010, 2029, 14796, 1996, 26825, 2256, 7226, 4063, 2003, 4699, 1999, 1012, 102, 101, 1996, 26004, 1997, 2169, 7226, 4063, 1045, 2003, 1996, 2206, 1024, 1058, 1045, 1006, 1055, 1007, 1027, 1015, 2065, 2045, 6526, 2070, 1054, 1596, 1045, 1045, 2107, 2008, 1054, 1611, 1055, 1010, 1998, 1014, 4728, 1012, 102, 101, 9152, 8791, 3065, 2008, 20852, 2090, 1996, 2553, 2073, 2045, 2003, 1006, 1015, 1007, 2019, 16169, 2008, 24022, 2169, 7226, 4063, 1045, 1037, 1006, 3565, 13462, 1997, 1037, 1007, 2275, 2002, 2003, 4699, 1999, 2013, 1045, 1045, 1006, 1998, 2061, 1996, 15502, 7574, 2003, 1050, 1007, 1010, 1998, 2090, 1006, 1016, 1007, 2069, 102, 101, 2023, 3065, 1999, 3327, 2008, 2296, 20167, 9896, 2008, 3640, 2019, 20167, 6463, 2488, 2084, 1050, 2005, 22863, 23207, 4818, 10470, 2015, 2007, 2236, 26004, 2015, 5942, 27258, 4807, 29625, 7485, 2149, 2085, 5547, 2023, 22863, 23207, 4818, 10470, 2000, 2191, 1996, 26004, 2015, 13711, 2489, 1012, 102, 101, 9375, 2047, 13711, 1011, 2489, 26004, 2015, 2004, 4076, 1024, 1058, 1045, 1006, 1055, 1007, 1027, 1058, 1045, 1006, 1055, 1007, 1009, 1015, 1010, 2005, 1055, 1027, 1593, 1012, 102, 101, 2122, 2047, 26004, 2015, 2024, 5262, 3527, 2497, 17168, 5488, 3802, 2632, 29625, 1024, 20167, 2015, 13792, 2005, 6187, 1005, 2015, 2007, 12935, 7226, 13375, 5597, 1997, 3136, 2470, 4002, 1006, 1014, 1007, 1010, 4903, 1012, 102, 101, 22038, 2595, 1011, 22038, 2595, 1010, 1039, 2322, 20348, 15670, 2340, 13711, 2489, 1010, 2144, 1996, 3643, 1997, 2169, 2512, 29624, 6633, 13876, 2100, 14012, 2003, 2012, 2560, 1015, 1010, 1998, 2053, 14012, 2038, 1037, 3643, 3469, 2084, 1016, 1012, 102, 101, 5136, 2019, 6013, 2007, 26004, 2015, 1058, 1015, 1010, 1012, 1012, 1012, 1010, 1058, 1050, 1012, 102, 101, 2057, 2064, 2156, 2008, 20852, 2090, 1996, 2206, 3572, 5942, 27258, 4807, 1024, 1996, 15502, 2591, 7574, 2003, 1050, 1009, 1015, 1010, 1998, 1996, 15502, 2591, 7574, 2003, 1016, 2078, 1006, 2144, 20852, 2090, 2122, 3572, 2003, 5662, 2000, 20852, 2090, 1996, 7978, 3572, 1999, 1996, 10470, 3591, 1999, 1031, 2321, 102, 101, 6516, 1010, 2057, 2031, 4928, 2008, 2005, 2296, 1050, 1609, 1016, 10910, 6947, 1012, 102, 101, 2057, 2097, 2265, 1037, 17505, 1011, 2051, 7312, 2013, 4098, 1011, 1047, 1011, 3104, 1012, 102, 101, 4098, 1011, 1047, 1011, 3104, 2003, 4225, 2004, 4076, 1024, 2445, 1049, 5167, 1010, 1998, 1037, 3074, 1997, 16745, 2015, 1997, 2122, 5167, 1010, 1996, 7863, 2003, 2000, 25845, 1996, 2193, 1997, 5167, 2029, 2064, 2022, 3139, 2011, 1047, 16745, 2015, 1012, 102, 101, 24664, 3351, 1031, 1022, 1033, 4928, 2008, 2009, 2003, 27937, 1011, 2524, 2000, 15796, 2023, 3291, 2306, 1037, 2488, 5387, 2084, 1041, 1041, 1597, 2487, 1012, 102, 101, 2023, 3291, 2064, 2022, 4991, 2046, 1037, 22863, 23207, 4818, 10470, 2007, 1060, 2891, 26004, 2015, 1024, 2445, 2019, 6013, 1997, 4098, 1011, 1047, 1011, 3104, 1010, 2057, 3443, 2019, 10470, 2007, 1047, 7226, 13375, 1998, 1049, 5350, 1012, 102, 101, 2035, 7226, 13375, 2097, 2031, 1996, 2168, 1060, 2891, 26004, 1024, 1037, 11075, 2005, 2169, 16745, 1999, 1996, 4098, 1011, 1047, 1011, 3104, 3291, 2073, 1996, 3643, 1997, 2296, 8875, 1999, 1996, 11075, 2003, 1015, 1012, 102, 101, 11949, 2008, 2296, 3601, 1997, 1047, 16745, 2015, 1999, 1996, 4098, 1011, 1047, 1011, 3104, 14788, 2000, 2019, 16169, 1999, 1996, 22863, 23207, 4818, 10470, 2007, 1996, 2168, 3643, 1010, 2011, 23911, 2075, 2035, 5167, 1999, 2275, 1045, 2000, 7226, 4063, 1045, 1006, 1998, 4468, 23911, 2075, 2028, 8875, 2000, 2062, 2059, 2028, 7226, 4063, 1007, 1012, 102, 101, 1999, 1996, 2060, 3257, 1010, 2296, 16169, 14788, 2000, 1037, 3601, 1997, 1047, 4520, 1999, 4098, 1011, 1047, 1011, 3104, 2007, 2012, 2560, 1996, 2591, 7574, 3643, 1024, 5454, 1047, 16745, 2015, 1010, 2061, 2008, 16745, 1045, 3397, 1996, 5167, 1999, 1996, 11075, 20446, 6026, 7226, 4063, 1045, 1005, 2015, 5114, 1012, 102, 101, 6516, 1010, 2057, 2024, 12361, 2008, 1996, 2193, 1997, 5167, 3139, 2003, 2053, 2625, 2084, 1996, 2591, 7574, 1012, 102, 101, 1996, 9872, 4076, 29625, 2638, 18413, 2057, 6011, 2019, 4895, 8663, 27064, 4807, 2896, 5391, 1012, 102, 101, 1996, 6947, 2003, 2241, 2006, 7312, 2013, 1996, 15796, 1011, 4487, 2015, 5558, 18447, 2791, 3291, 2478, 1037, 4013, 3676, 27965, 4588, 2810, 1012, 102, 101, 1996, 7312, 16803, 2006, 1037, 22863, 23207, 4818, 3252, 2008, 21586, 1996, 3223, 6578, 2090, 1996, 15502, 5576, 1998, 2035, 2060, 7300, 1012, 102, 101, 2057, 2034, 9375, 2023, 3252, 1010, 1998, 2059, 6011, 2049, 4598, 3081, 1996, 4013, 3676, 27965, 4588, 4118, 1012, 102, 101, 2057, 2097, 6011, 2256, 2896, 5391, 2011, 8161, 2013, 1996, 15796, 4487, 2015, 5558, 18447, 2791, 3291, 1012, 102, 101, 1999, 2023, 3291, 1010, 2045, 2024, 1050, 2867, 1010, 2169, 2447, 1045, 4324, 1037, 5164, 1037, 1045, 2029, 27171, 1037, 16745, 1997, 1063, 1015, 1010, 2133, 1010, 1056, 1065, 1012, 102, 101, 1996, 3125, 2003, 2000, 10782, 2090, 1996, 2206, 2048, 6034, 3572, 1024, 1528, 1604, 1050, 1045, 1027, 1015, 1037, 1045, 1027, 1593, 1528, 2005, 2296, 1045, 1027, 1046, 1010, 1037, 1045, 1604, 1037, 1046, 1027, 1593, 2632, 2239, 3802, 2632, 29625, 1031, 1015, 1033, 6011, 2008, 1996, 4807, 11619, 1997, 2023, 3291, 102, 101, 2023, 2765, 2036, 4324, 2005, 6721, 3550, 16744, 2007, 10351, 1016, 1011, 11536, 7561, 29625, 8545, 2265, 1037, 7312, 2013, 1996, 15796, 1011, 4487, 2015, 5558, 18447, 2791, 3291, 2006, 19019, 1997, 2946, 1056, 1027, 1041, 1016, 2213, 1050, 2000, 1996, 3291, 1997, 4531, 2019, 15502, 5576, 1999, 22863, 23207, 4818, 10470, 2015, 2007, 1060, 2891, 7226, 13375, 1012, 102, 101, 2057, 2059, 6011, 1037, 4807, 2896, 5391, 2005, 20852, 2090, 1996, 2553, 1996, 15502, 3643, 2003, 1049, 1998, 1996, 2553, 2009, 2003, 1049, 1031, 1015, 1597, 1006, 1015, 1597, 1015, 1050, 1007, 1050, 1033, 1012, 102, 101, 6210, 1018, 29625, 2487, 1037, 2275, 1997, 13571, 2015, 1042, 1027, 1063, 1052, 1055, 1065, 1055, 1027, 1015, 1010, 2133, 1010, 1056, 2003, 2056, 2000, 2031, 1996, 1006, 1050, 1010, 1007, 1011, 5266, 3200, 2065, 2005, 2296, 3601, 1997, 29299, 1015, 1608, 1055, 1015, 1010, 1055, 1016, 1010, 2133, 1055, 1050, 1608, 1056, 102, 101, 3393, 14760, 1018, 29625, 2487, 2005, 2296, 1028, 1014, 1010, 2045, 6526, 1037, 2275, 1042, 1997, 13571, 2015, 2007, 1996, 1006, 1050, 1010, 1007, 1011, 5266, 3200, 1997, 2946, 1064, 1042, 1064, 1027, 1056, 1027, 1041, 1006, 1015, 1597, 1006, 1015, 1597, 1015, 1050, 1007, 1050, 1007, 3461, 1016, 1017, 2078, 1012, 102, 101, 2057, 2224, 4013, 3676, 27965, 4588, 2810, 2000, 6855, 2107, 1037, 2275, 1024, 2169, 13571, 1052, 1055, 2097, 2022, 4217, 9174, 2012, 6721, 1006, 2169, 5783, 2097, 2022, 2872, 1999, 3599, 2028, 1997, 1996, 1052, 1045, 1055, 2007, 5020, 9723, 1007, 1012, 102, 101, 2057, 2097, 5478, 1996, 2206, 2544, 1997, 1996, 24188, 3630, 4246, 19202, 1024, 3393, 14760, 1018, 29625, 2475, 2292, 1060, 1015, 1010, 2133, 1010, 1060, 1049, 2022, 2981, 6721, 10857, 2008, 2202, 5300, 1999, 1063, 1014, 1010, 1015, 1065, 1010, 2107, 2008, 2005, 2035, 1045, 1010, 10975, 1031, 1060, 1045, 1027, 1015, 1033, 1027, 1052, 102, 101, 2005, 2296, 1046, 1596, 1049, 2292, 1061, 1046, 2022, 1996, 6721, 8023, 2008, 8267, 1037, 3643, 1997, 1015, 2065, 1046, 1596, 1605, 1050, 1045, 1027, 1015, 1052, 1045, 9033, 1998, 1014, 4728, 29625, 16429, 8043, 3726, 2008, 1041, 1031, 1061, 1046, 1033, 1027, 1015, 1597, 1006, 1015, 1597, 1015, 1050, 1007, 1050, 1012, 102, 101, 2478, 1996, 2197, 4366, 1010, 2057, 2031, 2008, 2005, 2151, 1014, 1026, 1026, 1015, 1024, 10975, 1031, 1064, 1605, 1050, 1045, 1027, 1015, 1052, 1045, 9033, 1064, 1028, 1006, 1015, 1009, 1007, 1049, 1031, 1015, 1597, 1006, 1015, 1597, 1015, 1050, 1007, 1050, 1033, 1033, 1027, 10975, 1031, 1173, 1046, 102, 101, 7868, 2019, 6013, 1997, 1996, 15796, 1011, 4487, 2015, 5558, 18447, 2791, 3291, 2006, 19019, 1997, 2946, 1056, 1027, 1041, 1006, 1015, 1597, 1006, 1015, 1597, 1015, 1050, 1007, 1050, 1007, 3461, 1016, 1017, 2078, 1010, 1999, 2029, 2447, 1045, 8267, 1996, 5164, 1037, 1045, 1611, 1063, 1015, 1010, 2133, 1010, 1056, 1065, 1012, 102, 101, 2057, 5547, 2009, 2046, 1037, 22863, 23207, 4818, 10470, 2007, 1050, 7226, 13375, 1010, 2169, 2007, 1060, 2891, 26004, 1010, 1999, 1996, 2206, 5450, 1024, 2292, 1049, 1027, 1063, 1015, 1010, 2133, 1010, 1049, 1065, 1012, 102, 101, 2447, 1045, 2097, 9570, 1996, 3074, 1038, 1045, 1027, 1063, 1052, 1045, 1055, 1064, 1055, 1596, 1037, 1045, 1065, 1012, 102, 101, 7226, 4063, 1045, 1005, 2015, 26004, 2097, 8676, 1997, 1064, 1038, 1045, 1064, 24059, 1024, 1613, 1056, 1596, 1038, 1045, 1006, 1603, 1056, 1596, 1056, 1056, 1027, 1015, 1007, 1012, 102, 101, 1999, 2616, 1010, 2169, 11075, 14788, 2000, 1037, 2275, 1996, 2447, 2003, 4699, 1999, 1010, 1998, 2023, 11075, 3957, 1037, 3643, 1997, 1015, 2000, 2019, 8875, 2065, 2009, 7460, 2000, 1996, 2359, 2275, 1010, 1998, 1014, 4728, 29625, 16429, 8043, 3726, 2008, 2065, 2045, 6526, 1055, 1596, 1604, 1037, 1045, 1010, 2059, 2045, 2003, 102, 101, 2947, 1010, 1996, 3643, 1997, 2023, 16169, 2003, 1049, 1012, 102, 101, 2006, 1996, 2060, 2192, 1010, 2065, 2005, 2296, 1045, 1027, 1046, 1010, 1037, 1045, 1604, 1037, 1046, 1027, 1593, 2059, 1996, 3643, 1997, 1996, 15502, 5576, 2003, 2012, 2087, 1006, 1015, 1009, 1007, 1049, 1031, 1015, 1597, 1006, 1015, 1597, 1015, 1050, 1007, 1050, 1033, 1012, 102, 101, 1996, 2117, 8089, 2003, 2144, 1996, 4520, 2031, 1996, 1006, 1050, 1010, 1007, 1011, 5266, 3200, 1010, 2061, 1996, 2867, 2131, 2362, 1037, 3643, 1997, 2012, 2087, 1006, 1006, 1015, 1009, 1007, 1049, 1031, 1015, 1597, 1006, 1015, 1597, 1015, 1050, 1007, 1050, 1033, 1007, 1049, 2013, 1996, 11095, 5167, 102, 101, 2144, 1996, 4807, 11619, 1997, 1996, 15796, 1011, 4487, 2015, 5558, 18447, 2791, 3291, 2003, 1179, 1006, 1056, 1050, 1018, 1007, 1010, 1999, 2256, 2553, 2009, 2003, 1179, 1006, 1041, 1006, 1015, 1597, 1006, 1015, 1597, 1015, 1050, 1007, 1050, 1007, 3461, 1016, 1048, 2078, 1050, 1017, 2078, 1007, 1012, 102, 101, 1999, 3327, 1010, 2004, 2146, 2004, 1049, 1015, 1597, 1028, 1050, 1010, 1998, 2005, 2151, 5377, 1014, 1026, 1026, 1015, 1010, 1996, 4807, 11619, 2003, 27258, 1012, 102, 101, 2023, 14730, 1996, 6947, 1997, 1996, 9872, 1012, 2629, 1012, 102, 101, 3606, 3993, 20167, 2015, 2478, 3643, 10861, 5134, 1012, 2629, 29625, 2487, 18315, 2290, 1998, 29160, 1999, 2846, 13792, 1012, 102, 101, 15835, 1996, 2364, 3893, 2765, 1997, 7337, 2640, 2003, 1996, 18315, 2290, 7909, 5679, 1012, 102, 101, 2292, 2149, 6235, 2023, 7909, 5679, 2043, 4162, 2000, 22863, 23207, 4818, 10470, 2015, 1012, 102, 101, 2034, 1010, 2424, 1996, 15502, 5576, 1006, 1051, 1015, 1010, 2133, 1010, 1051, 1050, 1007, 1010, 1998, 2035, 24755, 2618, 11914, 1012, 102, 101, 2059, 1010, 3477, 2169, 7226, 4063, 1996, 7680, 1997, 1996, 16548, 1997, 1996, 2717, 1997, 1996, 7226, 13375, 1012, 102, 101, 2008, 2003, 1010, 7226, 4063, 1045, 8267, 1037, 7909, 1997, 1173, 1047, 1027, 1045, 1058, 1047, 1006, 1051, 1047, 1007, 1012, 102, 101, 2292, 2149, 11628, 1996, 2561, 9710, 1997, 7226, 4063, 1045, 1024, 1058, 1045, 1006, 1051, 1045, 1007, 1009, 1173, 1047, 1027, 1045, 1058, 1047, 1006, 1051, 1047, 1007, 1006, 1996, 3643, 2002, 12154, 2013, 1996, 14012, 2002, 2288, 4606, 2010, 7909, 1007, 1012, 102, 101, 6516, 1010, 1996, 2561, 9710, 1997, 2169, 7226, 4063, 2003, 5020, 2000, 1996, 3643, 1997, 1996, 16169, 1012, 102, 101, 11949, 2008, 1996, 16169, 2008, 25845, 2015, 1996, 9710, 1997, 1996, 7226, 13375, 2003, 1996, 15502, 2028, 1012, 102, 101, 17534, 4895, 16344, 14317, 7699, 2064, 2069, 2765, 1999, 5278, 1996, 16169, 2000, 1037, 4942, 7361, 3775, 9067, 2028, 1010, 6516, 16922, 1996, 9710, 1997, 1996, 7226, 4063, 1012, 102, 101, 2947, 17534, 3606, 7699, 2003, 1996, 2190, 2895, 2005, 2169, 7226, 4063, 1016, 1012, 102, 101, 2156, 1031, 2459, 1033, 2005, 1037, 2062, 5337, 6594, 29625, 10760, 5793, 4009, 5963, 1997, 2478, 1996, 18315, 2290, 7337, 2003, 2008, 2009, 5942, 2149, 2000, 2424, 1996, 15502, 5576, 1012, 102, 101, 1999, 2116, 10906, 4531, 1996, 15502, 5576, 2003, 2025, 15078, 2135, 22945, 1010, 1998, 2023, 2003, 2995, 1999, 3327, 1999, 1996, 10906, 2641, 1999, 2023, 3259, 1012, 102, 101, 1999, 2236, 1010, 11381, 2019, 15796, 5576, 2478, 2019, 20167, 9896, 1998, 2478, 1996, 18315, 2290, 7909, 5679, 1006, 7079, 2169, 7226, 4063, 1996, 7680, 1997, 1996, 16548, 1997, 1996, 2717, 1997, 1996, 7226, 13375, 1007, 2515, 2025, 2765, 1999, 1037, 3606, 3993, 7337, 1012, 102, 101, 1999, 2755, 1010, 9152, 8791, 1998, 6902, 2368, 1031, 2324, 1033, 2265, 2008, 2019, 20167, 9896, 4150, 3606, 3993, 2478, 1996, 18315, 2290, 7909, 5679, 2065, 1998, 2069, 2065, 1996, 10318, 9896, 1010, 2003, 7687, 29160, 1999, 2846, 29625, 2319, 9896, 2003, 29160, 1999, 2846, 2065, 2009, 6537, 1996, 2846, 1997, 2825, 16169, 2015, 2000, 1037, 3760, 102, 101, 20438, 21778, 3202, 4076, 2478, 1996, 2168, 6685, 3370, 2004, 2077, 2144, 2057, 2424, 1996, 15502, 16169, 1999, 1996, 7775, 2846, 1012, 102, 101, 1996, 2364, 4119, 1999, 1996, 2640, 1997, 2122, 13792, 2003, 3568, 2000, 6709, 1037, 16745, 1997, 1996, 2846, 1999, 2029, 3143, 20600, 2003, 15078, 2135, 22945, 1010, 1998, 2059, 4760, 2008, 1996, 15502, 5576, 2306, 1996, 7775, 2275, 1997, 7300, 2467, 3640, 1996, 3223, 20167, 6463, 1012, 102, 101, 2057, 2556, 1037, 29160, 1999, 2846, 9896, 2005, 22863, 23207, 4818, 10470, 2015, 2007, 13711, 1011, 2489, 7226, 13375, 1012, 102, 101, 2023, 9896, 3084, 2224, 1997, 3643, 10861, 5134, 2069, 1012, 102, 101, 1996, 20167, 6463, 1997, 2023, 9896, 2003, 1051, 1006, 1600, 1049, 1007, 1012, 102, 101, 1999, 5688, 1010, 2079, 2497, 17168, 5488, 1998, 8040, 3270, 8197, 2527, 1031, 1021, 1033, 1998, 14154, 2213, 13278, 2078, 1998, 9152, 8791, 1031, 1016, 1033, 3662, 2008, 2005, 2236, 26004, 2015, 2045, 2003, 1037, 2896, 5391, 1997, 1051, 1006, 1049, 8833, 1049, 1007, 2005, 1996, 3643, 14721, 2015, 2944, 1012, 102, 101, 11949, 2008, 1996, 9896, 1005, 2015, 2770, 2051, 2003, 17505, 1999, 1050, 1998, 1049, 1010, 2144, 29160, 18215, 9844, 1999, 12170, 19362, 23096, 19287, 2064, 2022, 13332, 1999, 17505, 2051, 1006, 1999, 1049, 1998, 1050, 1007, 1012, 102, 101, 1996, 9896, 2003, 4415, 1037, 29160, 1011, 1999, 1011, 2846, 9896, 1010, 1998, 2947, 20438, 21778, 2003, 12361, 2011, 1996, 2224, 1997, 1996, 18315, 2290, 7909, 5679, 1012, 102, 101, 2292, 2149, 2085, 6011, 2008, 1996, 9896, 3640, 1996, 9059, 20167, 6463, 1012, 102, 101, 2292, 6728, 1056, 1027, 1063, 1056, 1015, 1010, 2133, 1010, 1056, 1047, 1010, 1053, 1015, 1010, 2133, 1010, 1053, 1048, 1065, 2022, 1996, 15502, 16169, 1999, 1996, 2434, 10470, 1010, 2073, 2005, 2169, 1015, 1608, 1045, 1608, 1047, 1010, 1064, 1056, 1045, 1064, 1026, 1600, 1049, 1010, 1998, 2005, 2169, 102, 101, 1996, 2034, 2553, 2057, 5136, 2003, 2043, 1173, 1048, 1045, 1027, 1015, 1058, 1045, 1006, 1053, 1045, 1007, 1609, 1173, 1047, 1045, 1027, 1015, 1058, 1045, 1006, 1056, 1045, 1007, 1012, 102, 101, 4415, 1010, 1173, 1048, 1045, 1027, 1015, 1058, 1045, 1006, 1053, 1045, 1007, 1609, 1064, 6728, 1056, 1064, 1016, 1012, 102, 101, 2144, 1048, 1608, 1600, 1049, 1006, 4728, 1010, 2062, 2084, 1049, 5167, 2020, 11095, 1007, 1010, 2005, 1996, 7226, 4063, 1045, 2008, 25845, 2015, 1058, 1045, 1006, 1051, 1045, 1007, 2009, 4324, 8322, 2102, 1058, 1045, 1006, 1049, 1007, 1609, 1058, 1045, 1006, 1053, 1045, 1007, 1609, 1064, 6728, 1056, 1064, 1016, 1600, 1049, 29625, 102, 101, 4415, 1010, 1173, 1047, 1045, 1027, 1015, 1058, 1045, 1006, 1056, 1045, 1007, 1028, 1064, 6728, 1056, 1064, 1016, 1012, 102, 101, 2005, 2169, 1045, 1010, 1015, 1608, 1045, 1608, 1047, 1010, 2292, 1039, 1045, 1027, 12098, 2290, 4098, 1046, 1596, 1056, 1045, 1058, 1045, 1006, 1063, 1046, 1065, 1007, 1012, 102, 101, 5060, 1010, 2008, 1058, 1045, 1006, 1063, 1039, 1045, 1065, 1007, 1609, 6819, 1006, 14841, 1007, 1064, 1056, 1045, 1064, 1006, 2023, 2003, 2349, 2000, 1996, 12935, 3200, 1024, 1064, 1056, 1045, 1064, 1087, 1058, 1045, 1006, 1063, 1039, 1045, 1065, 1007, 1609, 1173, 1046, 1596, 1056, 1045, 1058, 1045, 102, 101, 2144, 2005, 2035, 1045, 1005, 2015, 1064, 1056, 1045, 1064, 1026, 1600, 1049, 1010, 2057, 2031, 2008, 1024, 1173, 1047, 1045, 1027, 1015, 1058, 1045, 1006, 1039, 1045, 1007, 1028, 1173, 1045, 1058, 1045, 1006, 1056, 1045, 1007, 1600, 1049, 1609, 1064, 6728, 1056, 1064, 1016, 1600, 1049, 1012, 102, 101, 2011, 23911, 2075, 1039, 1045, 2000, 7226, 4063, 1045, 2057, 2131, 2019, 16169, 1999, 2029, 2296, 7226, 4063, 4152, 2012, 2087, 2028, 8875, 2007, 1037, 2591, 7574, 1997, 19579, 1047, 1045, 1027, 1015, 1058, 1045, 1006, 1063, 1039, 1045, 1065, 1007, 1609, 1064, 6728, 1056, 1064, 1016, 1600, 1049, 1012, 102, 101, 1996, 2117, 16169, 1010, 3568, 1010, 21586, 2012, 2560, 2008, 2591, 7574, 1012, 102, 101, 2057, 16519, 2008, 1996, 20167, 6463, 1996, 9896, 21586, 2003, 2012, 2560, 1051, 1006, 1600, 1049, 1007, 1012, 2575, 1012, 102, 101, 1037, 2896, 5391, 2005, 1996, 3643, 14721, 2015, 2944, 1012, 102, 101, 1996, 6947, 1997, 1996, 2896, 5391, 3138, 1037, 5509, 11619, 3921, 1012, 102, 101, 2008, 2003, 1010, 1996, 7953, 2003, 2445, 2004, 1037, 2304, 3482, 2008, 2064, 2069, 3437, 1037, 3563, 2828, 1997, 10861, 5134, 1012, 102, 101, 2057, 2069, 5468, 1996, 2193, 1997, 10861, 5134, 2019, 9896, 2442, 2191, 1999, 2344, 2000, 6162, 1037, 3056, 20167, 6463, 1012, 102, 101, 1999, 3327, 2057, 8568, 2151, 15078, 2147, 2008, 3791, 2000, 2022, 2589, 1012, 102, 101, 2057, 6911, 2008, 1996, 2896, 5391, 2057, 6162, 2515, 2025, 12530, 2006, 2151, 4895, 21572, 8159, 15078, 11213, 1012, 102, 101, 8081, 1037, 2235, 5377, 1158, 1028, 1014, 1012, 102, 101, 2057, 4618, 9570, 1037, 22863, 23207, 4818, 10470, 2007, 1049, 5167, 1998, 1047, 1027, 1600, 1049, 7226, 13375, 1012, 102, 101, 2005, 2296, 1055, 1010, 2292, 1037, 1055, 2022, 1996, 29167, 26004, 2008, 24022, 1037, 3643, 1997, 1015, 2000, 2169, 8875, 1046, 1596, 1055, 1010, 1998, 1014, 2000, 2169, 8875, 1046, 1013, 1596, 1055, 29625, 2292, 100, 1037, 2022, 1996, 29167, 26004, 2008, 24022, 2296, 8875, 1046, 1596, 1049, 1037, 3643, 1997, 102, 101, 6516, 1010, 2007, 5377, 9723, 2009, 5942, 2019, 27258, 2193, 1997, 3643, 10861, 5134, 2000, 10782, 2090, 1058, 1045, 1998, 1058, 1045, 1012, 102, 101, 2023, 14730, 1996, 6947, 1997, 1996, 9872, 1012, 102], "tgt": [1, 20167, 13792, 2005, 22863, 23207, 4818, 10470, 2015, 2007, 13711, 1011, 2489, 7226, 13375, 13102, 25508, 2121, 1024, 2745, 8040, 3270, 8197, 2527, 4101, 2147, 2007, 7890, 2906, 2079, 2497, 17168, 5488, 1004, 2053, 3286, 9152, 8791, 2831, 3252, 22863, 23207, 4818, 10470, 2015, 8833, 1006, 1049, 1007, 1011, 20167, 2005, 12935, 10470, 2015, 2019, 20438, 11892, 1051, 1006, 23290, 1013, 1016, 1007, 20167, 1997, 12935, 10470, 2015, 2478, 3643, 10861, 5134, 1012, 3, 1016, 1011, 20167, 2005, 1060, 2891, 10470, 2015, 1037, 2896, 5391, 1997, 1041, 1013, 1006, 1041, 29624, 2487, 1007, 1011, 2005, 1060, 2891, 10470, 2015, 22863, 23207, 4818, 10470, 2015, 1037, 2275, 1049, 1997, 5167, 2005, 5096, 1012, 3, 1064, 1049, 1064, 1027, 1049, 29625, 1050, 7226, 13375, 1010, 2169, 7226, 4063, 1045, 2038, 1037, 26004, 3853, 6819, 1024, 1016, 2213, 1011, 1028, 1054, 1009, 1012, 3, 2691, 17568, 1024, 3671, 3989, 1024, 6819, 1006, 1007, 1027, 1014, 2489, 13148, 1024, 2358, 6819, 1006, 1056, 1007, 6819, 1006, 1055, 1007, 3125, 1024, 2424, 1037, 13571, 1055, 2487, 1010, 1010, 1055, 2078, 2107, 2008, 2591, 7574, 6819, 1006, 9033, 1007, 2003, 25845, 2094, 22863, 23207, 4818, 10470, 2015, 3291, 1015, 1024, 4531, 2019, 15502, 16169, 2003, 27937, 11783, 1012, 3, 3291, 1016, 1024, 26004, 3091, 2003, 27258, 1999, 1049, 29625, 3291, 1017, 1024, 2129, 2064, 2057, 2022, 3056, 2008, 1996, 7226, 13375, 2079, 2025, 4682, 1029, 3, 1006, 20438, 21778, 1007, 22863, 23207, 4818, 10470, 2015, 2057, 2024, 4699, 1999, 13792, 2008, 2241, 2006, 1996, 2988, 26004, 2015, 1063, 6819, 1065, 1045, 6434, 2019, 16169, 2029, 2003, 2019, 20167, 2000, 1996, 15502, 2591, 7574, 1012, 3, 2057, 5478, 1996, 13792, 2000, 2022, 17505, 1999, 1049, 1998, 1050, 1012, 3, 2008, 2003, 1010, 1996, 13792, 2442, 2448, 1999, 4942, 4179, 2906, 1006, 26572, 21197, 8486, 2705, 7712, 1007, 2051, 1012, 3, 2057, 8849, 1996, 9353, 4048, 13331, 3468, 20167, 5876, 1012, 3, 3229, 4275, 2129, 2064, 2057, 3229, 1996, 7953, 1029, 3, 2028, 6061, 1024, 17534, 4155, 1012, 3, 1996, 2304, 3482, 3921, 1024, 2169, 7226, 4063, 2003, 3421, 2011, 2019, 14721, 2029, 2064, 3437, 3056, 10861, 5134, 1012, 3, 3229, 4275, 2691, 4127, 1997, 10861, 5134, 1024, 3643, 1024, 2445, 1037, 14012, 1055, 1010, 2709, 1058, 1006, 1055, 1007, 1012, 3, 5157, 1024, 2445, 1037, 9207, 1997, 7597, 1006, 1052, 2487, 1010, 1010, 7610, 1007, 2709, 1996, 14012, 1055, 2008, 25845, 2015, 1058, 1006, 1055, 1007, 1011, 1046, 13102, 3501, 1012, 3, 2236, 1024, 2151, 2825, 2828, 1997, 23032, 1006, 1996, 4012, 19496, 10719, 2944, 1007, 1012, 3, 5157, 10861, 5134, 2024, 9975, 2062, 3928, 2084, 3643, 10861, 5134, 1006, 14154, 2213, 13278, 2078, 1011, 9152, 8791, 1010, 2079, 2497, 17168, 5488, 1011, 8040, 3270, 8197, 2527, 1007, 2124, 3463, 4531, 2019, 15502, 5576, 5942, 27258, 4807, 1012, 3, 9152, 8791, 1011, 16562, 2140, 4531, 2019, 1051, 1006, 23290, 1013, 1016, 1011, 1007, 1011, 20167, 5942, 27258, 4807, 1012, 3, 9152, 8791, 1011, 16562, 2140, 1012, 3, 1006, 2023, 2765, 4324, 2005, 2296, 2825, 2828, 1997, 14721, 1007, 2478, 5157, 14721, 2015, 1010, 1037, 9844, 3356, 5391, 1997, 1051, 1006, 23290, 1013, 1016, 1007, 6526, 1006, 14154, 2213, 13278, 2078, 1011, 9152, 8791, 1007, 1012, 3, 2488, 3463, 2453, 2022, 4663, 2011, 26996, 1996, 4280, 1997, 26004, 2015, 1012, 3, 1996, 12571, 1997, 12935, 26004, 2015, 13711, 1011, 2489, 1024, 1058, 1006, 2358, 1007, 1058, 1006, 1055, 1007, 1009, 1058, 1006, 1056, 1007, 1012, 3, 1060, 2891, 1024, 1060, 2953, 1997, 2030, 2015, 1997, 28159, 2015, 2742, 1024, 1006, 1037, 1024, 1016, 2030, 1038, 1024, 1016, 1007, 1060, 2953, 1006, 1037, 1024, 1017, 1007, 4942, 5302, 8566, 8017, 1024, 1058, 1006, 2358, 1007, 1009, 1058, 1006, 2358, 1007, 1058, 1006, 1055, 1007, 1009, 1058, 1006, 1056, 1007, 1012, 3, 1016, 1011, 20167, 2011, 2222, 2078, 1012, 3, 28177, 1024, 1006, 7977, 1007, 29200, 1010, 23060, 2015, 1024, 2030, 1997, 1060, 5668, 1997, 28159, 2015, 14017, 12423, 1999, 17505, 2051, 1006, 6948, 1998, 4555, 18215, 9844, 4414, 1007, 23060, 2015, 28177, 15488, 1060, 2891, 12935, 28444, 2078, 1010, 28444, 2078, 1010, 9152, 8791, 2831, 3252, 22863, 23207, 4818, 10470, 2015, 8833, 1006, 1049, 1007, 1011, 20167, 2005, 12935, 10470, 2015, 2019, 20438, 11892, 1051, 1006, 23290, 1013, 1016, 1007, 20167, 12935, 10470, 2015, 2478, 3643, 10861, 5134, 1012, 3, 1016, 1011, 20167, 2005, 1060, 2891, 10470, 2015, 1037, 2896, 5391, 1997, 1041, 1013, 1006, 1041, 29624, 2487, 1007, 1011, 2005, 1060, 2891, 10470, 2015, 26406, 2057, 2097, 3499, 1996, 10470, 11510, 2000, 2035, 24755, 2618, 1047, 24473, 2015, 2013, 2169, 8875, 1012, 3, 2169, 7226, 4063, 2003, 2145, 4699, 1999, 2012, 2087, 2028, 6100, 1997, 2169, 8875, 1006, 2061, 26004, 2015, 2024, 2921, 1996, 2168, 1007, 1012, 3, 2478, 1996, 11213, 2008, 2035, 26004, 2015, 2024, 12935, 1010, 2057, 2097, 2424, 2019, 20167, 2000, 1996, 2434, 10470, 1010, 2241, 2006, 1996, 1047, 1011, 24473, 2015, 16169, 1012, 3, 1996, 9896, 3357, 1015, 9611, 1996, 7399, 23370, 1997, 1996, 3291, 1024, 25845, 1024, 1045, 1010, 1055, 9048, 1010, 17917, 2072, 1006, 1055, 1007, 3395, 2000, 1024, 2005, 2169, 8875, 1046, 1024, 1045, 1010, 1055, 1064, 1046, 2015, 9048, 1010, 1055, 1015, 2005, 2169, 7226, 4063, 1045, 1024, 1055, 9048, 1010, 1055, 1015, 2005, 2169, 1045, 1010, 1055, 1024, 8418, 1010, 1055, 1014, 2750, 1996, 27258, 2193, 1997, 10857, 1010, 1996, 6948, 23370, 2089, 2145, 2022, 13332, 1999, 17505, 2051, 2478, 5157, 14721, 2015, 1012, 3, 1006, 9152, 8791, 1011, 16562, 2140, 1007, 1012, 3, 23569, 1008, 1027, 1045, 1010, 1055, 9048, 1010, 17917, 2072, 1006, 1055, 1007, 2003, 2019, 3356, 5391, 2005, 1996, 3643, 1997, 1996, 15502, 9897, 16169, 1012, 3, 1996, 9896, 3357, 1016, 2224, 6721, 3550, 26939, 2000, 3857, 1037, 3653, 8095, 23909, 1055, 2487, 1010, 1012, 3, 1012, 3, 1010, 1055, 2078, 1024, 2169, 8875, 1046, 3544, 2012, 2087, 1047, 1027, 2080, 1006, 8833, 1006, 1049, 1007, 1007, 2335, 1999, 1063, 9033, 1065, 1045, 29625, 4921, 2072, 1006, 9033, 1007, 23569, 1008, 1013, 1016, 1012, 3, 6721, 3550, 26939, 1024, 2005, 2169, 7226, 4063, 1045, 1010, 2292, 9033, 2022, 1996, 14012, 1055, 2007, 9723, 8418, 1010, 1055, 1010, 1998, 1996, 4064, 2275, 2007, 9723, 1015, 1011, 1055, 9048, 1010, 1055, 1012, 3, 1996, 3517, 3643, 1997, 6819, 1006, 9033, 1007, 2003, 1055, 9048, 1010, 17917, 2072, 1006, 1055, 1007, 2057, 2224, 1996, 24188, 3630, 4246, 5391, 2000, 2265, 2008, 2107, 3653, 29624, 8095, 23909, 2003, 2328, 2007, 2152, 9723, 1012, 3, 1996, 9896, 3357, 1017, 2005, 2169, 7226, 4063, 1045, 1010, 13571, 9033, 2046, 1037, 4487, 2015, 5558, 18447, 2586, 9033, 1027, 9033, 2487, 1012, 3, 1012, 3, 9033, 2243, 2107, 2008, 2005, 2169, 1015, 2072, 1026, 1045, 1050, 1010, 1015, 4779, 1047, 1010, 7719, 4183, 1027, 1012, 3, 1996, 9896, 3357, 1017, 2005, 2169, 7226, 4063, 1045, 1010, 13571, 9033, 2046, 1037, 4487, 2015, 5558, 18447, 2586, 9033, 1027, 9033, 2487, 1012, 3, 1012, 3, 9033, 2243, 2107, 2008, 2005, 2169, 1015, 2072, 1026, 1045, 1050, 1010, 1015, 4779, 1047, 1010, 7719, 4183, 1027, 1012, 3, 1037, 1038, 1040, 1996, 9896, 3357, 1017, 2005, 2169, 7226, 4063, 1045, 1010, 13571, 9033, 2046, 1037, 4487, 2015, 5558, 18447, 2586, 9033, 1027, 9033, 2487, 1012, 3, 1012, 3, 9033, 2243, 2107, 2008, 2005, 2169, 1015, 2072, 1026, 1045, 1050, 1010, 1015, 4779, 1047, 1010, 7719, 4183, 1027, 1012, 3, 1037, 1038, 1040, 1055, 2487, 1015, 1027, 1063, 1037, 1010, 1038, 1010, 1040, 1065, 1996, 9896, 3357, 1017, 2005, 2169, 7226, 4063, 1045, 1010, 13571, 9033, 2046, 1037, 4487, 2015, 5558, 18447, 2586, 9033, 1027, 9033, 2487, 1012, 3, 1012, 3, 9033, 2243, 2107, 2008, 2005, 2169, 1015, 2072, 1026, 1045, 1050, 1010, 1015, 4779, 1047, 1010, 7719, 4183, 1027, 1012, 3, 1037, 1038, 5887, 1041, 1037, 1040, 1996, 9896, 3357, 1017, 2005, 2169, 7226, 4063, 1045, 1010, 13571, 9033, 2046, 1037, 4487, 2015, 5558, 18447, 2586, 9033, 1027, 9033, 2487, 1012, 3, 1012, 3, 9033, 2243, 2107, 2008, 2005, 2169, 1015, 2072, 1026, 1045, 1050, 1010, 1015, 4779, 1047, 1010, 7719, 4183, 1027, 1012, 3, 1039, 1041, 1037, 1040, 1055, 2475, 1055, 2475, 1016, 1027, 1063, 1037, 1010, 1040, 1065, 1996, 9896, 3357, 1017, 2005, 2169, 7226, 4063, 1045, 1010, 13571, 9033, 2046, 1037, 4487, 2015, 5558, 18447, 2586, 9033, 1027, 9033, 2487, 1012, 3, 1012, 3, 9033, 2243, 2107, 2008, 2005, 2169, 1015, 2072, 1026, 1045, 1050, 1010, 1015, 4779, 1047, 1010, 7719, 4183, 1027, 1012, 3, 1037, 1038, 5887, 1041, 1037, 5887, 1041, 1037, 1996, 9896, 3357, 1017, 2005, 2169, 7226, 4063, 1045, 1010, 13571, 9033, 2046, 1037, 4487, 2015, 5558, 18447, 2586, 9033, 1027, 9033, 2487, 1012, 3, 1012, 3, 9033, 2243, 2107, 2008, 2005, 2169, 1015, 2072, 1026, 1045, 1050, 1010, 1015, 4779, 1047, 1010, 7719, 4183, 1027, 1012, 3, 1039, 1041, 1037, 1055, 2509, 1055, 2509, 1017, 1027, 1063, 1037, 1065, 1996, 9896, 3357, 1017, 2005, 2169, 7226, 4063, 1045, 1010, 13571, 9033, 2046, 1037, 4487, 2015, 5558, 18447, 2586, 9033, 1027, 9033, 2487, 1012, 3, 1012, 3, 9033, 2243, 2107, 2008, 2005, 2169, 1015, 2072, 1026, 1045, 1050, 1010, 1015, 4779, 1047, 1010, 7719, 4183, 1027, 1012, 3, 1037, 1038, 5887, 1041, 1037, 5887, 1041, 1037, 1038, 1040, 1996, 9896, 3357, 1017, 2005, 2169, 7226, 4063, 1045, 1010, 13571, 9033, 2046, 1037, 4487, 2015, 5558, 18447, 2586, 9033, 1027, 9033, 2487, 1012, 3, 1012, 3, 9033, 2243, 2107, 2008, 2005, 2169, 1015, 2072, 1026, 1045, 1050, 1010, 1015, 4779, 1047, 1010, 7719, 4183, 1027, 1012, 3, 1037, 1038, 5887, 1041, 1037, 5887, 1041, 1037, 1038, 16962, 1039, 1041, 1996, 9896, 3357, 1018, 2424, 1996, 1056, 25845, 2015, 4921, 2072, 1006, 4133, 1007, 2709, 1996, 16169, 1006, 1055, 2487, 2102, 1010, 2133, 1010, 1055, 3372, 1007, 1012, 3, 2035, 26004, 2015, 2024, 12935, 2061, 1024, 14841, 5737, 1006, 4133, 1007, 1027, 11858, 2072, 1006, 4133, 1007, 4921, 2072, 1006, 9033, 1007, 23569, 1008, 1013, 1016, 2005, 1996, 1056, 2008, 25845, 2015, 4921, 2072, 1006, 4133, 1007, 1010, 2009, 4324, 2008, 1024, 4921, 2072, 1006, 4133, 1007, 1006, 4921, 2072, 1006, 9033, 1007, 1007, 1013, 1047, 23569, 1008, 1013, 1016, 2243, 1027, 23569, 1008, 1013, 1051, 1006, 8833, 1006, 1049, 1007, 1007, 1012, 3, 1037, 1038, 5887, 1041, 1037, 5887, 1041, 1037, 1038, 16962, 1039, 1041, 1037, 4807, 2896, 5391, 1997, 1016, 1011, 2005, 12935, 26004, 2015, 9872, 1024, 27258, 4807, 2003, 3223, 2005, 22480, 22835, 1996, 15502, 16169, 2426, 12935, 7226, 13375, 2000, 2151, 5387, 2625, 2084, 1016, 1012, 3, 6947, 1024, 1037, 3722, 7312, 2013, 1996, 2236, 2553, 1012, 3, 2831, 3252, 22863, 23207, 4818, 10470, 2015, 8833, 1006, 1049, 1007, 1011, 20167, 2005, 12935, 10470, 2015, 2019, 20438, 11892, 1051, 1006, 23290, 1013, 1016, 1007, 20167, 1997, 12935, 10470, 2015, 2478, 3643, 10861, 5134, 1012, 3, 1016, 1011, 20167, 2005, 1060, 2891, 10470, 2015, 1037, 2896, 5391, 1997, 1041, 1013, 1006, 1041, 29624, 2487, 1007, 1011, 2005, 1060, 2891, 10470, 2015, 20438, 21778, 1004, 18315, 2290, 7597, 2057, 2215, 2019, 9896, 2008, 2003, 3606, 3993, 1006, 20438, 11892, 1007, 1012, 3, 1045, 29625, 2063, 29625, 2057, 5478, 2008, 1996, 7444, 5656, 1997, 2169, 1997, 1996, 7226, 13375, 2052, 2022, 2000, 7487, 2995, 2592, 1012, 3, 18315, 2290, 2003, 1996, 2069, 2236, 6028, 2124, 2005, 2437, 10470, 2015, 20438, 11892, 1006, 2065, 7226, 13375, 2024, 2025, 2309, 1011, 13128, 1007, 1024, 2169, 7226, 4063, 1045, 12778, 1024, 11382, 2615, 2243, 1006, 1051, 1011, 1045, 1007, 1011, 11382, 2615, 2243, 1006, 1051, 2072, 1007, 1051, 2072, 2003, 1996, 15502, 16169, 1010, 1051, 1011, 1045, 1996, 15502, 16169, 1997, 1996, 10470, 2302, 1996, 2009, 2232, 7226, 4063, 1012, 3, 20438, 21778, 1004, 18315, 2290, 7597, 3291, 1024, 18315, 2290, 5942, 2019, 15502, 16169, 999, 3, 4531, 2019, 15502, 16169, 5942, 27258, 4807, 1998, 2003, 15078, 2135, 26721, 23576, 1012, 3, 20167, 2015, 2079, 2025, 10514, 26989, 3401, 1006, 9152, 8791, 1011, 6902, 2368, 1007, 1012, 3, 18315, 2290, 2006, 1037, 16745, 1997, 1996, 2846, 2256, 5576, 1024, 5787, 1996, 2275, 1997, 2825, 16169, 2015, 1012, 3, 2057, 2097, 2292, 2169, 7226, 4063, 2000, 2131, 2012, 2087, 2028, 8875, 1010, 2030, 2092, 2035, 24755, 2618, 2035, 5167, 2000, 1037, 2309, 7226, 4063, 1012, 3, 15502, 5576, 1999, 1996, 2275, 2064, 2022, 2179, 1999, 17505, 2051, 18315, 2290, 7597, 2064, 2022, 24806, 20438, 21778, 1012, 3, 2057, 2145, 2342, 2000, 6011, 2008, 2057, 6162, 2019, 20167, 1012, 3, 1996, 9896, 3198, 2169, 7226, 4063, 1045, 2005, 6819, 1006, 1049, 1007, 1010, 1998, 2005, 6819, 1006, 1046, 1007, 1010, 2005, 2169, 8875, 1046, 29625, 1006, 2057, 2031, 2109, 2069, 3643, 10861, 5134, 1007, 9570, 1037, 12170, 19362, 23096, 10629, 1998, 2424, 1996, 4555, 18215, 9844, 1052, 29625, 2064, 2022, 2589, 1999, 17505, 2051, 1006, 16985, 8405, 1007, 1012, 3, 1037, 1038, 5167, 7226, 13375, 1058, 2487, 1006, 1037, 1007, 1058, 2509, 1006, 1038, 1007, 1996, 9896, 1006, 9530, 2102, 1012, 1007, 3, 2292, 1045, 2022, 1996, 7226, 4063, 2008, 25845, 2015, 6819, 1006, 1049, 1007, 1012, 3, 2065, 6819, 1006, 1049, 1007, 1028, 1064, 1052, 1064, 2035, 24755, 2618, 2035, 5167, 2000, 1045, 29625, 2842, 2035, 24755, 2618, 2429, 2000, 1052, 29625, 2292, 2169, 7226, 4063, 3477, 2010, 18315, 2290, 3976, 1006, 1999, 4847, 2000, 1996, 7775, 2275, 1007, 1012, 3, 6947, 1997, 1996, 20167, 6463, 10760, 5686, 2213, 1024, 2065, 2035, 26004, 2015, 2024, 12935, 1010, 1996, 9896, 3640, 2019, 1051, 1006, 23290, 1013, 1016, 1007, 1011, 20167, 1012, 3, 6947, 1024, 2292, 23569, 1027, 1006, 1056, 2487, 1010, 1012, 3, 1012, 3, 1010, 1056, 2243, 1010, 1053, 2487, 1010, 2133, 1010, 1053, 2140, 1007, 1010, 2073, 2005, 2169, 14841, 1010, 1064, 14841, 1064, 1028, 23290, 1013, 1016, 1010, 1998, 2005, 2169, 18816, 1010, 1064, 18816, 1064, 23290, 1013, 1016, 1012, 3, 1064, 23569, 1064, 1027, 4921, 2072, 1006, 14841, 1007, 1009, 4921, 2072, 1006, 18816, 1007, 2553, 1015, 1024, 4921, 2072, 1006, 14841, 1007, 1028, 4921, 2072, 1006, 18816, 1007, 1006, 2312, 26825, 9002, 2087, 1997, 1996, 2591, 7574, 1007, 4921, 2072, 1006, 14841, 1007, 1028, 1064, 23569, 1064, 1013, 1016, 2012, 2087, 23290, 1013, 1016, 7226, 13375, 2131, 2012, 2560, 23290, 1013, 1016, 5167, 1999, 23569, 1012, 3, 2005, 1996, 7226, 4063, 1045, 1996, 7226, 4063, 1045, 2008, 25845, 2015, 6819, 1006, 1049, 1007, 1010, 6819, 1006, 1049, 1007, 1028, 1064, 23569, 1064, 1013, 1016, 2213, 2553, 1016, 1024, 4921, 2072, 1006, 18816, 1007, 4921, 2072, 1006, 14841, 1007, 1006, 2235, 26825, 9002, 2087, 1997, 1996, 2591, 7574, 1007, 4921, 2072, 1006, 18816, 1007, 1064, 23569, 1064, 1013, 1016, 2005, 2169, 7226, 4063, 1045, 1010, 2045, 2003, 2019, 8875, 25022, 1010, 2107, 2008, 1024, 6819, 1006, 25022, 1007, 1028, 6819, 1006, 18816, 1007, 1013, 1049, 1063, 25022, 1065, 1045, 2003, 2019, 16169, 2029, 24022, 2012, 2087, 2028, 8875, 2000, 2169, 7226, 4063, 1024, 1064, 1052, 1064, 4921, 2072, 1006, 25022, 1007, 1064, 23569, 1064, 1013, 1016, 2213, 2831, 3252, 22863, 23207, 4818, 10470, 2015, 8833, 1006, 1049, 1007, 1011, 20167, 2005, 12935, 10470, 2015, 2019, 20438, 11892, 1051, 1006, 23290, 1013, 1016, 1007, 20167, 12935, 10470, 1016, 1011, 20167, 2005, 1060, 2891, 10470, 2015, 1037, 2896, 5391, 1997, 1041, 1013, 1006, 1041, 29624, 2487, 1007, 1011, 2005, 1060, 2891, 10470, 2015, 6210, 1997, 1060, 2891, 1060, 2891, 1024, 1060, 2953, 1997, 2030, 2015, 1997, 28159, 2015, 1012, 3, 28159, 26004, 1006, 1060, 1024, 2361, 1007, 1058, 1006, 1055, 1007, 1027, 1052, 1060, 2015, 2742, 1024, 1006, 1037, 1024, 1016, 2030, 1038, 1024, 1016, 1007, 1060, 2953, 1006, 1037, 1024, 1017, 1007, 1060, 2891, 5144, 1996, 10473, 17534, 2653, 19962, 2696, 13306, 3973, 7775, 2000, 5050, 2069, 13711, 1011, 2489, 26004, 2015, 1012, 3, 2064, 6235, 2035, 4942, 5302, 8566, 8017, 26004, 2015, 1006, 1998, 2036, 2070, 2512, 29624, 6342, 25526, 7716, 7934, 26004, 2015, 1007, 2064, 6235, 5875, 27937, 2278, 3471, 1006, 4098, 1011, 1047, 1011, 3104, 1010, 2938, 1007, 1012, 3, 4637, 7597, 6210, 1024, 1052, 2487, 1010, 1010, 7610, 6753, 1996, 14012, 1055, 1999, 1058, 2065, 1024, 1058, 1006, 1055, 1007, 1027, 1046, 13102, 3501, 1058, 1006, 1056, 1007, 1046, 25856, 3501, 2005, 2035, 1056, 1055, 4366, 1024, 1037, 26004, 2003, 1060, 2891, 2065, 2546, 2296, 14012, 1055, 2038, 4637, 7597, 1012, 3, 6947, 1024, 2045, 2003, 1037, 11075, 2008, 25845, 2015, 1996, 3643, 1997, 1037, 14012, 1055, 1012, 3, 1996, 7597, 1999, 2023, 11075, 2024, 1996, 4637, 7597, 1012, 3, 2202, 1996, 7597, 1997, 2169, 14012, 1010, 1998, 3857, 1037, 11075, 1012, 3, 9896, 1011, 2742, 5167, 1024, 1063, 1037, 1010, 1038, 1010, 1039, 1010, 1040, 1010, 1041, 1065, 1012, 3, 1017, 7226, 13375, 1012, 3, 3976, 9207, 1024, 1052, 2692, 1027, 1006, 1014, 29623, 2692, 29623, 2692, 29623, 2692, 29623, 2692, 1007, 1058, 2487, 1024, 1006, 1037, 1024, 1015, 2030, 1038, 1024, 1015, 2030, 1039, 1024, 1015, 1007, 1060, 2953, 1006, 1039, 1024, 1016, 1007, 7226, 4063, 1015, 4152, 2010, 5157, 1024, 1063, 1037, 1010, 1038, 1010, 1039, 1065, 1012, 3, 9896, 1011, 2742, 5167, 1024, 1063, 1037, 1010, 1038, 1010, 1039, 1010, 1040, 1010, 1041, 1065, 1012, 3, 1017, 7226, 13375, 1012, 3, 3976, 9207, 1024, 1052, 2692, 1027, 1006, 1014, 29623, 2692, 29623, 2692, 29623, 2692, 29623, 2692, 1007, 1058, 2487, 1024, 1006, 1037, 1024, 1015, 2030, 1038, 1024, 1015, 2030, 1039, 1024, 1015, 1007, 1060, 2953, 1006, 1039, 1024, 1016, 1007, 7226, 4063, 1015, 4152, 2010, 5157, 1024, 1063, 1037, 1010, 1038, 1010, 1039, 1065, 1012, 3, 3976, 9207, 1024, 1052, 2487, 1027, 1006, 1015, 29623, 2487, 29623, 2487, 29623, 2692, 29623, 2692, 1007, 1058, 2475, 1024, 1006, 1037, 1024, 1015, 2030, 1038, 1024, 1015, 2030, 1039, 1024, 1023, 1007, 1060, 2953, 1006, 1040, 1024, 1016, 2030, 1041, 1024, 1016, 1007, 7226, 4063, 1016, 4152, 2010, 5157, 1024, 1063, 1039, 1065, 9896, 1011, 2742, 5167, 1024, 1063, 1037, 1010, 1038, 1010, 1039, 1010, 1040, 1010, 1041, 1065, 1012, 3, 1017, 7226, 13375, 1012, 3, 3976, 9207, 1024, 1052, 2692, 1027, 1006, 1014, 29623, 2692, 29623, 2692, 29623, 2692, 29623, 2692, 1007, 1058, 2487, 1024, 1006, 1037, 1024, 1015, 2030, 1038, 1024, 1015, 2030, 1039, 1024, 1015, 1007, 1060, 2953, 1006, 1039, 1024, 1016, 1007, 7226, 4063, 1015, 4152, 2010, 5157, 1024, 1063, 1037, 1010, 1038, 1010, 1039, 1065, 1012, 3, 3976, 9207, 1024, 1052, 2487, 1027, 1006, 1015, 29623, 2487, 29623, 2487, 29623, 2692, 29623, 2692, 1007, 1058, 2475, 1024, 1006, 1037, 1024, 1015, 2030, 1038, 1024, 1015, 2030, 1039, 1024, 1023, 1007, 1060, 2953, 1006, 1040, 1024, 1016, 2030, 1041, 1024, 1016, 1007, 7226, 4063, 1016, 4152, 2010, 5157, 1024, 1063, 1039, 1065, 3976, 9207, 1024, 1052, 2475, 1027, 1006, 1015, 29623, 2487, 29623, 2683, 29623, 2692, 29623, 2692, 1007, 1058, 2509, 1024, 1006, 1039, 1024, 2184, 2030, 1040, 1024, 1015, 2030, 1041, 1024, 1016, 1007, 7226, 4063, 1017, 4152, 2010, 5157, 1024, 1063, 1039, 1010, 1040, 1010, 1041, 1065, 2345, 16169, 1024, 1063, 1037, 1010, 1038, 1065, 2000, 7226, 4063, 1015, 1010, 1063, 1039, 1010, 1040, 1010, 1041, 1065, 2000, 7226, 4063, 1017, 1012, 3, 1996, 9896, 7953, 1024, 1050, 7226, 13375, 1010, 2005, 2169, 2057, 2024, 2445, 1037, 5157, 14721, 1998, 1037, 4637, 7597, 14721, 1012, 3, 1999, 4183, 1024, 1052, 2487, 1027, 29630, 7610, 1027, 1014, 1012, 3, 2005, 2169, 7226, 4063, 1045, 1027, 1015, 1012, 3, 1012, 3, 1050, 2292, 9033, 2022, 1996, 5157, 1997, 1996, 2009, 2232, 7226, 4063, 2012, 7597, 1052, 2487, 1010, 1010, 7610, 1012, 3, 2005, 2035, 1045, 1026, 1045, 2202, 2185, 2013, 9033, 2151, 5167, 2013, 9033, 1012, 3, 2292, 1053, 2487, 1010, 1010, 1053, 2213, 2022, 1996, 4637, 7597, 2005, 9033, 1999, 6819, 1012, 3, 2005, 2035, 1046, 9033, 10651, 1052, 3501, 1027, 1053, 3501, 1012, 3, 6947, 2000, 6011, 1996, 20167, 6463, 1010, 2057, 2097, 2342, 2122, 2048, 3722, 3393, 14760, 2015, 1024, 3393, 14760, 1024, 1996, 2561, 2591, 7574, 7013, 2011, 1996, 9896, 2003, 2012, 2560, 1052, 3501, 1012, 3, 3393, 14760, 1024, 1996, 15502, 2591, 7574, 2003, 2012, 2087, 1016, 2361, 3501, 1012, 3, 6947, 3393, 14760, 1015, 3393, 14760, 1024, 1996, 2561, 2591, 7574, 7013, 2011, 1996, 9896, 2003, 2012, 2560, 1052, 3501, 1012, 3, 6947, 1024, 2169, 7226, 4063, 1045, 2288, 1037, 14012, 14841, 2012, 2754, 1045, 1012, 3, 2012, 1996, 2203, 1997, 1996, 9896, 1010, 2002, 4324, 9932, 14841, 1012, 3, 1996, 4637, 7597, 11302, 2008, 1024, 6819, 1006, 9932, 1007, 17410, 2361, 3501, 6947, 3393, 14760, 1016, 3393, 14760, 1024, 1996, 15502, 2591, 7574, 2003, 2012, 2087, 1016, 2361, 3501, 1012, 3, 6947, 1024, 2292, 1051, 2487, 1010, 2133, 1010, 2006, 2022, 1996, 15502, 16169, 1012, 3, 2292, 14255, 1010, 1046, 2022, 1996, 3976, 1997, 1996, 1046, 2705, 8875, 2012, 1996, 2009, 2232, 2754, 1012, 3, 2169, 7226, 4063, 1045, 3198, 2005, 1996, 14012, 2008, 25845, 2015, 2010, 5157, 2012, 1996, 2009, 2232, 2754, 1024, 6819, 1006, 1051, 2072, 1007, 1011, 8183, 2072, 14255, 1010, 1046, 1046, 14255, 1010, 1046, 1046, 1052, 1006, 1045, 1011, 1015, 1007, 1010, 1046, 2144, 1996, 7597, 2024, 2512, 29624, 3207, 16748, 21369, 3070, 1024, 6819, 1006, 1051, 2072, 1007, 1011, 8183, 2072, 1052, 2078, 1010, 1046, 1046, 14255, 1010, 1046, 1046, 1052, 1006, 1045, 1011, 1015, 1007, 1010, 1046, 7680, 6562, 2039, 2006, 2119, 3903, 1024, 1045, 6819, 1006, 1051, 2072, 1007, 1011, 1045, 5558, 2072, 1052, 2078, 1010, 1046, 1045, 1006, 1046, 14255, 1010, 1046, 16545, 1006, 1045, 1011, 1015, 1007, 1010, 1046, 1007, 1045, 6819, 1006, 1051, 2072, 1007, 1011, 1046, 1052, 2078, 1010, 1046, 1046, 1052, 2078, 1010, 1046, 1045, 6819, 1006, 1051, 2072, 1007, 1016, 3501, 1052, 2078, 1010, 1046, 2831, 3252, 22863, 23207, 4818, 10470, 2015, 8833, 1006, 1049, 1007, 1011, 20167, 2005, 12935, 10470, 2015, 2019, 20438, 11892, 1051, 1006, 23290, 1013, 1016, 1007, 20167, 1997, 12935, 10470, 2015, 2478, 3643, 10861, 5134, 1012, 3, 1016, 1011, 20167, 2005, 1060, 2891, 10470, 2015, 1037, 2896, 5391, 1997, 1041, 1013, 1006, 1041, 29624, 2487, 1007, 1011, 2005, 1060, 2891, 10470, 2015, 1060, 2891, 2896, 19202, 1024, 2057, 2265, 2048, 2896, 19202, 1024, 1037, 4807, 2896, 5391, 1997, 1041, 1013, 1006, 1041, 29624, 2487, 1007, 1011, 2005, 1996, 2304, 3482, 3921, 1012, 3, 2019, 27937, 1011, 23608, 2765, 1997, 1041, 1013, 1006, 1041, 29624, 2487, 1007, 1011, 2005, 1996, 2553, 2008, 1996, 7953, 2003, 2445, 1999, 1060, 2891, 4289, 1006, 17534, 2653, 1007, 1012, 3, 2057, 2085, 6011, 1996, 2117, 1997, 2122, 3463, 1012, 3, 4098, 1011, 1047, 1011, 3104, 2057, 2097, 2265, 1037, 17505, 2051, 7312, 2013, 4098, 1011, 1047, 1011, 3104, 1012, 3, 4098, 1011, 1047, 1011, 3104, 6210, 1024, 7953, 1024, 1037, 2275, 1997, 1064, 1049, 1064, 1027, 1049, 5167, 1010, 1056, 16745, 2015, 9033, 1049, 1010, 2019, 16109, 1047, 29625, 3125, 1024, 2424, 1047, 16745, 2015, 2107, 2008, 1996, 2193, 1997, 5167, 1999, 2037, 2586, 1010, 1064, 9033, 1064, 1010, 2003, 25845, 2094, 1012, 3, 9872, 1024, 22480, 22835, 4098, 1011, 1047, 1011, 3104, 2306, 1037, 5387, 1997, 1041, 1013, 1006, 1041, 29624, 2487, 1007, 2003, 27937, 1011, 2524, 1006, 24664, 3351, 1007, 1012, 3, 1996, 7312, 1037, 1038, 1039, 1040, 1041, 1042, 1058, 2487, 1024, 1006, 1037, 1024, 1015, 2030, 1040, 1024, 1015, 1007, 1060, 2953, 1006, 1039, 1024, 1015, 2030, 1042, 1024, 1015, 1007, 1060, 2953, 1006, 1040, 1024, 1015, 2030, 1041, 1024, 1015, 2030, 1042, 1024, 1015, 1007, 1058, 2243, 1024, 1006, 1037, 1024, 1015, 2030, 1040, 1024, 1015, 1007, 1060, 2953, 1006, 1039, 1024, 1015, 2030, 1042, 1024, 1015, 1007, 1060, 2953, 1006, 1040, 1024, 1015, 2030, 1041, 1024, 1015, 2030, 1042, 1024, 1015, 1007, 2296, 5576, 2000, 4098, 1011, 1047, 1011, 3104, 12748, 2019, 16169, 2007, 1996, 2168, 3643, 1012, 3, 2296, 16169, 12748, 1037, 5576, 2000, 4098, 1011, 1047, 1011, 3104, 2007, 2012, 2560, 2008, 3643, 1012, 3, 2168, 20167, 2896, 5391, 1012, 3, 1037, 9844, 4807, 2896, 5391, 6526, 1012, 3, 4098, 1011, 1047, 1011, 3104, 6013, 1060, 2891, 10470, 2007, 1047, 7226, 13375, 2330, 3980, 21978, 1996, 16680, 10175, 14505, 2465, 3643, 10861, 5134, 5157, 10861, 5134, 2236, 4807, 2236, 1049, 1013, 1006, 8833, 2487, 1013, 1016, 2213, 1007, 1006, 7570, 23858, 2386, 1010, 1047, 8873, 13639, 3270, 2615, 1010, 23117, 14544, 1010, 2702, 10224, 28094, 1007, 1049, 1013, 1006, 8833, 2213, 1007, 1006, 9152, 8791, 1011, 16562, 2140, 1010, 2079, 2497, 17168, 3211, 1011, 8040, 3270, 8197, 2527, 1007, 23290, 1013, 1016, 1006, 14154, 2213, 13278, 27803, 2319, 1007, 23290, 1013, 1016, 1006, 9152, 8791, 1011, 16562, 2140, 1007, 12935, 23290, 1013, 1016, 8833, 1006, 1049, 1007, 1016, 1060, 2891, 1016, 1041, 1013, 1006, 1041, 29624, 2487, 1007, 15488, 1016, 1006, 28444, 2078, 1010, 28444, 2078, 1010, 9152, 8791, 1007, 1041, 1013, 1006, 1041, 29624, 2487, 1007, 1006, 2047, 1024, 1047, 12326, 1010, 5423, 2669, 1010, 2928, 8978, 2015, 1010, 2033, 22893, 1007, 1015, 1009, 2487, 1013, 1006, 1016, 2213, 1007, 1006, 9152, 8791, 1011, 16562, 2140, 1007, 28177, 1015, 1006, 14324, 9050, 2368, 1010, 28444, 2078, 1007, 2], "src_sent_labels": [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1], "segs": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "clss": [0, 25, 60, 79, 108, 128, 144, 191, 213, 232, 244, 268, 295, 327, 360, 394, 415, 468, 532, 563, 573, 603, 645, 669, 698, 727, 777, 822, 848, 890, 951, 987, 1019, 1031, 1074, 1106, 1115, 1130, 1162, 1201, 1231, 1289, 1343, 1396, 1438, 1479, 1508, 1555, 1594, 1614, 1645, 1683, 1726, 1792, 1809, 1842, 1896, 1917, 1959, 2019, 2029, 2081, 2136, 2147, 2172, 2238, 2259, 2321, 2340, 2372, 2404, 2461, 2489, 2512, 2543, 2572, 2602, 2620, 2666, 2725, 2764, 2805, 2841, 2876, 2932, 2962, 3019, 3071, 3129, 3179, 3202, 3253, 3281, 3299, 3340, 3379, 3440, 3490, 3543, 3596, 3608, 3657, 3694, 3709, 3735, 3759, 3778, 3795, 3819, 3836, 3863, 3899, 3926, 3991, 4004, 4058, 4073, 4111, 4146, 4162, 4189, 4254, 4279, 4336, 4389, 4409, 4435, 4484, 4519, 4535, 4579, 4620, 4647, 4682, 4715, 4743, 4773, 4807, 4831, 4853, 4869, 4925, 4977, 5005, 5025, 5080, 5127, 5181, 5236, 5291, 5309, 5330, 5357, 5414, 5434, 5487, 5539, 5550, 5607, 5629, 5662, 5696, 5732, 5782, 5800, 5815, 5840, 5893, 5913, 5945, 5973, 6015, 6066, 6093, 6122, 6151, 6172, 6222, 6274, 6295, 6316, 6366, 6390, 6424, 6477, 6515, 6555, 6582, 6610, 6627, 6660, 6679, 6722, 6760, 6815, 6864, 6895, 6933, 6975, 6993, 7046, 7062, 7079, 7123, 7151, 7192, 7230, 7289, 7343, 7364, 7382, 7408, 7433, 7454, 7474, 7506, 7560, 7621, 7658, 7713, 7767, 7811, 7868, 7923, 7975, 8031, 8069, 8091, 8123, 8179, 8191, 8239, 8291, 8343, 8372, 8384, 8406, 8423, 8440, 8464, 8485, 8508, 8553, 8573, 8593, 8624, 8640, 8673, 8702, 8749, 8808, 8832, 8881, 8903, 8915, 8930, 8983, 9022, 9052, 9067, 9119, 9152, 9174, 9231, 9253, 9284, 9336, 9387, 9439, 9454, 9476, 9488, 9502, 9526, 9549, 9564, 9585, 9595, 9616, 9669, 9694], "src_txt": ["in a combinatorial auction m heterogenous indivisible items are sold to n bidders .", "this paper considers settings in which the valuation functions of the bidders are known to be complement - free ( a.k.a. subadditive ) .", "we provide several approximation algorithms for the social - welfare maximization problem in such settings .", "firstly , we present a logarithmic upper bound for the case that the access to the valuation functions is via demand queries .", "for the weaker value queries model we provide a tight o ( \u221a m ) approximation .", "unlike the other algorithms we present , this algorithm is also incentive compatible .", "finally , we present two approximation algorithms for the more restricted class of xos valuations : a simple deterministic algorithm that provides an approximation ratio of 2 and an optimal e e \u22121 approximation achieved via randomized rounding .", "we also present optimal lower bounds for both the demand oracles model and the value oracles model .", "cf valuations to within a factor of 2 \u2212 , for any constant > 0 .", "better than e / ( e \u2212 1 ) .", "the last theorem shows that our algorithm for the class xos is tight .1.3 handling selfishness .", "in many settings in which the combinatorial auction problem arises , it is natural to assume that the bidders are selfish .", "that is , the bidders are interested only in maximizing their own utility , and might therefore misreport their preferences if it suits their interests .", "we are therefore interested in truthful algorithms that by introducing payments guarantee that if each bidder is to simply report his true value he will maximize his profit .", "surprisingly , to date , very few computationally - feasible truthful mechanisms for this problem are known that do not apply only to very restricted single - parameter domains .", "we present an approximation algorithm that makes use of value queries only , and ensures truthfulness .", "this approximation ratio may seem quite bad when contrasted with the fact that for the class of submodular valuations constant - approximation algorithms that use only value queries exist ( e.g. , by lehmann et al. [ 12 ] ) .", "however , it turns out that this algorithm is optimal in the value oracle model , even if all bidders have xos valuations , and even ignoring truthfulness constraints : theorem 1.6 every approximation algorithm for combinatorial auctions with xos bidders that uses only value queries , requires an exponential number of queries to achieve an approximation ratio better than m 1 2 \u2212 , for any constant > 0.1.4 subsequent work .", "subsequently to this paper , feige [ 9 ] improved the upper bound for combinatorial auctions with complement - free valuations to 2 .", "this upper bound uses demand queries .", "the communication lower bound we present implies that this upper bound is tight.we now discuss subsequent work related to submodular valuations .", "khot , lipton , markakis , and mehta [ 11 ] showed that no approximation better than e e \u22121 using value queries only is possible , unless p = n p .", "this lower bound was recently strengthened to an unconditional one by mirrokni et al. [ ? ]", "vondrak [ 21 ] has shown that this lower bound is tight by exhibiting a matching upper bound that uses value queries only .", "in the demand queries model feige and vondrak [ 10 ] obtained an approximation ratio slightly better than e e \u22121 .", "they also show that approximating the welfare with demand oracle in this case is apx - hard.another line of research which stemmed in this paper is obtaining truthful mechanisms for combinatorial auctions with complement - free valuations .", "dobzinski [ 4 ] obtained an approximation ratio of o ( log m log log m ) for subadditive valuations using a randomized mechanism , improving over a previous result of [ 6 ] .", "one of the main ingredients in these results is the 2 - approximation algorithm for xos valuations presented in this paper .", "in addition , feige [ 9 ] , showed how to convert the log m log log m - approximation algorithm of this paper to a truthful one ( under a weaker notion of truthfulness ) .", "the best deterministic mechanism for complement - free valuations is still the o ( \u221a m ) - mechanism presented in this paper.dobzinski and nisan [ 5 ] proved that one can not achieve a much better approximation factor using this type of algorithms - maximal in range algorithms ( see the discussion in section 5 ) .1.5 open questions .", "this paper and subsequent work determined the optimal bounds possible for the upper levels of the hierarchy , namely combinatorial auctions with xos and complement - free valuations .", "\u2022 the main open question is closing the gap between the known upper and lower bounds for submodular valuations in the demand oracles model .", "in particular , no communication lower bound is known .", "\u2022 it would also be interesting to achieve these approximation ratios using combinatorial algorithms ( most state - of - the - art algorithms are based on randomized rounding of the lp relaxation of the problem ) .", "\u2022 another major open question which is still open is to determine how well truthful mechanisms can approximate the welfare in all levels of the hierarchy .2 .", "definition and representation of xos .", "this section discusses the definition and representation of xos valuations .", "recall , that as discussed in the introduction the class of xos valuations strictly contains the class of submodular valuations [ 12 ] .", "a valuation is called additive ( a.k.a. linear ) if for all s \u2286 m , v ( s ) = \u03c3 j \u2208 s v ( { j } ) .", "thus , an additive valuation is defined by the values a 1 , ... , a m it assigns to items 1 , ... , m respectively .", "we describe an additive valuations by the following clause : ( x 1 : a 1 \u2228 x 2 : a 2 \u2228 ... \u2228 x m : a m ) we can now define xos valuations : definition 2.1 a valuation v is said to be xos if there is a set of additive valuations { w 1 , ... , w t } , such that v ( s ) = max k { w k ( s ) } for all s \u2286 m .", "we denote xos valuations by ( x 1 : w 1 ( { x 1 } ) \u2228 ... \u2228 x m : w 1 ( { x m } ) ) \u2295 ... \u2295 ( x 1 : w t ( { x 1 } ) \u2228 ... \u2228 x m : w t ( { x m } ) ) where each of the clauses connected by the \u2295 sign represents an additive valuation.we note that the number of clauses t might be exponentially large .", "we call a clause of an additive valuation w , for which v ( s ) = max k { w k ( s ) } , a maximizing clause for s in v ( if there are several such clauses we arbitrarily choose one ) .", "an xos oracle is an oracle that given a bundle s returns a maximizing clause for s ( for a specific valuation v ) .2.1 efficiently simulating xos and demand queries .", "we now show that if the input is given in the form of an xos expression , xos oracles and demand oracles can be simulated in time that is polynomial in the input size .", "we also prove that if all valuations are submodular then value queries can simulate xos queries in polynomial time .", "therefore , if all valuations are submodular , the algorithm presented in this section requires demand queries only ( recall that a value query can be simulated by a polynomial number of demand queries [ 2 ] ) .", "proposition 2.1 given an xos valuation as an xos expression , we can evaluate both xos queries and demand queries in time polynomial in the input size.proof .", "given an xos valuation and a vector of prices we wish to simulate a demand oracle .", "first , let us note that it is easy to simulate a demand oracle for an additive valuation in polynomial time , by simply choosing all profitable items .", "since the input is given as an xos formula and each clause is an additive valuation , it is enough to simulate a demand oracle for each clause and choose the most profitable option .", "the entire process requires time polynomial in the input size.if the input is not given as an xos expression , then we do not know how to answer xos queries given only a demand oracle .", "however , for the more restricted class of submodular valuations , even the weaker value oracle suffices to answer xos queries , as the following proposition shows : proposition 2.2 an xos clause for a bundle s of a submodular valuation v can be calculated in polynomial time using value queries only.proof .", "given a bundle s we show how to construct the corresponding xos clause .", "fix some arbitrary order of the items in s. without loss of generality , let s = { 1 , . . . , | s | } .", "let t j be the marginal utility of the j'th item given the previous j \u2212 1 items : t j = v ( { 1 , . . . , j } ) \u2212 v ( { 1 , . . . , j \u2212 1 } ) .", "the xos clause is ( t 1 \u2228 . . . \u2228 t | s | ) .", "all that we have to prove is that v ( s ) = \u03c3 j \u2208 s t j , and that for every t \u2286 s , v ( t ) \u2265 \u03c3 j \u2208 t t i .", "for that we use an alternative definition of submodular valuations ( see [ 12 ] for an equivalence proof ) : a valuation v is submodular if for every item j , and bundlesw , t , w \u2286 t , j / \u2208 t , we have that v ( w \u222a { j } ) \u2212 v ( w ) \u2265 v ( t \u222a { j } ) \u2212 v ( t ) .", "the first property holds simply by construction .", "to see that v ( t ) \u2265 \u03c3 j \u2208 t t i , fix t , and let t t j be the marginal utility of item j in t , using the same order we used in s ( that is , order the items in s , and delete items that are not in t , while keeping the relative order of the rest of the items ) .", "recall that an alternative definition of submodular valuation says that the marginal utility does not decrease when items are deleted , hence v ( t ) = \u03c3 j \u2208 t t t i \u2265 \u03c3 j \u2208 t t i finally , to show that this clause can be constructed using value queries only , observe that we only have to calculate the marginal utility of an item , which can be done by two value queries for each item .3 .", "approximating the welfare with demand oracles .", "randomized rounding of an lprelaxation of a problem is a standard technique , and our algorithms use it .", "however , when one attempts randomized rounding on packing problems such as combinatorial auctions the results are not good ; a randomized choice will very likely yield non-feasible solutions , unless the probabilities chosen reduce the expected quality of solution by a large o ( \u221a m ) factor.both algorithms we present in this section start with a randomized rounding procedure for obtaining a \" pre-allocation \" .", "this allocation has a value that is close to the optimum , but unfortunately is not feasible .", "feasibility issues are handled differently in the complement free and the xos cases , and indeed a much better ratio is obtained for the xos case.before describing the randomized rounding procedure , let us recall the standard lp relaxation for combinatorial auctions : maximize : \u03c3 i , s x i , s v i ( s ) subject to : - for each item j : \u03c3 i , s | j \u2208 s x i , s \u2264 1 - for each bidder i : \u03c3 s x i , s \u2264 1 - for each i , s : x i , s \u2265 0even though the linear program has exponentially many variables , it may still be solved in polynomial time .", "this is done by solving the dual linear program using the ellipsoid method .", "using the ellipsoid method requires a \" separation \" oracle , and this may be directly implemented using the demand oracles of the bidders .", "this was first proven by nisan and segal [ 19 ] , and in more details by blumrosen and nisan [ 2 ] .", "the pre-allocation is obtained via randomized rounding as follows : for each bidder i we independently choose a set s i by performing the following random experiment : each set s is chosen with probability x i , s , and the empty set is chosen with probability 1 \u2212 \u03c3 s x i , s .", "observe that the randomized rounding solution outputs an integral solution with an expected value of op t * , the optimal fractional solution .", "however , the solution is not feasible , as an item might be allocated to more than one bidder .", "the two algorithms we present greatly differ in how they solve this infeasibility.a word about the oracles needed to implement our algorithms .", "the algorithm for complement - free valuations we present in this section requires access to a demand oracle ( for each specific valuation v ) .", "both algorithms for xos valuations we present require in addition access to an xos oracle .3.1 complement - free valuations .", "indeed , the pre-allocation produces a non-feasible solution .", "however , these non-feasible solutions are only a logarithmic factor away from feasibility ( in the sense that with high probability each item is allocated at most a logarithmic number of times ) .", "for general valuations this fact does not help , but as we will show it suffices for cf valuations ( see also [ 7 ] for another setting , the k - duplicates version of combinatorial auctions , in which this fact leads to good approximations ) .", "the main observation at the heart of our algorithm is that one may partition this logarithmicallynon - feasible solution into a logarithmic - size family of feasible solutions .", "for the case of complement - free valuations , the quality of one of these solutions can be bounded from below.the original version of the algorithm claimed a ratio of o ( log m ) .", "feige [ 9 ] observed that the algorithm actually provides an approximation ratio of o ( log m log log m ) , and this is the ratio that is presented here .", "we also note that feige [ 9 ] presents an example which shows that the approximation ratio of the algorithm is at least \u03c9 ( log m log log m ) .", "( i ) use randomized rounding to find a \" pre-allocation \" s 1 , ... , s n of pairs < i , s i > with the following properties , where k = o ( log m log log m ) : \u2022 each item j appears at most k times in { s i } i , with j \u2208 s i .", "\u2022 i v i ( s i ) \u2265 1 3 \u00b7 ( \u03c3 i , s x i , s v i ( s ) ) .", "( ii ) for each bidder i , partition s i into a disjoint union s i = s 1 i \u222a ... \u222a s k isuch that for each 1 \u2264 i 1 < i 2 \u2264 n and 1 \u2264 r \u2264 k , it holds that s r i1 \u2229 s r i2 = \u2205 .", "this is done as follows : for each i = 1 , ... , n and each r = 1 , ... , k , we let s r i = { j \u2208 s i | j appears in exactly r \u2212 1 of the sets s 1 , ... , s i \u22121 } .", "( iii ) find the r that maximizes i v i ( s r i ) , and for each i allocate t i = s r i to bidder i. ( iv ) if there is a bidder i with v i ( m ) \u2265 \u03c3 i v i ( t i ) then allocate i all items ( and allocate nothing to the rest of the bidders ) .", "theorem 3.1 if all input valuations are complement - free then the algorithm produces an allocation that is an o ( k ) = o ( log m log log m ) - approximation to the optimal one.we now prove the theorem .", "towards this end , let us keep track of the \" quality \" of solution implied by the intermediate steps .", "( i ) the randomized rounding procedure returns the optimal fractional solution op t * = \u03c3 i , s x i , s v i ( s ) , which is an upper bound to the value of the integral optimal allocation , op t .", "the detailed calculations needed to prove that this step indeed ends with a solution that satisfies all the required conditions are given later .", "at this point we will indicate the types of calculations used and what they yield .", "from the first inequality of the lp and using standard probability bounds one can show that for every item j , the probability that it appears in more than k chosen sets is exponentially small in k .", "the expected value of i v i ( s i ) at this stage is only slightly less than \u03c3 i , s x i , s v i ( s ) = op t * .", "it follows that with very high probability none of the required constraints are violated , and thus we havei v i ( s ) \u2265 1 3 \u00b7 op t * dobzinskiet al. : approximations algorithms for ca 's with cf bidders mathematics of operations research 00 ( 0 ) , pp .", "xxx - xxx , c 20xx informs 7 ( ii ) the main point here is that indeed for every fixed r , the sets { s r i } i are pairwise disjoint and are thus a valid allocation .", "this follows directly fromthe construction , as every duplicate instances of every item j are allocated to sets s r i with sequentially increasing r. note that we always keep r \u2264 k since each item appears in at most k sets in { s i } .", "( iii ) the crucial use of complement - freeness comes here : since for each fixed i , s i = r s r i , the fact that v i is complement free implies that r v i ( s r i ) \u2265 v i ( s i ) .", "by summing over all i we get that .", "thus , the allocation t 1 = s r 1 , ... , t n = s r n is an o ( log ( m ) log log m ) approximation to the optimal allocation ( and even to the optimal fractional allocation ) .", "r i v i ( s r i ) = i r v i ( s r i ) \u2265 i v i ( s i ) \u2265 1 3 \u00b7 op t * .", "it 3.1.1 details of stage ( i ) .", "for each j \u2208 m , let e j denote the random variable that indicates whether j was allocated more than k times .", "let b be the random variable that indicates whetherv i ( s i ) < 1 3 op t * .", "we will prove that pr [ \u2228 j e j \u2228 b ] < 5 6 .", "we first prove that pr [ \u2228 j e j ] < 1n .", "fix an item j. let z i , j be the random variable that determines whether j \u2208 s i .", "obviously , z i , j receives values in { 0 , 1 } .", "because of the randomized rounding method we used , we have that the variables { z i , j } i are independent .", "we define z j = \u03c3 i z i , j ( i.e. , z j is the number of times item j appears in { s i } ) .", "by the linearity of expectation and the first condition of the lp formulation we have that e [ z j ] \u2264 1 .", "we now use the following known proposition , ( see , e.g. , the book by mitzenmacher and upfal [ 14 ] ) : lemma 3.1 let x 1 , ... , x n ( for sufficiently large n ) be independent bernoulli trials such that for 1 \u2264 i \u2264 m , pr [ x i = 1 ] = p i , and \u03c3 i p i = 1 .", "let x = x 1 + ... + x m .", "then pr [ x > 3 log m log log m ] \u2264 1 m 2and thus we have that pr [ item j appears in more than log m 3 log log m bundles in { s i } ] \u2264 1 m 2by applying the union bound we get that the probability that any one of the items appears in more than log m 3 log log m bundles in { s i } is smaller than m \u00b7 1 m 2 = 1 m .", "we will now prove that pr [ b ] < 3 4 .", "w.l.o.g. max i v i ( m ) = 1 ( otherwise , we can divide all valuations by max i v i ( m ) ) .", "if op t * \u2264 3 , then giving m to the bidder that maximizes v i ( m ) , is a feasible allocation which provides a good approximation .", "therefore , from now on we assume that op t * > 3 .", "let a be the random variable that gets the value of \u03c3 i v i ( s i ) after step ( i ) .", "we will see that a \u2265 \u03c3 i v i ( s ) 3 with high probability.we make use of the following corollary from chebyshev 's inequality : lemma 3.2 let x be the sum of independent random variables , each of which lies in [ 0,1 ] , and let\u00b5 = e [ x ] .", "then , for any \u03b1 > 0 , pr [ | x \u2212 \u00b5 | \u2265 \u03b1 ] \u2264 \u00b5 \u03b1 2 .", "we can now upper bound the probability that event b occurs.pr [ b ] = pr [ a < op t * 3 ] \u2264 pr [ | a \u2212 op t * | \u2265 2op t * 3 ] \u2264 9 4op t * \u2264 3 4the last inequality is because op t * > 3 .", "therefore , using the union bound : pr [ \u2228 m t = 1 e t \u2228 b ] \u2264 \u03c3 j \u2208 m pr [ e j ] + pr [ b ] \u2264 1 n + 3 4 < 5 6we have shown that with good probability it is possible to create a solution for which all the necessary conditions hold.dobzinski et al. : approximations algorithms for ca 's with cf bidders mathematics of operations research 00 ( 0 ) , pp .", "xxx - xxx , c 20xx informs 3.2 xos valuations .", "the algorithm presented in this section is based on exploiting the structure of the syntactically defined xos class .", "recall that the class of xos valuations strictly contains submodular valuations.the algorithm starts by obtaining a pre-allocation as described in the beginning of the section , where each bidder gets at most one bundle .", "the next step is to \" replace \" the valuation of a bidder with the xos clause that corresponds to the bundle he got in the pre-allocation .", "now we find the optimal solution using the \" new \" valuations .", "observe that a simple greedy algorithm finds the optimal allocation if all bidders have additive valuations.we are left with showing that the value of the generated allocation is not too far from the optimal fractional solution .", "once again , the syntactic properties of xos come to our aid : we analyze the algorithm by separately setting a lower bound on the contribution of each single item to the total social welfare .", "( i ) obtain a \" pre-allocation \" s 1 , ... , s n using the randomized rounding procedure .", "( ii ) let ( x 1 : p i 1 \u2228 ... \u2228 x m : p i m ) be the maximizing clause for s i in v i .", "( iii ) allocate the j'th item to bidder i for which p i j \u2265 p i j , for all i \u2208 n .", "note that step ( i ) requires access to a demand oracle , and step ( ii ) requires access to an xos oracle .", "we do not know if an xos oracle can be simulated using demand queries only , in the case of general xos valuations .", "however , if a valuation is submodular , a demand oracle ( and in fact , a value oracle ) suffices , as was shown before .", "thus , if all valuations are submodular only demand oracles are needed to implement the algorithm .", "1 1 \u2212 ( 1 \u2212 1 n ) n ) - approximation to the optimal one.proof .", "observe that the allocation produced by the algorithm is indeed a feasible one .", "thus , all that is left to prove is that it achieves the desired approximation ratio.for every bidder i and bundle s , let ( x 1 : p ( i , s ) 1 \u2228 ... \u2228 x m : p ( i , s ) m ) be the maximizing clause for s in v i .", "it holds that : op t * = \u03c3 i , s x i , s v i ( s ) = \u03c3 i , s x i , s ( \u03c3 j p ( i , s ) j ) = \u03c3 j ( \u03c3 i , s x i , s p ( i , s ) j ) let q j be the random variable that equals max i \u2208 n { p i j } , after the randomized rounding step .", "let alg be the random variable that receives the value of the total social welfare after assigning each item as in the algorithm .", "due to the properties of xos valuations , alg \u2265 \u03c3 j q j .", "this is because if ( x 1 : p ( i , s ) 1 \u2228 ... \u2228 x m : p ( i , s ) m ) is the maximizing clause of s in v i then , by xos , for everyt \u2286 s \u03c3 j \u2208 t p ( i , s ) j \u2264 v i ( t ) .", "we will now show that the expectation of q j is bounded from below by ( 1 \u2212 ( 1 \u2212 1 n ) n ) \u00b7 ( \u03c3 i , s x i , s p ( i , s ) j ) .", "thus , by the linearity of expectation : e [ alg ] \u2265 \u03c3 j e [ q j ] \u2265 \u03c3 j ( 1 \u2212 ( 1 \u2212 1 n ) n ) \u00b7 ( \u03c3 i , s x i , s p ( i , s ) j ) = ( 1 \u2212 ( 1 \u2212 1 n ) n ) op t * lemma 3.3 for every item j , e [ q j ] \u2265 ( 1 \u2212 ( 1 \u2212 1 n ) n ) \u00b7 ( \u03c3 i , s x i , s p ( i , s ) j ) proof .", "we will lower bound the expected value of e [ q j ] by considering a different way of assigning j. letx j i = \u03c3 s | j \u2208 s x i , s and v j i = \u03c3 s | j \u2208 s x i , s p ( i , s ) j x j i .", "that is , x i is the probability that bidder i gets item j in the \" pre-allocation \" , and v j i is the expected value of j to bidder i , conditioned on i receiving j in the \" pre-allocation \" .", "order the bidders in the decreasing order of their v j i 's .", "without loss of generality , let us assume this order to be 1 , ... , n .", "we assign j to the highest ranked ( first ) bidder who got item j in the \" pre-allocation \" .", "denote by t j the expected value of j in this allocation.observe that e [ q j ] \u2265 e [ t j ] because e [ q j ] is the expected value of item j when j is always assigned to the bidder with the highest ( per - item ) value for j in the \" pre allocation \" ( as in the algorithm ) .", "therefore , to prove the lemma we will bound e [ t j ] from below .", "it is easy to see thate [ t j ] = x j 1 v j 1 + ( 1 \u2212 x j 1 ) x j 2 v j 2 + ... + ( 1 \u2212 x j 1 ) ( 1 \u2212 x j 2 ) \u00b7 ... \u00b7 ( 1 \u2212 x j n \u22121 ) x j n v j nnote that , due to the first condition of the lp , x j 1 + ... + x j n \u2264 1 .", "therefore , we have for every 1 \u2264 k \u2264 n that : 1 \u2212 ( 1 \u2212 x j 1 ) \u00b7 ... \u00b7 ( 1 \u2212 x j k ) \u2265 1 \u2212 ( 1 \u2212 \u03c3 k i = 1 x j i k ) k \u2265 ( 1 \u2212 ( 1 \u2212 1 k ) k ) \u03c3 k i = 1 x j i \u2265 ( 1 \u2212 ( 1 \u2212 1 n ) n ) \u03c3 k i = 1 x j i ( 1 ) where the last two inequalities are derived using elementary calculus .", "define v j n +1 = 0 .", "multiplying equation 1 by ( v j k \u2212 v j k +1 ) for every 1 \u2264 k \u2264 n , and summing over all k 's shows that : e [ t j ] \u2265 ( 1 \u2212 ( 1 \u2212 1 n ) n ) ( \u03c3 i v j i x j i ) = ( 1 \u2212 ( 1 \u2212 1 n ) n ) ( \u03c3 i , s | j \u2208 s x i , s p ( i , s ) j ) 3.3 a combinatorial 2 - approximation algorithm for xos valuations .", "we now present a 2 - approximation algorithm for combinatorial auctions with xos bidders .", "while the approximation guarantee is worse than the e e \u22121 guarantee of the previous algorithm , the current algorithm is combinatorial , fast , and simple .", "notice that in step ( ii ) a we require access to a demand oracle , and in step ( ii ) c we require access to an xos oracle .", "for each t \u2286 m , we denote by p i ( t ) the sum of the prices of the items in t at the i'th stage of the algorithm .", "let \u2206 i = p i ( m ) \u2212 p i \u22121 ( m ) , i.e. , the total difference in prices between stages ( i \u2212 1 ) and i ( with p 0 ( m ) = 0 ) .", "let a 1 , ... , a n be the allocation generated by the algorithm .", "let o 1 , ... , o n be the optimal allocation .", "we will prove the\u03c2 i v i ( o i ) \u2264 2\u03c3 i v i ( a i ) .", "to do so , we prove three simple lemmas : lemma 3.4 the social welfare of the allocation generated by the algorithm is at least the sum of items ' prices at the end of the algorithm ( after the n'th stage ) .", "that is , p n ( m ) \u2264 \u03c3 i v i ( a i ) .", "consider a specific bidder i. let t be the bundle assigned to that bidder by the algorithm in stage i. obviously a i \u2286 t .", "because v i is an xos valuation , we have that p i ( a i ) \u2264 v i ( a i ) .", "however , since the items in a i were not reassigned after the i'th stage , and so their prices were not altered , p i ( a i ) = p n ( a i ) .", "we have that p n ( a i ) \u2264 v i ( a i ) , and so p n ( m ) = \u03c3 n i = 1 p n ( a i ) \u2264 \u03c3 n i = 1 v i ( a i ) .", "lemma 3.5 the prices assigned to the items throughout the execution of the algorithm are non-decreasing .", "let s be the set that maximizes the demand of the i'th bidder at the i'th stage of the algorithm .", "let ( x 1 : q 1 \u2228 ... \u2228 x m : q m ) be the xos clause of s in v i .", "now , assume there is an item j \u2208 s for which q j < p i j .", "v i is an xos valuation and so we have that \u03c3 t \u2208 ( s \u2212 { j } ) q t \u2264 v i ( s \u2212 { j } ) and \u03c3 r \u2208 s q r = v i ( s ) .", "hence : v i ( s ) \u2212 \u03c3 r \u2208 s p i r = \u03c3 r \u2208 s q r \u2212 \u03c3 r \u2208 s p i r = ( q j \u2212 p i j ) + ( \u03c3 t \u2208 ( s \u2212 { j } ) q t \u2212 \u03c3 t \u2208 ( s \u2212 { j } ) p i t ) < ( \u03c3 t \u2208 ( s \u2212 { j } ) q t \u2212 \u03c3 t \u2208 ( s \u2212 { j } ) p i t ) < v i ( s \u2212 { j } ) \u2212 \u03c3 t \u2208 ( s \u2212 { j } ) p i tand this is a contradiction to the definition of s.lemma 3.6 the social welfare of the optimal allocation is at most twice the sum of items ' prices at the end of the algorithm .", "that is , \u03c3 i v i ( o i ) \u2264 2p n ( m ) .", "recall that \u2206 i represents the \" demand \" of player i at prices p i \u22121 .", "hence , for each i , 1 \u2264 i \u2264 n , \u2206 i = max t \u2286 m ( v i ( t ) \u2212 p i \u22121 ( t ) ) ( otherwise , i would have chosen a different bundle of items ) .", "we have : v i ( o i ) \u2212 p i \u22121 ( o i ) \u2264 \u2206 i .", "since the prices do not decrease throughout the algorithm , the following inequality holds : v i ( o i ) \u2212 p n ( o i ) \u2264 \u2206 i .", "by summing up on both sides of the equation we get : \u03c3 n i = 1 v i ( o i ) \u2212 \u03c3 i p n ( o i ) \u2264 \u03c3 i \u2206 i \u03c3 i v i ( o i ) \u2212 p n ( m ) \u2264 p n ( m ) \u03c3 i v i ( o i ) \u2264 2p n ( m ) putting the lemmas together we have that\u03c2 i v i ( o i ) \u2264 2p n ( m ) \u2264 2\u03c3 i v i ( a i ) the following example shows that the algorithm can not achieve an approximation ratio better than 2 : consider a combinatorial auction with two goods , a and b , and two bidders .", "the first bidder 's valuation is v 1 ( { a } ) = v 1 ( { b } ) = v 1 ( { a \u222a b } ) = 1 .", "the valuation of the second bidder is v 2 ( { a } ) = 0 , v 2 ( { b } ) = v 2 ( { a \u222a b } ) = 1 .", "a welfare of 2 can be achieved by allocating a to the first bidder , and b to the second bidder .", "however , the first bidder might wish to get b at the first stage , and the optimal social welfare achieved is only 1 .", "hence , the approximation ratio achieved by the algorithm is not better than 2 .", "nisan [ 15 ] considers the following combinatorial auction : each bidder i has a set t i of bundles that he is potentially interested in .", "we also have that all the t i 's have the same size , t .", "a specific instance of this combinatorial auction is determined by specifying a set i i for each bidder i , i i \u2286 t i , which denotes the bundles our bidder is interested in .", "the valuation of each bidder i is the following : v i ( s ) = 1 if there exists some r \u2208 i i such that r \u2286 s , and 0 otherwise .", "nisan shows that distinguishing between the case where there is ( 1 ) an allocation that assigns each bidder i a ( superset of a ) set he is interested in from i i ( and so the optimal welfare is n ) , and between ( 2 ) only one bidder is assigned a superset of a bundle from i i he is interested in ( and so the optimal welfare is 1 ) , requires t bits of communication , for t that is exponential in n and m ( for n < m 1 2 \u2212 ) , for any constant > 0 .", "this shows in particular that every approximation algorithm that provides an approximation ratio better than n for combinatorial auctions with general valuations requires exponential communication.let us now reduce this combinatorial auction to make the valuations complement free .", "define new complement - free valuations as follows : v i ( s ) = v i ( s ) + 1 , for s = \u2205 .", "these new valuations are indeeddobzinski et al. : approximations algorithms for ca 's with cf bidders mathematics of operations research 00 ( 0 ) , pp .", "xxx - xxx , c 20xx informs 11 complement free , since the value of each non-empty bundle is at least 1 , and no bundle has a value larger than 2 .", "consider an instance with valuations v 1 , . . . , v n .", "we can see that distinguishing between the following cases requires exponential communication : the optimal social welfare is n + 1 , and the optimal social welfare is 2n ( since distinguishing between these cases is equivalent to distinguishing between the corresponding cases in the auction presented in [ 15 ] ) .", "hence , we have proved that for every n \u2265 2 achieving proof .", "we will show a polynomial - time reduction from max - k - cover .", "max - k - cover is defined as follows : given m items , and a collection of subsets of these items , the objective is to maximize the number of items which can be covered by k subsets .", "feige [ 8 ] proved that it is np - hard to approximate this problem within a better factor than e e \u22121 .", "this problem can be converted into a combinatorial auction with xos valuations : given an instance of max - k - cover , we create an auction with k bidders and m goods .", "all bidders will have the same xos valuation : a clause for each subset in the max - k - cover problem where the value of every item in the clause is 1 .", "observe that every choice of k subsets in the max - k - cover corresponds to an allocation in the combinatorial auction with the same value , by assigning all items in set i to bidder i ( and avoid assigning one item to more then one bidder ) .", "in the other direction , every allocation corresponds to a choice of k sets in max - k - cover with at least the social welfare value : choose k subsets , so that subset i contains the items in the clause maximizing bidder i 's gain .", "hence , we are guaranteed that the number of items covered is no less than the social welfare .", "the theorem follows.next we prove an unconditional communication lower bound .", "the proof is based on reduction from the approximate - disjointness problem using a probabilistic construction .", "the reduction relies on a combinatorial structure that guarantees the required gap between the optimal solution and all other solutions .", "we first define this structure , and then prove its existence via the probabilistic method .", "we will prove our lower bound by reducing from the approximate disjointness problem .", "in this problem , there are n players , each player i holds a string a i which specifies a subset of { 1 , ... , t } .", "the goal is to distinguish between the following two extreme cases : \u2022 \u2229 n i = 1 a i = \u2205 \u2022 for every i = j , a i \u2229 a j = \u2205 alon et al. [ 1 ] prove that the communication complexity of this problem is \u03c9 ( t n 4 ) .", "this result also holds for randomized protocols with bounded 2 - sided error.we show a reduction from the approximate - disjointness problem on vectors of size t = e 2m n to the problem of finding an optimal solution in combinatorial auctions with xos bidders .", "we then prove a communication lower bound for distinguishing between the case the optimal value is m and the case it is m [ 1 \u2212 ( 1 \u2212 1 n ) n ] .", "definition 4.1 a set of partitions f = { p s } s = 1 , ... , t is said to have the ( n , ) - covering property if for every choice of indices 1 \u2264 s 1 , s 2 , ... s n \u2264 t , such that no two are equal , it holds that | \u222a n i = 1 p i s i | \u2264 m [ 1 \u2212 ( 1 \u2212 1 n ) n + ] .", "lemma 4.1 for every > 0 , there exists a set f of partitions with the ( n , ) - covering property of size | f | = t = e ( 1 \u2212 ( 1 \u2212 1 n ) n ) mm 2 3n .", "we use probabilistic construction to obtain such a set : each partition p s will be chosen independently at random ( each element will be placed in exactly one of the p i s with equal probability ) .", "we will require the following version of the chernoff bounds : lemma 4.2 let x 1 , ... , x m be independent random variables that take values in { 0 , 1 } , such that for all i , pr [ x i = 1 ] = p for some p. then , the following holds , for 0 \u2264 \u2264 1 : pr [ \u03c3 i x i > ( 1 + ) pm ] \u2264 e \u2212 pmm 2 3fix indices : 1 \u2264 s 1 , s 2 , ... , s n \u2264 t , such that no two are equal .", "for every j \u2208 m let y j be the random variable that receives a value of 1 if j \u2208 \u222a n i = 1 p i si and 0 otherwise.observe that e [ y j ] = 1 \u2212 ( 1 \u2212 1 n ) n .", "using the last claim , we have that for any 0 < < 1 : pr [ | \u222a n i = 1 p i si | > ( 1 + ) m [ 1 \u2212 ( 1 \u2212 1 n ) n ] ] = pr [ \u03c3 j y j > ( 1 + ) m [ 1 \u2212 ( 1 \u2212 1 n ) n ] ] \u2264 e \u2212 ( 1 \u2212 ( 1 \u2212 1 n ) n ) mm 2 3since there are at most t n choices of such indices we have that as long as t n < e ( 1 \u2212 ( 1 \u2212 1 n ) n ) mm 2 3such a set of partitions exists.we are now left with describing the reduction .", "assume an instance of the approximate - disjointness problem on vectors of size t = e ( 1 \u2212 ( 1 \u2212 1 n ) n ) mm 2 3n , in which player i receives the string a i \u2286 { 1 , ... , t } .", "we reduce it into a combinatorial auction with n bidders , each with xos valuation , in the following manner : let m = { 1 , ... , m } .", "player i will construct the collection b i = { p i s | s \u2208 a i } .", "bidder i 's valuation will consist of | b i | clauses : \u2297 t \u2208 b i ( \u2228 t \u2208 t t = 1 ) .", "in words , each clause corresponds to a set the player is interested in , and this clause gives a value of 1 to an item if it belongs to the wanted set , and 0 otherwise.observe that if there exists s \u2208 \u2229 a i , then there is an allocation in which all items are allocated , and the value of the bundle each player gets is simply the number of items he gets .", "thus , the value of this allocation is m .", "on the other hand , if for every i = j , a i \u2229 a j = \u2205 then the value of the optimal solution is at most ( 1 + ) m [ 1 \u2212 ( 1 \u2212 1 n ) n ] .", "the second observation is since the sets have the ( n , ) - covering property , so the players get together a value of at most ( ( 1 + ) m [ 1 \u2212 ( 1 \u2212 1 n ) n ] ) m from the allocated items .", "since the communication complexity of the approximate - disjointness problem is \u03c9 ( t n 4 ) , in our case it is \u03c9 ( e ( 1 \u2212 ( 1 \u2212 1 n ) n ) mm 2 ln n 3n ) .", "in particular , as long as m 1 \u2212 > n , and for any constant 0 < < 1 , the communication complexity is exponential .", "this concludes the proof of the theorem .5 .", "truthful approximations using value queries .5.1 vcg and maximal in range algorithms .", "arguably the main positive result of mechanism design is the vcg payment scheme .", "let us describe this payment scheme when applied to combinatorial auctions .", "first , find the optimal solution ( o 1 , ... , o n ) , and allocate accordingly .", "then , pay each bidder the sum of the utilities of the rest of the bidders .", "that is , bidder i receives a payment of \u03c3 k = i v k ( o k ) .", "let us examine the total utility of bidder i : v i ( o i ) + \u03c3 k = i v k ( o k ) ( the value he gains from the bundle he got plus his payment ) .", "hence , the total utility of each bidder is equal to the value of the allocation .", "observe that the allocation that maximizes the utility of the bidders is the optimal one .", "bidding untruthfully can only result in changing the allocation to a suboptimal one , hence decreasing the utility of the bidder .", "thus bidding truthfully is the best action for each bidder 2 .", "see [ 17 ] for a more formal discussion.the obvious drawback of using the vcg mechanism is that it requires us to find the optimal solution .", "in many settings finding the optimal solution is not computationally feasible , and this is true in particular in the settings considered in this paper .", "in general , obtaining an approximate solution using an approximation algorithm and using the vcg payment scheme ( paying each bidder the sum of the utilities of the rest of the bidders ) does not result in a truthful mechanism .", "in fact , nisan and ronen [ 18 ] show that an approximation algorithm becomes truthful using the vcg payment scheme if and only if the underlying algorithm , is essentially maximal in range.an algorithm is maximal in range if it limits the range of possible allocations to a smaller set , and finds the optimal allocation within this restricted range .", "incentive compatibility immediately follows using the same argumentation as before since we find the optimal allocation in the restricted range .", "the main challenge in the design of these algorithms is therefore to identify a subset of the range in which complete optimization is computationally feasible , and then showing that the optimal solution within the restricted set of solutions always provides the required approximation ratio .", "we present a maximal in range algorithm for combinatorial auctions with complement - free bidders .", "this algorithm makes use of value queries only .", "the approximation ratio of this algorithm is o ( \u221a m ) .", "in contrast , dobzinski and schapira [ 7 ] and blumrosen and nisan [ 2 ] showed that for general valuations there is a lower bound of o ( m log m ) for the value oracles model .", "observe that the algorithm 's running time is polynomial in n and m , since maximal weighted matching in bipartite graphs can be solved in polynomial time ( in m and n ) .", "the algorithm is clearly a maximal - in - range algorithm , and thus incentive compatibility is guaranteed by the use of the vcg payment scheme .", "let us now prove that the algorithm provides the desired approximation ratio .", "let op t = { t 1 , ... , t k , q 1 , ... , q l } be the optimal allocation in the original auction , where for each 1 \u2264 i \u2264 k , | t i | < \u221a m , and for each 1 \u2264 i \u2264 l , | q i | \u2265 \u221a m. let | op t | = \u03c3 l i = 1 v i ( q i ) + \u03c3 k i = 1 v i ( t i ) .", "the first case we consider is when \u03c3 l i = 1 v i ( q i ) \u2265 \u03c3 k i = 1 v i ( t i ) .", "clearly , \u03c3 l i = 1 v i ( q i ) \u2265 | op t | 2 .", "since l \u2264 \u221a m ( otherwise , more than m items were allocated ) , for the bidder i that maximizes v i ( o i ) it holdsthat v i ( m ) \u2265 v i ( q i ) \u2265 | op t | 2 \u221a m. thus , by assigning all items to bidder i we get the desired approximation ratio.consider the case in which\u03c2 k i = 1 v i ( t i ) > \u03c3 l i = 1 v i ( q i ) .", "clearly , \u03c3 k i = 1 v i ( t i ) > | op t | 2 .", "for each i , 1 \u2264 i \u2264 k , let c i = arg max j \u2208 t i v i ( { j } ) .", "notice , that v i ( { c i } ) \u2265 vi ( ti ) | t i | ( this is due to the cf property : | t i | \u00b7 v i ( { c i } ) \u2265 \u03c3 j \u2208 t i v i ( { j } ) \u2265 v i ( t i ) ) .", "since for all i 's | t i | < \u221a m , we have that : \u03c3 k i = 1 v i ( c i ) > \u03c3 i v i ( t i ) \u221a m \u2265 | op t | 2 \u221a m .", "by assigning c i to bidder i we get an allocation in which every bidder gets at most one item with a social welfare of\u03c2 k i = 1 v i ( { c i } ) \u2265 | op t | 2 \u221a m .", "the second allocation , therefore , guarantees at least that social welfare .", "we conclude that the approximation ratio the algorithm guarantees is at least o ( \u221a m ) .6 .", "a lower bound for the value oracles model .", "the proof of the lower bound takes a concrete complexity approach .", "that is , the input is given as a black box that can only answer a specific type of queries .", "we only measure the number of queries an algorithm must make in order to achieve a certain approximation ratio .", "in particular we ignore any computational work that needs to be done .", "we stress that the lower bound we achieve does not depend on any unproven computational assumption .", "fix a small constant \u03b4 > 0 .", "we shall construct a combinatorial auction with m items and k = \u221a m bidders .", "for every s , let a s be the additive valuation that assigns a value of 1 to each item j \u2208 s , and 0 to each item j / \u2208 s. let \u00af a be the additive valuation that assigns every item j \u2208 m a value of 1 + \u03b4 again , using the fact that t i is chosen uniformly at random we claim that that pr [ | s \u2229 t i | > ( 1 + \u03b4 ) | s | m 1 2 \u2212 \u03b4 ] is exponentially small.we conclude that for every bundle s , only with exponentially small probability does one gather sufficient information to distinguish between the case that i 's valuation is v i and the case that it is v i .", "hence , with constant probability it requires an exponential number of value queries to distinguish between v i and v i .", "this concludes the proof of the theorem ."], "tgt_txt": "approximation algorithms for combinatorial auctions with complement - free biddersspeaker : michael schapira joint work with shahar dobzinski & noam nisan talk structure combinatorial auctions log ( m ) - approximation for cf auctions an incentive compatible o ( m1 / 2 ) approximation of cf auctions using value queries .<q>2 - approximation for xos auctions a lower bound of e / ( e-1 ) - for xos auctions combinatorial auctions a set m of items for sale .<q>| m | = m. n bidders , each bidder i has a valuation function vi : 2m - > r + .<q>common assumptions : normalization : vi ( ) = 0 free disposal : st vi ( t ) vi ( s ) goal : find a partition s1 , , sn such that social welfare vi ( si ) is maximized combinatorial auctions problem 1 : finding an optimal allocation is nphard .<q>problem 2 : valuation length is exponential in m. problem 3 : how can we be certain that the bidders do not lie ?<q>( incentive compatibility ) combinatorial auctions we are interested in algorithms that based on the reported valuations { vi } i output an allocation which is an approximation to the optimal social welfare .<q>we require the algorithms to be polynomial in m and n .<q>that is , the algorithms must run in sublinear ( polylogarithmic ) time .<q>we explore the achievable approximation factors .<q>access models how can we access the input ?<q>one possibility : bidding languages .<q>the black box approach : each bidder is represented by an oracle which can answer certain queries .<q>access models common types of queries : value : given a bundle s , return v ( s ) .<q>demand : given a vector of prices ( p1 , , pm ) return the bundle s that maximizes v ( s ) - jspj .<q>general : any possible type of query ( the comunication model ) .<q>demand queries are strictly more powerful than value queries ( blumrosen - nisan , dobzinski - schapira ) known results finding an optimal solution requires exponential communication .<q>nisan - segal finding an o ( m1 / 2 - ) - approximation requires exponential communication .<q>nisan - segal .<q>( this result holds for every possible type of oracle ) using demand oracles , a matching upper bound of o ( m1 / 2 ) exists ( blumrosen - nisan ) .<q>better results might be obtained by restricting the classes of valuations .<q>the hierarchy of cf valuations complement - free : v ( st ) v ( s ) + v ( t ) .<q>xos : xor of ors of singletons example : ( a : 2 or b : 2 ) xor ( a : 3 ) submodular : v ( st ) + v ( st ) v ( s ) + v ( t ) .<q>2 - approximation by lln .<q>gs : ( gross ) substitutes , oxs : or of xors of singletons solvable in polynomial time ( lp and maximum weighted matching respectively ) oxs gs sm xos cf lehmann , lehmann , nisan talk structure combinatorial auctions log ( m ) - approximation for cf auctions an incentive compatible o ( m1 / 2 ) approximation cf auctions using value queries .<q>2 - approximation for xos auctions a lower bound of e / ( e-1 ) - for xos auctions intuition we will allow the auctioneer to allocate k duplicates from each item .<q>each bidder is still interested in at most one copy of each item ( so valuations are kept the same ) .<q>using the assumption that all valuations are cf , we will find an approximation to the original auction , based on the k - duplicates allocation .<q>the algorithm step 1 solve the linear relaxation of the problem : maximize : i , sxi , svi ( s ) subject to : for each item j : i , s | jsxi , s 1 for each bidder i : sxi , s 1 for each i , s : xi , s 0 despite the exponential number of variables , the lp relaxation may still be solved in polynomial time using demand oracles .<q>( nisan - segal ) .<q>opt * = i , sxi , svi ( s ) is an upper bound for the value of the optimal integral allocation .<q>the algorithm step 2 use randomized rounding to build a preallocation s1 , .<q>.<q>, sn : each item j appears at most k =o ( log ( m ) ) times in { si } i. ivi ( si ) opt * / 2 .<q>randomized rounding : for each bidder i , let si be the bundle s with probability xi , s , and the empty set with probability 1 - sxi , s .<q>the expected value of vi ( si ) is sxi , svi ( s ) we use the chernoff bound to show that such pre-allocation is built with high probability .<q>the algorithm step 3 for each bidder i , partition si into a disjoint union si = si1 .<q>.<q>sik such that for each 1i < i n , 1tt k , sitsit = .<q>the algorithm step 3 for each bidder i , partition si into a disjoint union si = si1 .<q>.<q>sik such that for each 1i < i n , 1tt k , sitsit = .<q>a b d the algorithm step 3 for each bidder i , partition si into a disjoint union si = si1 .<q>.<q>sik such that for each 1i < i n , 1tt k , sitsit = .<q>a b d s1 1 = { a , b , d } the algorithm step 3 for each bidder i , partition si into a disjoint union si = si1 .<q>.<q>sik such that for each 1i < i n , 1tt k , sitsit = .<q>a b dc e a d the algorithm step 3 for each bidder i , partition si into a disjoint union si = si1 .<q>.<q>sik such that for each 1i < i n , 1tt k , sitsit = .<q>c e a d s2 s2 2 = { a , d } the algorithm step 3 for each bidder i , partition si into a disjoint union si = si1 .<q>.<q>sik such that for each 1i < i n , 1tt k , sitsit = .<q>a b dc e a dc e a the algorithm step 3 for each bidder i , partition si into a disjoint union si = si1 .<q>.<q>sik such that for each 1i < i n , 1tt k , sitsit = .<q>c e a s3 s3 3 = { a } the algorithm step 3 for each bidder i , partition si into a disjoint union si = si1 .<q>.<q>sik such that for each 1i < i n , 1tt k , sitsit = .<q>a b dc e a dc e a b d the algorithm step 3 for each bidder i , partition si into a disjoint union si = si1 .<q>.<q>sik such that for each 1i < i n , 1tt k , sitsit = .<q>a b dc e a dc e a b db c e the algorithm step 4 find the t maximizes ivi ( sit ) return the allocation ( s1t , ... , snt ) .<q>all valuations are cf so : tivi ( sit ) = itvi ( sit ) ivi ( si ) opt * / 2 for the t that maximizes ivi ( sit ) , it holds that : ivi ( sit ) ( ivi ( si ) ) / k opt * / 2k = opt * / o ( log ( m ) ) .<q>a b dc e a dc e a b db c e a communication lower bound of 2 - for cf valuations theorem : exponential communication is required for approximating the optimal allocation among cf bidders to any factor less than 2 .<q>proof : a simple reduction from the general case .<q>talk structure combinatorial auctions log ( m ) - approximation for cf auctions an incentive compatible o ( m1 / 2 ) approximation of cf auctions using value queries .<q>2 - approximation for xos auctions a lower bound of e / ( e-1 ) - for xos auctions incentive compatibility & vcg prices we want an algorithm that is truthful ( incentive compatible ) .<q>i.e. we require that the dominant strategy of each of the bidders would be to reveal true information .<q>vcg is the only general technique known for making auctions incentive compatible ( if bidders are not single - minded ) : each bidder i pays : kivk ( o - i ) - kivk ( oi ) oi is the optimal allocation , o - i the optimal allocation of the auction without the ith bidder .<q>incentive compatibility & vcg prices problem : vcg requires an optimal allocation !<q>finding an optimal allocation requires exponential communication and is computationally intractable .<q>approximations do not suffice ( nisan - ronen ) .<q>vcg on a subset of the range our solution : limit the set of possible allocations .<q>we will let each bidder to get at most one item , or well allocate all items to a single bidder .<q>optimal solution in the set can be found in polynomial time vcg prices can be computed incentive compatibility .<q>we still need to prove that we achieve an approximation .<q>the algorithm ask each bidder i for vi ( m ) , and for vi ( j ) , for each item j. ( we have used only value queries ) construct a bipartite graph and find the maximum weighted matching p. can be done in polynomial time ( tarjan ) .<q>a b items bidders v1 ( a ) v3 ( b ) the algorithm ( cont . )<q>let i be the bidder that maximizes vi ( m ) .<q>if vi ( m ) > | p | allocate all items to i. else allocate according to p. let each bidder pay his vcg price ( in respect to the restricted set ) .<q>proof of the approximation ratiotheorem : if all valuations are cf , the algorithm provides an o ( m1 / 2 ) - approximation .<q>proof : let opt = ( t1 , .<q>.<q>, tk , q1 , ... , ql ) , where for each ti , | ti | > m1 / 2 , and for each qi , | qi | m1 / 2 .<q>| opt | = ivi ( ti ) + ivi ( qi ) case 1 : ivi ( ti ) > ivi ( qi ) ( large bundles contribute most of the social welfare ) ivi ( ti ) > | opt | / 2 at most m1 / 2 bidders get at least m1 / 2 items in opt .<q>for the bidder i the bidder i that maximizes vi ( m ) , vi ( m ) > | opt | / 2m case 2 : ivi ( qi ) ivi ( ti ) ( small bundles contribute most of the social welfare ) ivi ( qi ) | opt | / 2 for each bidder i , there is an item ci , such that : vi ( ci ) > vi ( qi ) / m { ci } i is an allocation which assigns at most one item to each bidder : | p | ivi ( ci ) | opt | / 2m talk structure combinatorial auctions log ( m ) - approximation for cf auctions an incentive compatible o ( m1 / 2 ) approximation cf auction 2 - approximation for xos auctions a lower bound of e / ( e-1 ) - for xos auctions definition of xos xos : xor of ors of singletons .<q>singleton valuation ( x :p ) v ( s ) = p xs example : ( a : 2 or b : 2 ) xor ( a : 3 ) xos properties the strongest bidding language syntactically restricted to represent only complement - free valuations .<q>can describe all submodular valuations ( and also some non-submodular valuations ) can describe interesting npc problems ( max - k - cover , sat ) .<q>supporting prices definition : p1 , , pm supports the bundle s in v if : v ( s ) = jspj v ( t ) jtpj for all t s claim : a valuation is xos iff every bundle s has supporting prices .<q>proof : there is a clause that maximizes the value of a bundle s .<q>the prices in this clause are the supporting prices .<q>take the prices of each bundle , and build a clause .<q>algorithm - example items : { a , b , c , d , e } .<q>3 bidders .<q>price vector : p0 = ( 0,0,0,0,0 ) v1 : ( a : 1 or b : 1 or c : 1 ) xor ( c : 2 ) bidder 1 gets his demand : { a , b , c } .<q>algorithm - example items : { a , b , c , d , e } .<q>3 bidders .<q>price vector : p0 = ( 0,0,0,0,0 ) v1 : ( a : 1 or b : 1 or c : 1 ) xor ( c : 2 ) bidder 1 gets his demand : { a , b , c } .<q>price vector : p1 = ( 1,1,1,0,0 ) v2 : ( a : 1 or b : 1 or c : 9 ) xor ( d : 2 or e : 2 ) bidder 2 gets his demand : { c } algorithm - example items : { a , b , c , d , e } .<q>3 bidders .<q>price vector : p0 = ( 0,0,0,0,0 ) v1 : ( a : 1 or b : 1 or c : 1 ) xor ( c : 2 ) bidder 1 gets his demand : { a , b , c } .<q>price vector : p1 = ( 1,1,1,0,0 ) v2 : ( a : 1 or b : 1 or c : 9 ) xor ( d : 2 or e : 2 ) bidder 2 gets his demand : { c } price vector : p2 = ( 1,1,9,0,0 ) v3 : ( c : 10 or d : 1 or e : 2 ) bidder 3 gets his demand : { c , d , e } final allocation : { a , b } to bidder 1 , { c , d , e } to bidder 3 .<q>the algorithm input : n bidders , for each we are given a demand oracle and a supporting prices oracle .<q>init : p1 == pm = 0 .<q>for each bidder i = 1 .<q>.<q>n let si be the demand of the ith bidder at prices p1 , , pm .<q>for all i < i take away from si any items from si .<q>let q1 , , qm be the supporting prices for si in vi .<q>for all j si update pj = qj .<q>proof to prove the approximation ratio , we will need these two simple lemmas : lemma : the total social welfare generated by the algorithm is at least pj .<q>lemma : the optimal social welfare is at most 2pj .<q>proof lemma 1 lemma : the total social welfare generated by the algorithm is at least pj .<q>proof : each bidder i got a bundle ti at stage i .<q>at the end of the algorithm , he holds ai ti .<q>the supporting prices guarantee that : vi ( ai ) jaipj proof lemma 2 lemma : the optimal social welfare is at most 2pj .<q>proof : let o1 , ... , on be the optimal allocation .<q>let pi , j be the price of the jth item at the ith stage .<q>each bidder i ask for the bundle that maximizes his demand at the ith stage : vi ( oi ) - joi pi , j j pi , j j p ( i - 1 ) , j since the prices are non-decreasing : vi ( oi ) - joi pn , j j pi , j j p ( i - 1 ) , j summing up on both sides : i vi ( oi ) - ijoi pn , j i ( j pi , j jp ( i - 1 ) , j ) i vi ( oi ) - j pn , j j pn , j i vi ( oi ) 2j pn , j talk structure combinatorial auctions log ( m ) - approximation for cf auctions an incentive compatible o ( m1 / 2 ) approximation of cf auctions using value queries .<q>2 - approximation for xos auctions a lower bound of e / ( e-1 ) - for xos auctions xos lower bounds : we show two lower bounds : a communication lower bound of e / ( e-1 ) - for the black box approach .<q>an np - hardness result of e / ( e-1 ) - for the case that the input is given in xos format ( bidding language ) .<q>we now prove the second of these results .<q>max - k - cover we will show a polynomial time reduction from max - k - cover .<q>max - k - cover definition : input : a set of | m | = m items , t subsets si m , an integer k. goal : find k subsets such that the number of items in their union , | si | , is maximized .<q>theorem : approximating max - k - cover within a factor of e / ( e-1 ) is np - hard ( feige ) .<q>the reduction a b c d e f v1 : ( a : 1 or d : 1 ) xor ( c : 1 or f : 1 ) xor ( d : 1 or e : 1 or f : 1 ) vk : ( a : 1 or d : 1 ) xor ( c : 1 or f : 1 ) xor ( d : 1 or e : 1 or f : 1 ) every solution to max - k - cover implies an allocation with the same value .<q>every allocation implies a solution to max - k - cover with at least that value .<q>same approximation lower bound .<q>a matching communication lower bound exists .<q>max - k - cover instance xos auction with k bidders open questions narrowing the gapsvaluation class value queries demand queries general communication general m / ( log1 / 2m ) ( holzman , kfirdahav , monderer , tennenholz ) m / ( logm ) ( nisan - segal , dobzinki - schapira ) m1 / 2 ( blumrosennisan ) m1 / 2 ( nisan - segal ) cf m1 / 2 log ( m ) 2 xos 2 e / ( e-1 ) sm 2 ( lehmann , lehmann , nisan ) e / ( e-1 ) ( new : khot , lipton , markakis , mehta ) 1 +1 / ( 2m ) ( nisan - segal ) gs 1 ( bertelsen , lehmann )", "sections": [1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], "token_sections}