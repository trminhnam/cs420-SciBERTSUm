{"src": [101, 2045, 2003, 2172, 3161, 2470, 2046, 1996, 2640, 1997, 12978, 17534, 6074, 1010, 3391, 2005, 10058, 2008, 9125, 3674, 21933, 6279, 3709, 10470, 2015, 1012, 102, 101, 2122, 10906, 2024, 3375, 6576, 2138, 2019, 4005, 1005, 2015, 5656, 9041, 2006, 2592, 2055, 2060, 7226, 13375, 1005, 5426, 1012, 102, 101, 2043, 7226, 13375, 1005, 26004, 20611, 2024, 2025, 2124, 4654, 14405, 2063, 1010, 3698, 4083, 5461, 2064, 2022, 2109, 2000, 15796, 2068, 2013, 3439, 2951, 1012, 102, 101, 2009, 2003, 1037, 8281, 3444, 1997, 10470, 2015, 1010, 2174, 1010, 2008, 2592, 2055, 2070, 7226, 13375, 1005, 26004, 2015, 2003, 23087, 14091, 1012, 102, 101, 2023, 5158, 1999, 1996, 3168, 2008, 2070, 7226, 13375, 2089, 8246, 2000, 7226, 2012, 2035, 2138, 1996, 4851, 3976, 23651, 2037, 26004, 2015, 1010, 1998, 2036, 1999, 1996, 3168, 2008, 1037, 2152, 7226, 4063, 2089, 2025, 2022, 15055, 2000, 7487, 2010, 26004, 1012, 102, 101, 9217, 2122, 1000, 5023, 20723, 1000, 2064, 8970, 13827, 2046, 1996, 24155, 1997, 26004, 20611, 1012, 102, 101, 2000, 9462, 2023, 3291, 1010, 2057, 16599, 2019, 7861, 1011, 2241, 9896, 1012, 102, 101, 2057, 9398, 3686, 1996, 9896, 6388, 2135, 2478, 2119, 12553, 1998, 2613, 1011, 2088, 1006, 1041, 15907, 1007, 2951, 13462, 2015, 1010, 1998, 2265, 2008, 2256, 3921, 10035, 7226, 13375, 1005, 26004, 20611, 1998, 1996, 4353, 2058, 1996, 2995, 2193, 1997, 7226, 13375, 6022, 2062, 14125, 2084, 2062, 19647, 4304, 24155, 5461, 1012, 102, 101, 2045, 2038, 2042, 2172, 2470, 2006, 1996, 2817, 1997, 12978, 17534, 6074, 2005, 10470, 2015, 1998, 2060, 3006, 1011, 2241, 10058, 1012, 102, 101, 1996, 6202, 4005, 6479, 1006, 11937, 2278, 1007, 1998, 1996, 11937, 2278, 4425, 4677, 2968, 6479, 1006, 11937, 2278, 1011, 8040, 2213, 1007, 2031, 6296, 2172, 3037, 1031, 2403, 1033, 1012, 102, 101, 2045, 2031, 2036, 2042, 2470, 4073, 2006, 17534, 6074, 1998, 17534, 9942, 1999, 2060, 10470, 10058, 1031, 1019, 29623, 2549, 29623, 2581, 29623, 2509, 29623, 2575, 29623, 2475, 1033, 1012, 102, 101, 2348, 2023, 2303, 1997, 2147, 10592, 2116, 2367, 10470, 10058, 1010, 17534, 6074, 2467, 2227, 1037, 2714, 4708, 1024, 2445, 1037, 26004, 3853, 1010, 1996, 17534, 4005, 3791, 2000, 24134, 2019, 15502, 17534, 5656, 2008, 25845, 2015, 3517, 15726, 1012, 102, 101, 1006, 2070, 10058, 2107, 2004, 11937, 2278, 1011, 8040, 2213, 2036, 5478, 6074, 2000, 9611, 3176, 1010, 1041, 29625, 2290, 29625, 1010, 19940, 8518, 1012, 1007, 102, 101, 1996, 1000, 4267, 8998, 1000, 1999, 7337, 2640, 9251, 2008, 10595, 2323, 2022, 3833, 2061, 2008, 2027, 2024, 1000, 6987, 1011, 2489, 1000, 1011, 2008, 2003, 1010, 2061, 2008, 6074, 2064, 16582, 11581, 2135, 1999, 2122, 10595, 2130, 2302, 2592, 2055, 1996, 4353, 1997, 2060, 6074, 1005, 26004, 2015, 1012, 102, 101, 2005, 2742, 1010, 2104, 1996, 18315, 2290, 7337, 2009, 2003, 1037, 17541, 7444, 5656, 2000, 7226, 3599, 2028, 1005, 2015, 26004, 1010, 7539, 1997, 2060, 6074, 1005, 9029, 1010, 26004, 2015, 2030, 4506, 1012, 102, 101, 2104, 2691, 17568, 1006, 1999, 3327, 1010, 2981, 2797, 5300, 1007, 2309, 1011, 8875, 2394, 10470, 2015, 2024, 2714, 1024, 2019, 4005, 2323, 3961, 1999, 1996, 10470, 2127, 1996, 17534, 6561, 1996, 3815, 1997, 2010, 26004, 29625, 19927, 6987, 1011, 2489, 10595, 2024, 16166, 1010, 2174, 1010, 2027, 2024, 2025, 28498, 1012, 102, 101, 2200, 2411, 1010, 6074, 2024, 4320, 2007, 1996, 3291, 1997, 10561, 2129, 2000, 16582, 1999, 2399, 2008, 2079, 2025, 2031, 7444, 9942, 1998, 2073, 2060, 6074, 1005, 3477, 27475, 2024, 23972, 7882, 1012, 102, 101, 2005, 2742, 1010, 2057, 2089, 2215, 2000, 5589, 1999, 1037, 2186, 1997, 10470, 2015, 2448, 2011, 2367, 19041, 2012, 2367, 2335, 1012, 102, 101, 5834, 2006, 1996, 17568, 2057, 5454, 2000, 2191, 2055, 2060, 7226, 13375, 1010, 2048, 8107, 2000, 9798, 17534, 9942, 6592, 3209, 1024, 1037, 2208, 14833, 13465, 2594, 3921, 1998, 1037, 3247, 14833, 13465, 2594, 3921, 1012, 102, 101, 1996, 2208, 14833, 13465, 2594, 3921, 15980, 2008, 2035, 6074, 2024, 6669, 11581, 1998, 2008, 2023, 11581, 3012, 2003, 2691, 3716, 1025, 1996, 10470, 2003, 14440, 2004, 1037, 3016, 25253, 2208, 1006, 2156, 1010, 1041, 29625, 2290, 29625, 1010, 1996, 5002, 1999, 1031, 1022, 1033, 1007, 1012, 102, 101, 2104, 2023, 3921, 1010, 1037, 17534, 4005, 2052, 24134, 1037, 3016, 2229, 1011, 10594, 14442, 1997, 1996, 10470, 2208, 1010, 1998, 2377, 1996, 14442, 17534, 5656, 1012, 102, 101, 2005, 2742, 1010, 2005, 10058, 2007, 3674, 1010, 25582, 10470, 2015, 2005, 7235, 5167, 1998, 1999, 2029, 2169, 7226, 4063, 4122, 2069, 1037, 2309, 8875, 1010, 23689, 16523, 5358, 1998, 13351, 1031, 1023, 29623, 17134, 1033, 4453, 3016, 2229, 1011, 10594, 1041, 26147, 12322, 4360, 1012, 102, 101, 2107, 1041, 26147, 12322, 4360, 2200, 2411, 12530, 2006, 1996, 4353, 1997, 6074, 1005, 26004, 4972, 1998, 1996, 2193, 1997, 7226, 13375, 1012, 102, 101, 2348, 2023, 2592, 2003, 6524, 2800, 1999, 3218, 1010, 2009, 2003, 2788, 2825, 2000, 10197, 2122, 20611, 2013, 1996, 17534, 2381, 1997, 3025, 10470, 2015, 1997, 2714, 5167, 1012, 102, 101, 3602, 2008, 2023, 7336, 2437, 1996, 11213, 2008, 2627, 1998, 2925, 7226, 13375, 2097, 3745, 1996, 2168, 26004, 4353, 29625, 10760, 2208, 1011, 14833, 13465, 2594, 3921, 2038, 2363, 1037, 2307, 3066, 1997, 2817, 1010, 2019, 2003, 3383, 1996, 7444, 20680, 1999, 12702, 23035, 2015, 1012, 102, 101, 1999, 3327, 1010, 2045, 2024, 2200, 2204, 4436, 2005, 6224, 5656, 17879, 2008, 2024, 13070, 2000, 4895, 11733, 14621, 2140, 24353, 1012, 102, 101, 2174, 1010, 2023, 3921, 2003, 2025, 2467, 6179, 2000, 6074, 11303, 2000, 5630, 2054, 2000, 2079, 1999, 1037, 3327, 4292, 1010, 2926, 2043, 1996, 11581, 3012, 1997, 2060, 7226, 13375, 2003, 1999, 4797, 1010, 2043, 1996, 22334, 1997, 1041, 26147, 12322, 4360, 2003, 26721, 23576, 1010, 2030, 2043, 1996, 2208, 2038, 3674, 1041, 26147, 12322, 4360, 1012, 102, 101, 1999, 2107, 10906, 1010, 2009, 2089, 2022, 2062, 6413, 2000, 11160, 2006, 3247, 3399, 1012, 102, 101, 1037, 3247, 14833, 13465, 2594, 3921, 18452, 2060, 7226, 13375, 2004, 2112, 1997, 1996, 4044, 1010, 1998, 26663, 1996, 6061, 2008, 2027, 2089, 2689, 2037, 5248, 1999, 3433, 2000, 1996, 4005, 1005, 2015, 4506, 1012, 102, 101, 2004, 2682, 1010, 2057, 2153, 2191, 1996, 11213, 2008, 1996, 2060, 7226, 13375, 2272, 2013, 1037, 2313, 2008, 8327, 17337, 17534, 5248, 1025, 2174, 1010, 2023, 2051, 2057, 2944, 6074, 1005, 7226, 8310, 3495, 1010, 2738, 2084, 11643, 2037, 26004, 2015, 1998, 2059, 11243, 2019, 14442, 5656, 1012, 102, 101, 2057, 2059, 9611, 1996, 4525, 2309, 1011, 4005, 3247, 3291, 2000, 2424, 1037, 17534, 5656, 2008, 25845, 2015, 3517, 3477, 7245, 1012, 102, 101, 2057, 2071, 2036, 2224, 1037, 23895, 1011, 4083, 3921, 1010, 2073, 2057, 3613, 2000, 4553, 1996, 17534, 5248, 1997, 2060, 7226, 13375, 2096, 8019, 1999, 1996, 10470, 2015, 1012, 102, 101, 2023, 3259, 2515, 2025, 3535, 2000, 5454, 2090, 2122, 2048, 8107, 1025, 2009, 2003, 2256, 5448, 2008, 2169, 2038, 13100, 2005, 2029, 2009, 2003, 1996, 2087, 6413, 1012, 102, 101, 1996, 2590, 2391, 2003, 2008, 7539, 1997, 2029, 3921, 2057, 11322, 2000, 2202, 1010, 2057, 2024, 4320, 2007, 1996, 4942, 21572, 3468, 2213, 1997, 9765, 22835, 2048, 20611, 2013, 1996, 17534, 2381, 1997, 2627, 10470, 2015, 1024, 1996, 4353, 2006, 1996, 2193, 1997, 7226, 13375, 1010, 1998, 1996, 4353, 1997, 7226, 8310, 1006, 2005, 3247, 14833, 13465, 2594, 102, 101, 2009, 2453, 4025, 2008, 2045, 2003, 2200, 2210, 2187, 2000, 2360, 2006, 2023, 8476, 1024, 2057, 4553, 1996, 20611, 1997, 3037, 2013, 3439, 2951, 1998, 2059, 24134, 1037, 17534, 5656, 2241, 2006, 2008, 2592, 2005, 1996, 2783, 10470, 1012, 102, 101, 2174, 1010, 17534, 15215, 2411, 23087, 18168, 4183, 7882, 2592, 1012, 102, 101, 2005, 2742, 1010, 1999, 10203, 7226, 10470, 2015, 1010, 1996, 10470, 11510, 2089, 5454, 2025, 2000, 7487, 1996, 7226, 8310, 3272, 1996, 3976, 1996, 3453, 12778, 1012, 102, 101, 2019, 2394, 10470, 2003, 3030, 2043, 2045, 2003, 2069, 2028, 3161, 7226, 4063, 2187, 1006, 1045, 29625, 2063, 29625, 1010, 2043, 1996, 2117, 1011, 3284, 7226, 4063, 9010, 2041, 1007, 1010, 3574, 2008, 1996, 26004, 1997, 1996, 3284, 7226, 4063, 2003, 2025, 3936, 1012, 102, 101, 2129, 2064, 2057, 4553, 26004, 20611, 2043, 1996, 2951, 2800, 2000, 2149, 2003, 25352, 1999, 2023, 2126, 1029, 102, 101, 2005, 5509, 2791, 1010, 1999, 2023, 3259, 2057, 3579, 2006, 1037, 2309, 5884, 1025, 2174, 1010, 2256, 5461, 2024, 13644, 12711, 1012, 102, 101, 2182, 2057, 5136, 25582, 2394, 10470, 2015, 1999, 2029, 1037, 2440, 17534, 2381, 2003, 3936, 1010, 2107, 2004, 1996, 3784, 10470, 2015, 2448, 2011, 1041, 15907, 1012, 102, 101, 2057, 2024, 2947, 4986, 2007, 2048, 7957, 1997, 4394, 2592, 1012, 102, 101, 2034, 1010, 2070, 7226, 13375, 2089, 2272, 2000, 1996, 10470, 2043, 2009, 2003, 2525, 1999, 5082, 1010, 2424, 2008, 1996, 2783, 3976, 2525, 23651, 2037, 26004, 1010, 1998, 2681, 2302, 6885, 1037, 7226, 1012, 102, 101, 2117, 1010, 1996, 3815, 1996, 3453, 2001, 5627, 2000, 3477, 2003, 2196, 3936, 29625, 23773, 28741, 2290, 2122, 4216, 1997, 13827, 2052, 2599, 2000, 3532, 10035, 1997, 1996, 10318, 26004, 4353, 1012, 102, 101, 2057, 16599, 1037, 3117, 4083, 3921, 2241, 2006, 1996, 17626, 20446, 3989, 1006, 7861, 1007, 9896, 1010, 2029, 2009, 25284, 2135, 19421, 5023, 20723, 8335, 2007, 1996, 5159, 20723, 1010, 1998, 2059, 24134, 2015, 4555, 1011, 16593, 24155, 2015, 1997, 1996, 26004, 4353, 2241, 2006, 1996, 2949, 2275, 1997, 20723, 1012, 102, 101, 6195, 2119, 12553, 2951, 1006, 1999, 2029, 2995, 26004, 20611, 2024, 2124, 1007, 1998, 2613, 1011, 2088, 2951, 2013, 1041, 15907, 1010, 2057, 2265, 2008, 2256, 3921, 2041, 4842, 22694, 2062, 19647, 4353, 24155, 5461, 2029, 2079, 2025, 3535, 2000, 4070, 2005, 2023, 4394, 2951, 29625, 10760, 2717, 1997, 1996, 3259, 2003, 4114, 2004, 4076, 102, 101, 2930, 1016, 13999, 2256, 10470, 4292, 1998, 5577, 2256, 11416, 6024, 4013, 3676, 27965, 4588, 2944, 2005, 1996, 17534, 2832, 1012, 102, 101, 2930, 1017, 7679, 2006, 1996, 24155, 3291, 1010, 1998, 5577, 2256, 7861, 4083, 3921, 1012, 102, 101, 2930, 1018, 15841, 1996, 22334, 1997, 1996, 15502, 5656, 2104, 1996, 3247, 14833, 13465, 2594, 3921, 1012, 102, 101, 1999, 2930, 1019, 2057, 2556, 6388, 3463, 2006, 12553, 2951, 4520, 2004, 2092, 2004, 2006, 2951, 5067, 2013, 1041, 15907, 1010, 2029, 2265, 2008, 2256, 7861, 4083, 3921, 3084, 2488, 10035, 1997, 1996, 20611, 1010, 1998, 4152, 2062, 3477, 7245, 2104, 1996, 3247, 14833, 13465, 2594, 2944, 1010, 2004, 4102, 2000, 1996, 19647, 3921, 102, 101, 3784, 10470, 2015, 2556, 4310, 7860, 2000, 6074, 2667, 2000, 10197, 1996, 10318, 26004, 20611, 1010, 2138, 2057, 2079, 2025, 2131, 2000, 11949, 1996, 2995, 2193, 1997, 4022, 7226, 13375, 1010, 2612, 2057, 2069, 2156, 1996, 7226, 13375, 2008, 2038, 2787, 2000, 2191, 1037, 7226, 1025, 6168, 1999, 2019, 10470, 2160, 4044, 1010, 102, 101, 2087, 3784, 10470, 2015, 13367, 2024, 2394, 10470, 2015, 1010, 2029, 2024, 22316, 1011, 3976, 10470, 2015, 2076, 2029, 7226, 13375, 5333, 1996, 2783, 3976, 2504, 2127, 2069, 2028, 7226, 4063, 2003, 5627, 2000, 3477, 1996, 2783, 3976, 2005, 1996, 8875, 29625, 2378, 2023, 3259, 2057, 17908, 3784, 2394, 10470, 2015, 2004, 7528, 2011, 1041, 15907, 1012, 102, 101, 2060, 10470, 4573, 1005, 3513, 2024, 2714, 2000, 1041, 15907, 1005, 2015, 1012, 102, 101, 2028, 2691, 3444, 1997, 3784, 10470, 4573, 2164, 1041, 15907, 2003, 1996, 24540, 17534, 2291, 1010, 2029, 4473, 7226, 13375, 2000, 4607, 2037, 4555, 19732, 2000, 3477, 2004, 24540, 20723, 1012, 102, 101, 1996, 24540, 17534, 2291, 2097, 2059, 2191, 1996, 20723, 8073, 2005, 1996, 7226, 4063, 1010, 2039, 2000, 1996, 9675, 3815, 1997, 1996, 24540, 7226, 1015, 1012, 102, 101, 2169, 1041, 15907, 10470, 2038, 1037, 4964, 5494, 2051, 1025, 2043, 1996, 10470, 14572, 1010, 1996, 3284, 7226, 4063, 2003, 4161, 1996, 3453, 1997, 1996, 10470, 29625, 8545, 2085, 2556, 1037, 11416, 6024, 2944, 2005, 1996, 17534, 2832, 1997, 2019, 1041, 15907, 10470, 1010, 2029, 5577, 2129, 1996, 4022, 20723, 2024, 7013, 1010, 2029, 1997, 2068, 102, 101, 2045, 2024, 1049, 4022, 7226, 13375, 4699, 1999, 1037, 3056, 1041, 15907, 10470, 1997, 1037, 2309, 8875, 1012, 102, 101, 2057, 7868, 2008, 7226, 13375, 2031, 2981, 2797, 5300, 1006, 12997, 2615, 1007, 1012, 102, 101, 2057, 7868, 2008, 1049, 2003, 4567, 2013, 1037, 16246, 4353, 1043, 1006, 1049, 1007, 2007, 2490, 1031, 1016, 1010, 1601, 1007, 1012, 102, 101, 7226, 13375, 1005, 4022, 20723, 2024, 9174, 4567, 2013, 1037, 7142, 4353, 1042, 1006, 1060, 1007, 1012, 102, 101, 1037, 3247, 14833, 13465, 2594, 4005, 1005, 2015, 4708, 2003, 2000, 10197, 1042, 1006, 1060, 1007, 1998, 1043, 1006, 1049, 1007, 1998, 2224, 1996, 4358, 20611, 2000, 24134, 2019, 15502, 17534, 5656, 1012, 102, 101, 2065, 2057, 2612, 2024, 2478, 1996, 2208, 14833, 13465, 2594, 3921, 1010, 2057, 2024, 4699, 1999, 1996, 7226, 13375, 1005, 26004, 2015, 1012, 102, 101, 1999, 2008, 2553, 2057, 2052, 2224, 1037, 3621, 2367, 2944, 1010, 2073, 7226, 13375, 1005, 26004, 2015, 2024, 9174, 4567, 2013, 1037, 4353, 1042, 1006, 1058, 1007, 1010, 1998, 2169, 7226, 4063, 20723, 2429, 2000, 1037, 2124, 3016, 2229, 1011, 10594, 14442, 1012, 102, 101, 2256, 2208, 14833, 13465, 2594, 4005, 1005, 2015, 4708, 2003, 2059, 2000, 10197, 1042, 1006, 1058, 1007, 1998, 1043, 1006, 1049, 1007, 1012, 102, 101, 1996, 1049, 4022, 7226, 13375, 12040, 2037, 4022, 20723, 1999, 1037, 25582, 2344, 1012, 102, 101, 2043, 1037, 24540, 7226, 2003, 7864, 1010, 1041, 15907, 22963, 2009, 2000, 1996, 2783, 3976, 2504, 1010, 2029, 2003, 1996, 2117, 1011, 3284, 24540, 7226, 2061, 2521, 4606, 1037, 2235, 7226, 4297, 28578, 4765, 1012, 102, 101, 2005, 17839, 1010, 1999, 2023, 3259, 2057, 8568, 2023, 2235, 4297, 28578, 4765, 1998, 7868, 2008, 1996, 2783, 3976, 2504, 2003, 1996, 2117, 1011, 3284, 24540, 7226, 2061, 2521, 1012, 102, 101, 2065, 1996, 7864, 7226, 2003, 2053, 3618, 2084, 1996, 2783, 3976, 2504, 1010, 1996, 7226, 2003, 3333, 1998, 2498, 2003, 5159, 1012, 102, 101, 2065, 1996, 7864, 7226, 2003, 3020, 2084, 1996, 2783, 3976, 2504, 2021, 2896, 2084, 1996, 3284, 24540, 7226, 2061, 2521, 1010, 2059, 1996, 3976, 2504, 2003, 3445, 2000, 5020, 1996, 7864, 7226, 1012, 102, 101, 2065, 1996, 7864, 7226, 2003, 3020, 2084, 1996, 3025, 3284, 7226, 1010, 2059, 1996, 3976, 2504, 2003, 3445, 2000, 5020, 1996, 3025, 3284, 7226, 1012, 102, 101, 2012, 1996, 2203, 1997, 1996, 10470, 1010, 1996, 8875, 2003, 3018, 2000, 1996, 7226, 4063, 2040, 2872, 1996, 3284, 7226, 1010, 1998, 1996, 2345, 3976, 2504, 2097, 2022, 5020, 2000, 1996, 2117, 3284, 7226, 29625, 8162, 2944, 1997, 1996, 17534, 2832, 2003, 3243, 2236, 1012, 102, 101, 5060, 2008, 2043, 1037, 7226, 4063, 24451, 2008, 1996, 3976, 2504, 2003, 3020, 2084, 2014, 4022, 7226, 1010, 2016, 2089, 5630, 2025, 2000, 7226, 1999, 2023, 10470, 1012, 102, 101, 2023, 2003, 5662, 2000, 2256, 2944, 1999, 2029, 2016, 2467, 12040, 2015, 1996, 7226, 1010, 2138, 3333, 20723, 2079, 2025, 3711, 1999, 1996, 17534, 2381, 1012, 102, 101, 2036, 2256, 2944, 4472, 1996, 2553, 1997, 2197, 1011, 3371, 17534, 1010, 2029, 6433, 3243, 2411, 1999, 1041, 15907, 10470, 2015, 1031, 2184, 1033, 1024, 2130, 2295, 2197, 1011, 3371, 20723, 2089, 2022, 7864, 2471, 7453, 1010, 1041, 15907, 6194, 1996, 20723, 1999, 5537, 29625, 24415, 1996, 24540, 17534, 2291, 1010, 1998, 2043, 6074, 2031, 102, 101, 2174, 1010, 1999, 3218, 1041, 15907, 7226, 13375, 3243, 2411, 2191, 3674, 20723, 1999, 2028, 10470, 1012, 102, 101, 2028, 2825, 14354, 1997, 2122, 20723, 2003, 2000, 7487, 2062, 2592, 2055, 1996, 24540, 7226, 1997, 1996, 2783, 2152, 7226, 4063, 1031, 2340, 1033, 1012, 102, 101, 2174, 1010, 2069, 1996, 2197, 7226, 1997, 1996, 7226, 4063, 5836, 2014, 19732, 2000, 3477, 1012, 102, 101, 2445, 1037, 7226, 4063, 1005, 2015, 2197, 7226, 1010, 2014, 3041, 20723, 4287, 2053, 4469, 2592, 1012, 102, 101, 3568, 1010, 2057, 2097, 2022, 4699, 1999, 2069, 1996, 2197, 7226, 2013, 2169, 7226, 4063, 1016, 1012, 102, 101, 2057, 2064, 17463, 3217, 9623, 2015, 1996, 17534, 15215, 2011, 9268, 2035, 20723, 3272, 1996, 2197, 20723, 2013, 2169, 7226, 4063, 1010, 2302, 3974, 2172, 2592, 1012, 102, 101, 2445, 1996, 2944, 1997, 1996, 17534, 2832, 1010, 1996, 2034, 4708, 1997, 2256, 17534, 4005, 2003, 2000, 10197, 1996, 20611, 1042, 1006, 1060, 1007, 1998, 1043, 1006, 1049, 1007, 2013, 1996, 17534, 2381, 1012, 102, 101, 6814, 2057, 2031, 3229, 2000, 1996, 17534, 2381, 1997, 1047, 10470, 2015, 1997, 1996, 2168, 8875, 1012, 102, 101, 2028, 3722, 3921, 2003, 2000, 8568, 1996, 4394, 20723, 1010, 1998, 3046, 2000, 3495, 10197, 1042, 1006, 1060, 1007, 1998, 1043, 1006, 1049, 1007, 2013, 5159, 2951, 1012, 102, 101, 1996, 5159, 2193, 1997, 7226, 13375, 1010, 1050, 1010, 2003, 2109, 2000, 10197, 1043, 1006, 1049, 1007, 1012, 102, 101, 2000, 10197, 1042, 1006, 1060, 1007, 2057, 2224, 1996, 5159, 20723, 1060, 1058, 1010, 2029, 3774, 1997, 1006, 1050, 1597, 1015, 1007, 20723, 2005, 2169, 10470, 1010, 2144, 1996, 20723, 1997, 1996, 3284, 7226, 13375, 2024, 4394, 1012, 102, 101, 2023, 3921, 1998, 2049, 8358, 2031, 2042, 2109, 1999, 1041, 29625, 2290, 29625, 1031, 1017, 1010, 1019, 1010, 1021, 1033, 1012, 102, 101, 2057, 2052, 2066, 2000, 2031, 2019, 24155, 5656, 2008, 6115, 2005, 1996, 4394, 2951, 1998, 2151, 13827, 3107, 2011, 2049, 6438, 1012, 102, 101, 2292, 2149, 19090, 1996, 5023, 20723, 2011, 1060, 1044, 1012, 102, 101, 2429, 2000, 2256, 2944, 1010, 2045, 2024, 2048, 4127, 1997, 4394, 20723, 1024, 1015, 1012, 102, 101, 1996, 3284, 7226, 1997, 2169, 10470, 1060, 7632, 1012, 2475, 1012, 102, 101, 1996, 3333, 20723, 1060, 1040, 2008, 2024, 2025, 5159, 2349, 2000, 2108, 2896, 2084, 1996, 2783, 3976, 1012, 102, 101, 2144, 2045, 2024, 1049, 4022, 7226, 13375, 1999, 2561, 1010, 1006, 1050, 1597, 1015, 1007, 20723, 2024, 5710, 1010, 1998, 2028, 7226, 2003, 1996, 3284, 7226, 1060, 7632, 1010, 2045, 2024, 1006, 1049, 1597, 1050, 1007, 3333, 20723, 1999, 1060, 1040, 1012, 102, 101, 6814, 1042, 1006, 1060, 1007, 7460, 2000, 1037, 2465, 1997, 20611, 16381, 3550, 2011, 1162, 1024, 1042, 1006, 1060, 1064, 1162, 1007, 1010, 1998, 1043, 1006, 1049, 1007, 7460, 2000, 1037, 2465, 1997, 20611, 16381, 3550, 2011, 1165, 1024, 1043, 1006, 1049, 1064, 1165, 1007, 1012, 102, 101, 2057, 2215, 2000, 2424, 1996, 4555, 16593, 10035, 1997, 1162, 1998, 1165, 1010, 2445, 1996, 5159, 2951, 1060, 1058, 1012, 102, 101, 6814, 2008, 2057, 2071, 2941, 11949, 1996, 5023, 20723, 1060, 1044, 2004, 2092, 2004, 1060, 1058, 1012, 102, 101, 2059, 9765, 22835, 1162, 1998, 1165, 2013, 1996, 2949, 2951, 2275, 1006, 1060, 1058, 1010, 1060, 1044, 1007, 2052, 2022, 1037, 2172, 6082, 4708, 1012, 102, 101, 6854, 2057, 2079, 2025, 2031, 1060, 1044, 1012, 102, 101, 2445, 1060, 1058, 1010, 1998, 2007, 1996, 3716, 1997, 1996, 17534, 2832, 1010, 2057, 2064, 9699, 1060, 1044, 2065, 2057, 2113, 1162, 1998, 1165, 1012, 102, 101, 6854, 2057, 2079, 2025, 2113, 1162, 1998, 1165, 29625, 2050, 2759, 5656, 2005, 4083, 2023, 2785, 1997, 2944, 2007, 4394, 2951, 2003, 1996, 17626, 20446, 3989, 1006, 7861, 1007, 9896, 1012, 102, 101, 7861, 2003, 2019, 2009, 25284, 7709, 2008, 6585, 2015, 2090, 1041, 4084, 2029, 9699, 1996, 4394, 2951, 2445, 2783, 10035, 2005, 1996, 11709, 1998, 1049, 4084, 2029, 24134, 1996, 4555, 16593, 1006, 2030, 4555, 1037, 15219, 2072, 1007, 10035, 2005, 1996, 11709, 2241, 2006, 1996, 2949, 2951, 1010, 2029, 3774, 1997, 1996, 5159, 102, 101, 1996, 9897, 1999, 8522, 1006, 1015, 1007, 2003, 3227, 26721, 23576, 2005, 2023, 3375, 17534, 2832, 1012, 102, 101, 2612, 1010, 2057, 2064, 24134, 1037, 10125, 9758, 20167, 1997, 1996, 9897, 1024, 2057, 4009, 1050, 8168, 2013, 1996, 4353, 1052, 1006, 1060, 1044, 1064, 1060, 1058, 1010, 1162, 1006, 2214, 1007, 1010, 1165, 1006, 2214, 1007, 1007, 1010, 1998, 15796, 1996, 9897, 2011, 1037, 2235, 7680, 2058, 1996, 8168, 102, 101, 4162, 2000, 2256, 2944, 1010, 1999, 2169, 1041, 3357, 2256, 4708, 2003, 2000, 9699, 8168, 2013, 1996, 4353, 1052, 1006, 1060, 1044, 1064, 1060, 1058, 1010, 1162, 1006, 2214, 1007, 1010, 1165, 1006, 2214, 1007, 1007, 1012, 102, 101, 9131, 2008, 1060, 1044, 3774, 1997, 1996, 3284, 7226, 1060, 7632, 1998, 1996, 3333, 20723, 1060, 1040, 1012, 102, 101, 2445, 1162, 1006, 2214, 1007, 1998, 1996, 2117, 3284, 7226, 1006, 2029, 2003, 5159, 1007, 1010, 1996, 3284, 7226, 1060, 7632, 2064, 4089, 2022, 18925, 2013, 1996, 4353, 1042, 1006, 1060, 1064, 1162, 1006, 2214, 1007, 1007, 25449, 2012, 1996, 2117, 3284, 7226, 1012, 102, 101, 16227, 1996, 3333, 20723, 1060, 1040, 2003, 1037, 2062, 3697, 4708, 1012, 102, 101, 2057, 2224, 1996, 2206, 7709, 1010, 2029, 2003, 2241, 2006, 21934, 10924, 1996, 17534, 2832, 1024, 1015, 1012, 102, 101, 7099, 1049, 2013, 1043, 1006, 1049, 1064, 1165, 1006, 2214, 1007, 1007, 1012, 2475, 1012, 102, 101, 2065, 1049, 1026, 1050, 1010, 15454, 1996, 7099, 1998, 2175, 2067, 2000, 3357, 1015, 29625, 2509, 1012, 102, 101, 26633, 1996, 17534, 2832, 2478, 1060, 1058, 1998, 1049, 1597, 1050, 3333, 20723, 1024, 1006, 1037, 1007, 8385, 4009, 1037, 7099, 7226, 2013, 1042, 1006, 1060, 1064, 1162, 1006, 2214, 1007, 1007, 1010, 1998, 12826, 2009, 2000, 1996, 2783, 3976, 2504, 1012, 102, 101, 2065, 2009, 2003, 2896, 2084, 1996, 3976, 2504, 1010, 5587, 1996, 7226, 2000, 1996, 2275, 1997, 3333, 20723, 1060, 1040, 1012, 102, 101, 4728, 1010, 1996, 2783, 3976, 2504, 2003, 3445, 2000, 1996, 2279, 5710, 7226, 2013, 1060, 1058, 1012, 102, 101, 1006, 1038, 1007, 2065, 1996, 2193, 1997, 20723, 1999, 1060, 1040, 23651, 1049, 1597, 1050, 1010, 2030, 2065, 2057, 2109, 2039, 2035, 1996, 20723, 1999, 1060, 1058, 2077, 2057, 2031, 1049, 1597, 1050, 3333, 20723, 1999, 1060, 1040, 1010, 2057, 15454, 2023, 7099, 1998, 2175, 2067, 2000, 3357, 1015, 1012, 102, 101, 2069, 2043, 2057, 2109, 2039, 2035, 20723, 1999, 1060, 1058, 1998, 2057, 2031, 1049, 1597, 1050, 20723, 1999, 1060, 1040, 1010, 2079, 2057, 5138, 1996, 7099, 1997, 1060, 1040, 1012, 2549, 1012, 102, 101, 9377, 2127, 2057, 2031, 7013, 1050, 8168, 1997, 1060, 1040, 1012, 102, 101, 2256, 4708, 2012, 2169, 1049, 3357, 2003, 2000, 24134, 1996, 4555, 16593, 1006, 19875, 1007, 10035, 1997, 1165, 1998, 1162, 2013, 1060, 1058, 1998, 1996, 7013, 8168, 1997, 1060, 1044, 1012, 102, 101, 2005, 2116, 3115, 11498, 12589, 2155, 1997, 20611, 1010, 2045, 2024, 17826, 7300, 2005, 1996, 19875, 10035, 1012, 102, 101, 2065, 17826, 7300, 2515, 2025, 4839, 2057, 2064, 2224, 15973, 20600, 4725, 2107, 2004, 23599, 4776, 21682, 1012, 102, 101, 1996, 7861, 9896, 28790, 2043, 1165, 1998, 1162, 28314, 2015, 1012, 102, 101, 1999, 2930, 1016, 1998, 1017, 2057, 3591, 1037, 2944, 1997, 1996, 17534, 2832, 2005, 1037, 2309, 10470, 1010, 1998, 3818, 4725, 2000, 10197, 1996, 20611, 1997, 20723, 1998, 2193, 1997, 7226, 13375, 1999, 2019, 10470, 1012, 102, 101, 2021, 2256, 2147, 2003, 2025, 2589, 2664, 1024, 2129, 2079, 2057, 2191, 2224, 1997, 1996, 4358, 20611, 2000, 24134, 1037, 17534, 5656, 1029, 102, 101, 2065, 2057, 2069, 5589, 1999, 2028, 2394, 10470, 1010, 2104, 1996, 12997, 2615, 2944, 2009, 2003, 1037, 7444, 5656, 2000, 7226, 2039, 2000, 2256, 26004, 1997, 1996, 8875, 1010, 1998, 2057, 2079, 2025, 2130, 2342, 2000, 10197, 1996, 20611, 1012, 102, 101, 2174, 2065, 2057, 2024, 4699, 1999, 9343, 2013, 3674, 10470, 2015, 1010, 2204, 10035, 1997, 1996, 20611, 1042, 1006, 1060, 1007, 1998, 1043, 1006, 1049, 1007, 2003, 6827, 1999, 9798, 1037, 2204, 17534, 5656, 29625, 2378, 2023, 2930, 2057, 4503, 1037, 3247, 14833, 13465, 2594, 17534, 4005, 2005, 10713, 2135, 5567, 10470, 2015, 1012, 102, 101, 2057, 5454, 2023, 4292, 2138, 2009, 2003, 1037, 7199, 8321, 2944, 1997, 1996, 3247, 14833, 13465, 2594, 3291, 2057, 2052, 2227, 2043, 2057, 2215, 2000, 4965, 2028, 8875, 2013, 2019, 3784, 10470, 2609, 1012, 102, 101, 2256, 24155, 9896, 2064, 4089, 2022, 4162, 2000, 2062, 3375, 3247, 14833, 13465, 2594, 4275, 2107, 2004, 10709, 9154, 4275, 2007, 19575, 5876, 1010, 1998, 22863, 23207, 4818, 26004, 4275, 1010, 2004, 2092, 2004, 2208, 1011, 14833, 13465, 2594, 17534, 4275, 1012, 102, 101, 6814, 2057, 2069, 2215, 2000, 4965, 2028, 8875, 1010, 2360, 1037, 9160, 2013, 1041, 15907, 1010, 2073, 3674, 10470, 2015, 1997, 2714, 9160, 3001, 2024, 2218, 5570, 1012, 102, 101, 2065, 2057, 5147, 2663, 2028, 8875, 1010, 2256, 9710, 2097, 2022, 5020, 2000, 2256, 26004, 2005, 1996, 8875, 15718, 1996, 3976, 2057, 3477, 1012, 102, 101, 2061, 2256, 17534, 4005, 1005, 2015, 4708, 2003, 2000, 24134, 1037, 17534, 5656, 2008, 2097, 25845, 2023, 9710, 1012, 102, 101, 2057, 2024, 2069, 4699, 1999, 1996, 2279, 1047, 10470, 2015, 2044, 2057, 3369, 2012, 1996, 10470, 2609, 1012, 102, 101, 2028, 14354, 2005, 2107, 1037, 16840, 2003, 2008, 2788, 2057, 9544, 2000, 2031, 1996, 8875, 2574, 1010, 1045, 29625, 2063, 29625, 2057, 2079, 2025, 2215, 1996, 17534, 4005, 2000, 5247, 2205, 2172, 2051, 1999, 2344, 2000, 2131, 1996, 2190, 3066, 1012, 102, 101, 2065, 2057, 8246, 2000, 2663, 2019, 8875, 2013, 1996, 1047, 10470, 2015, 1010, 2057, 4558, 3037, 1997, 1996, 8875, 1998, 2681, 1996, 10470, 2609, 1010, 1998, 2256, 9710, 2003, 1014, 1012, 102, 101, 2019, 4522, 2944, 2052, 2022, 2008, 2057, 2071, 2175, 1998, 4965, 2019, 8875, 2013, 1037, 3573, 2044, 2057, 2681, 1996, 10470, 2609, 1010, 1999, 2029, 2553, 2057, 2052, 2131, 2070, 2060, 5377, 9710, 1012, 102, 101, 2070, 1997, 1996, 1047, 10470, 2015, 2089, 17702, 1999, 2051, 1010, 2021, 2144, 1041, 15907, 10470, 2015, 2031, 9384, 5494, 2335, 1010, 2023, 2064, 2022, 14440, 2004, 1037, 25582, 3247, 3291, 1010, 2073, 2256, 4005, 3084, 17534, 6567, 2157, 2077, 2169, 10470, 14572, 29625, 19172, 5677, 1996, 10470, 2015, 1015, 1012, 1012, 1012, 1047, 2429, 2000, 2037, 102, 101, 2292, 1058, 1046, 19090, 2256, 26004, 2005, 1996, 8875, 2013, 10470, 1046, 29625, 3602, 2008, 2023, 4473, 1996, 5167, 1999, 1996, 10470, 2015, 2000, 2022, 2512, 29624, 5178, 16778, 9289, 1012, 102, 101, 2292, 1038, 1046, 19090, 2256, 4005, 1005, 2015, 7226, 2005, 10470, 1046, 29625, 2292, 1057, 1046, 19090, 2256, 4005, 1005, 2015, 3517, 3477, 7245, 2013, 8019, 1999, 10470, 2015, 1046, 1012, 1012, 1012, 1047, 1010, 10262, 2057, 2106, 2025, 2663, 2077, 10470, 1046, 29625, 2292, 1057, 1047, 1009, 2487, 2022, 2256, 3477, 7245, 2065, 2057, 8246, 2000, 2663, 102, 101, 2005, 17839, 1010, 1999, 2023, 3259, 2057, 9375, 1057, 1047, 1009, 2487, 1027, 1014, 1012, 102, 101, 6814, 2005, 2169, 10470, 1046, 1010, 1996, 2193, 1997, 2060, 7226, 13375, 2003, 4567, 2013, 1043, 1046, 1006, 1049, 1007, 1998, 2169, 7226, 4063, 1005, 2015, 7226, 2003, 4567, 2013, 1042, 1046, 1006, 1060, 1007, 1012, 102, 101, 2144, 2169, 10470, 1046, 2003, 2019, 2394, 10470, 1010, 2069, 1996, 3284, 7226, 2013, 2060, 7226, 13375, 13531, 2256, 3477, 7245, 1012, 102, 101, 2292, 1042, 1015, 1046, 1006, 1060, 1007, 1998, 1042, 1015, 1046, 1006, 1060, 1007, 4414, 19090, 1996, 9723, 4304, 3853, 1998, 23260, 4304, 3853, 1006, 3729, 2546, 1007, 1997, 1996, 3284, 7226, 2013, 2060, 7226, 13375, 1999, 1996, 1046, 1011, 16215, 10470, 29625, 10760, 2078, 1042, 1015, 1046, 1006, 1060, 1007, 1027, 1601, 1049, 1027, 102, 101, 2085, 1057, 1046, 2064, 2022, 5228, 2004, 1996, 2206, 3853, 1997, 1996, 2925, 20723, 1038, 1046, 1024, 1047, 1027, 1006, 1038, 1046, 1010, 1012, 1012, 1012, 1010, 1038, 1047, 1007, 1998, 26004, 2015, 1058, 1046, 1024, 1047, 1027, 1006, 1058, 1046, 1010, 1012, 1012, 1012, 1010, 1058, 1047, 1007, 1024, 1057, 102, 101, 2292, 1057, 1008, 1046, 1006, 1058, 1046, 1024, 1047, 1007, 19090, 1996, 3517, 3477, 7245, 2104, 15502, 5656, 1038, 1008, 1046, 1024, 1047, 1012, 102, 101, 2057, 2064, 23569, 27605, 4371, 1057, 1046, 2013, 1996, 1047, 1011, 16215, 10470, 2000, 1996, 2034, 2028, 1010, 1999, 1037, 5450, 2714, 2000, 8848, 15946, 1012, 102, 101, 2011, 13729, 1996, 2034, 1011, 2344, 3785, 1997, 1057, 1046, 1010, 2057, 6855, 1996, 15502, 17534, 5656, 1024, 1038, 1008, 1046, 1027, 1058, 1046, 1597, 1057, 1008, 1046, 1009, 2487, 1006, 1058, 1046, 1009, 2487, 1024, 1047, 1007, 1006, 1018, 1007, 1999, 2060, 2616, 1010, 2256, 4005, 2323, 8703, 2014, 20723, 2011, 102, 101, 1996, 22334, 1997, 1996, 15502, 17534, 9942, 5942, 1996, 22334, 1997, 1996, 3517, 3477, 27475, 1057, 1008, 1046, 1010, 2029, 7336, 2019, 9897, 2058, 1996, 4353, 1042, 1015, 1046, 1006, 1060, 1007, 1012, 102, 101, 1999, 2236, 2023, 2064, 2025, 2022, 2589, 17826, 2135, 1010, 2021, 2057, 2064, 24134, 2049, 10125, 9758, 20167, 2065, 2057, 2064, 7099, 2013, 1042, 1015, 1046, 1006, 1060, 1007, 1012, 102, 101, 2065, 2057, 2064, 7099, 2013, 1042, 1046, 1006, 1060, 1007, 1998, 1043, 1046, 1006, 1049, 1007, 1010, 2057, 2064, 2224, 1996, 2206, 19647, 7709, 2000, 9699, 1037, 7099, 2013, 1042, 1015, 1046, 1006, 1060, 1007, 1024, 2034, 4009, 1049, 2013, 1043, 1046, 1006, 1049, 1007, 1010, 2059, 4009, 1049, 8168, 102, 101, 2004, 1037, 2765, 1010, 1996, 24806, 17534, 5656, 2323, 2022, 3517, 2000, 6162, 2625, 2084, 1996, 15502, 3517, 3477, 7245, 1012, 102, 101, 2174, 1010, 2009, 2003, 9608, 2000, 2228, 2008, 2488, 10035, 1997, 1042, 1006, 1060, 1007, 1998, 1043, 1006, 1049, 1007, 2323, 2507, 17534, 9942, 2007, 3020, 3517, 3477, 27475, 1012, 102, 101, 2023, 2003, 4484, 1999, 2256, 7885, 2408, 1037, 2898, 2846, 1997, 2951, 4520, 1010, 2029, 2057, 6848, 1999, 2930, 1019, 1012, 102, 101, 2061, 2521, 2057, 2031, 2042, 9765, 22835, 1996, 4353, 1997, 1996, 3284, 7226, 1042, 1015, 1006, 1060, 1007, 2478, 1042, 1006, 1060, 1007, 1998, 1043, 1006, 1049, 1007, 1012, 102, 101, 1999, 3218, 1010, 2057, 2411, 11949, 2070, 2220, 17534, 4023, 2011, 2060, 7226, 13375, 1999, 10470, 2015, 1046, 1009, 1015, 1010, 1012, 1012, 1012, 1010, 1047, 2077, 2057, 2031, 2000, 2191, 1037, 7226, 2006, 10470, 1046, 1012, 102, 101, 2023, 4473, 2149, 2000, 2191, 2130, 2062, 6727, 10035, 2006, 1042, 1015, 1006, 1060, 1007, 1010, 2241, 2006, 1042, 1006, 1060, 1007, 1010, 1043, 1006, 1049, 1007, 1998, 1996, 5159, 20723, 1012, 102, 101, 6814, 2057, 2031, 5159, 1050, 1597, 1015, 2220, 20723, 1010, 19537, 2011, 1060, 1058, 1025, 1996, 2783, 3284, 7226, 1060, 7632, 2003, 2025, 3936, 1006, 2021, 2064, 2022, 18925, 2013, 1042, 1006, 1060, 1007, 25449, 2012, 1996, 2783, 3976, 1007, 1012, 102, 101, 2144, 1996, 10470, 2003, 2025, 2058, 1010, 2045, 2071, 2022, 2070, 2275, 1997, 2925, 20723, 1060, 2925, 1012, 102, 101, 2043, 1996, 10470, 14572, 1010, 1996, 3284, 7226, 2013, 1996, 2060, 7226, 13375, 2097, 2022, 4098, 1063, 1060, 7632, 1010, 1060, 2925, 1065, 1012, 102, 101, 2057, 2064, 9699, 1060, 2925, 2065, 2057, 2113, 1996, 2193, 1997, 2925, 20723, 1012, 102, 101, 2057, 2113, 1996, 2561, 2193, 1997, 20723, 1049, 2003, 4567, 2013, 1043, 1006, 1049, 1007, 1010, 1998, 1996, 2193, 1997, 20723, 2081, 2061, 2521, 2003, 1050, 1009, 1064, 1060, 1040, 1064, 1010, 2073, 1060, 1040, 2024, 1996, 3333, 20723, 2061, 2521, 1010, 2061, 1996, 2193, 1997, 2925, 20723, 2003, 1049, 102, 101, 2085, 2057, 2031, 1037, 7709, 2008, 8168, 2013, 1042, 1015, 1006, 1060, 1007, 1024, 1015, 1012, 102, 101, 26633, 1996, 10470, 2478, 2256, 2944, 1999, 2930, 1016, 2000, 9699, 1060, 1040, 1010, 1996, 3333, 20723, 2061, 2521, 1012, 2475, 1012, 102, 101, 7099, 1996, 2561, 2193, 1997, 20723, 1049, 2013, 1043, 1006, 1049, 1007, 1012, 102, 101, 2057, 16330, 2119, 2256, 7861, 4083, 3921, 1998, 1996, 3722, 3921, 2006, 2195, 12553, 2951, 4520, 1998, 2006, 2613, 2088, 2951, 5067, 2013, 1041, 15907, 1012, 102, 101, 2005, 2169, 2951, 2275, 1010, 2119, 8107, 2020, 2109, 2000, 10197, 1996, 20611, 1997, 2193, 1997, 7226, 13375, 1998, 7226, 8310, 1010, 1998, 2122, 10035, 2020, 2059, 2109, 2000, 24134, 17534, 9942, 1998, 3517, 3477, 27475, 2104, 1996, 3247, 14833, 13465, 2594, 2944, 1997, 2930, 1018, 1012, 102, 101, 2057, 4102, 1996, 8107, 1999, 2048, 3971, 1024, 1015, 1012, 102, 101, 2029, 3921, 3957, 2488, 10035, 1997, 1996, 20611, 1042, 1006, 1060, 1007, 1010, 1043, 1006, 1049, 1007, 1998, 1042, 1015, 1006, 1060, 1007, 1029, 102, 101, 2023, 2003, 2590, 2138, 2488, 24155, 1997, 2122, 20611, 2323, 2507, 2488, 3463, 1010, 7539, 1997, 3251, 6074, 2202, 1037, 3247, 14833, 13465, 2594, 3921, 2030, 1037, 2208, 14833, 13465, 2594, 3921, 2000, 17534, 1012, 102, 101, 2057, 5468, 1996, 28398, 1997, 2019, 4358, 4353, 2000, 1996, 2995, 4353, 2478, 1996, 13970, 3363, 5963, 1011, 26947, 16213, 1006, 1047, 2140, 1007, 17856, 17905, 2013, 1996, 2995, 4353, 2000, 1996, 4358, 4353, 1012, 102, 101, 1996, 3760, 1996, 1047, 2140, 17856, 17905, 1010, 1996, 3553, 1996, 4358, 4353, 2000, 1996, 2995, 2028, 1012, 2475, 1012, 102, 101, 2029, 3921, 3957, 2488, 3517, 3477, 7245, 2104, 1996, 3247, 14833, 13465, 2594, 17534, 2944, 1017, 2004, 2649, 1999, 2930, 1018, 1029, 102, 101, 2256, 7885, 2265, 2008, 1996, 7861, 4083, 3921, 2041, 4842, 22694, 1996, 3722, 3921, 2006, 2119, 5919, 1010, 2408, 1037, 2898, 2846, 1997, 2951, 4520, 1012, 102, 101, 1999, 2023, 2930, 2057, 2556, 3463, 2006, 2176, 4387, 2951, 4520, 1024, 1528, 2951, 2275, 1015, 2038, 10470, 2015, 1997, 7235, 5167, 1010, 1998, 2057, 2113, 1996, 2155, 1997, 20611, 2008, 1042, 1006, 1060, 1007, 1998, 1043, 1006, 1049, 1007, 7141, 2000, 1012, 102, 101, 1528, 2951, 2275, 1016, 2038, 10470, 2015, 1997, 2512, 29624, 5178, 16778, 9289, 5167, 1010, 2021, 2057, 2113, 1996, 7226, 4353, 1042, 1006, 1060, 1007, 2003, 5105, 7399, 2135, 2011, 2019, 17961, 1037, 29625, 1528, 2951, 2275, 1017, 2038, 10470, 2015, 1997, 7235, 5167, 1010, 2021, 2057, 2079, 2025, 2113, 2054, 2785, 1997, 20611, 1042, 1006, 1060, 1007, 102, 101, 2057, 2224, 2512, 28689, 12589, 24155, 5461, 2000, 10197, 1996, 20611, 1012, 102, 101, 1528, 2951, 2275, 1018, 2003, 2613, 1011, 2088, 10470, 2951, 2006, 7235, 5167, 1010, 5067, 2013, 1041, 15907, 1012, 102, 101, 1999, 2023, 2951, 2275, 1010, 1996, 5167, 2006, 5096, 1999, 2035, 10470, 2015, 2024, 7235, 1010, 2061, 1996, 2193, 1997, 7226, 13375, 1998, 7226, 8310, 2272, 2013, 17337, 20611, 1043, 1006, 1049, 1007, 1998, 1042, 1006, 1060, 1007, 1012, 102, 101, 1042, 1006, 1060, 1007, 2003, 1037, 3671, 4353, 1050, 1006, 1018, 1010, 1017, 29625, 2629, 1007, 1012, 102, 101, 1043, 1006, 1049, 1007, 2003, 1037, 13433, 24077, 4353, 5429, 2000, 1996, 2157, 1024, 1043, 1006, 1049, 1597, 1016, 1007, 1027, 1052, 1006, 2871, 1007, 1010, 1045, 29625, 2063, 29625, 1996, 2193, 1997, 7226, 13375, 2003, 2467, 2012, 2560, 1016, 1012, 102, 101, 1996, 17534, 2381, 2003, 7013, 2478, 2256, 2944, 1997, 1996, 17534, 2832, 2004, 2649, 1999, 2930, 1016, 1012, 102, 101, 2169, 6013, 1997, 1996, 2951, 2275, 3774, 1997, 17534, 2381, 2013, 2871, 10470, 2015, 1012, 102, 101, 2057, 7013, 2321, 12107, 1997, 1996, 2951, 2275, 1012, 102, 101, 2119, 24155, 8107, 2024, 6727, 1997, 1996, 11498, 12589, 2945, 2013, 2029, 1042, 1006, 1060, 1007, 1998, 1043, 1006, 1049, 1007, 2024, 4567, 1025, 2037, 4708, 2003, 2000, 10197, 1996, 11709, 1997, 1996, 20611, 1010, 1006, 1085, 1010, 1173, 1007, 2005, 1042, 1006, 1060, 1007, 1998, 1165, 2005, 1043, 1006, 1049, 102, 101, 2012, 1996, 1049, 3357, 1997, 1996, 7861, 9896, 1010, 3115, 19875, 10035, 2005, 1085, 1010, 1173, 1010, 1998, 1165, 2024, 24806, 1010, 1045, 29625, 2063, 29625, 7099, 2812, 1997, 1996, 7226, 8310, 2005, 1085, 1010, 3115, 24353, 1997, 1996, 7226, 8310, 2005, 1173, 1010, 1998, 1996, 2812, 1997, 1996, 2193, 1997, 7226, 13375, 15718, 102, 101, 3275, 1015, 3065, 5171, 4358, 20611, 1018, 1998, 1996, 2995, 20611, 1012, 102, 101, 2057, 11949, 2008, 1996, 5436, 1997, 1996, 4358, 1042, 1006, 1060, 1007, 2011, 1996, 3722, 3921, 2003, 6022, 5429, 2000, 1996, 2157, 1997, 1996, 2995, 4353, 1010, 1045, 29625, 2063, 29625, 1996, 3722, 3921, 2058, 4355, 20592, 1042, 1006, 1060, 1007, 1012, 102, 101, 2057, 2031, 2036, 10174, 1047, 2140, 17856, 17905, 2015, 2013, 1996, 2995, 20611, 2000, 1996, 4358, 20611, 1010, 1998, 1996, 7861, 24155, 2015, 2031, 10862, 2896, 1047, 2140, 17856, 17905, 2015, 1012, 102, 101, 2023, 4489, 2001, 20119, 2000, 2022, 3278, 1010, 2478, 1996, 2512, 28689, 12589, 23926, 2239, 3696, 1011, 4635, 3231, 29625, 10760, 2078, 1010, 10035, 2013, 2119, 8107, 2024, 2109, 2000, 24134, 17534, 9942, 2005, 2019, 10470, 4044, 2007, 1022, 25582, 2135, 2218, 10470, 2015, 1997, 1996, 2168, 2785, 1997, 5167, 1010, 2478, 1996, 3247, 14833, 13465, 2594, 2944, 1012, 102, 101, 1996, 4005, 1005, 2015, 1000, 5025, 1000, 3517, 3477, 27475, 1057, 1015, 1006, 1038, 1010, 1058, 1007, 2104, 2122, 17534, 9942, 2024, 2059, 24806, 1010, 2478, 1996, 2995, 20611, 1012, 102, 101, 1996, 15502, 17534, 5656, 1998, 2049, 3517, 3477, 7245, 2024, 2036, 24806, 29625, 8162, 3463, 2265, 2008, 1996, 7861, 3921, 3957, 17534, 9942, 3553, 2000, 1996, 15502, 5656, 1010, 1998, 6162, 2015, 3020, 3517, 3477, 27475, 1010, 4102, 2000, 1996, 3722, 3921, 1012, 102, 101, 3275, 1015, 2038, 1037, 5436, 1997, 1996, 17534, 9942, 1999, 1996, 2034, 10470, 1010, 1998, 1037, 3482, 5436, 1997, 1996, 23161, 1010, 2029, 2003, 1996, 5966, 2090, 15502, 3517, 3477, 27475, 1998, 5025, 3517, 3477, 27475, 1012, 102, 101, 2013, 1996, 3482, 5436, 2057, 11949, 2008, 1996, 2812, 9038, 1997, 1996, 7861, 3921, 2003, 2172, 3760, 2084, 2008, 1997, 1996, 3722, 3921, 1012, 102, 101, 2057, 2036, 2109, 1996, 4358, 20611, 2006, 1996, 3247, 1011, 14833, 13465, 2594, 2944, 2007, 7704, 17534, 4023, 1010, 2004, 2649, 1999, 2930, 1018, 29625, 2475, 1012, 102, 101, 2153, 2256, 3463, 2265, 2008, 1996, 7861, 3921, 6162, 2015, 3020, 3517, 3477, 27475, 4102, 2000, 1996, 3722, 3921, 1012, 102, 101, 1999, 2256, 2117, 2951, 2275, 1010, 1996, 5167, 2006, 5096, 2024, 2025, 7235, 1025, 2612, 1996, 4353, 1997, 26004, 2015, 2024, 5105, 2011, 2019, 27885, 8043, 12423, 17961, 1037, 1012, 102, 101, 1999, 2023, 2951, 2275, 1996, 18642, 2003, 7399, 1024, 1042, 1006, 1060, 1064, 1037, 1007, 1027, 1050, 1006, 1015, 29625, 2487, 1037, 1009, 1015, 29625, 2692, 1010, 1017, 29625, 2629, 1007, 1012, 102, 101, 1043, 1006, 1049, 1007, 2003, 1037, 13433, 24077, 4353, 2004, 2077, 1024, 1043, 1006, 1049, 1597, 1016, 1007, 1027, 1052, 1006, 3486, 1007, 1012, 102, 101, 2005, 2169, 10470, 1010, 1037, 2003, 18925, 27423, 2013, 1996, 13483, 1031, 1017, 29623, 2683, 1033, 1012, 102, 101, 1999, 2060, 2616, 1010, 2023, 2951, 2275, 2003, 2714, 2000, 2951, 2275, 1015, 1010, 3272, 2008, 1996, 7226, 4353, 1042, 1006, 1060, 1007, 2003, 4567, 2013, 1037, 2367, 11498, 12589, 2155, 1012, 102, 101, 2119, 8107, 2085, 2224, 7399, 26237, 2000, 10197, 1996, 7399, 21374, 29625, 16098, 2378, 1010, 2256, 3463, 2265, 2008, 1996, 7861, 3921, 2041, 4842, 22694, 1996, 3722, 3921, 2005, 2023, 2951, 2275, 1010, 1999, 3408, 1997, 2049, 10035, 2005, 1042, 1006, 1060, 1007, 1998, 1043, 1006, 1049, 1007, 1012, 102, 101, 3275, 1016, 3065, 1996, 4358, 7399, 7189, 2090, 1996, 2812, 1997, 1042, 1006, 1060, 1064, 1037, 1007, 1998, 1037, 29625, 2013, 1996, 3275, 2057, 2064, 2156, 2008, 1996, 7861, 3921, 3957, 1037, 2172, 2488, 10197, 2000, 1996, 7399, 3853, 1012, 102, 101, 1996, 3722, 3921, 2153, 6022, 2058, 4355, 21499, 2015, 1996, 7226, 8310, 1012, 102, 101, 1999, 2755, 1996, 3722, 3921, 2038, 10862, 2058, 4355, 20592, 1042, 1006, 1060, 1007, 2005, 2035, 1996, 12553, 2951, 4520, 2057, 7718, 1012, 102, 101, 2023, 3065, 2008, 2445, 2256, 2944, 1997, 1996, 17534, 2832, 1010, 1996, 4358, 1042, 1006, 1060, 1007, 1997, 1996, 3722, 3921, 2003, 25352, 29625, 8545, 2059, 2109, 1996, 4358, 20611, 2000, 24134, 1037, 3247, 1011, 14833, 13465, 2594, 4005, 1005, 2015, 17534, 9942, 1998, 3517, 3477, 27475, 1997, 2019, 10470, 4044, 2007, 1022, 25582, 10470, 2015, 1010, 102, 101, 1996, 7861, 3921, 2036, 3957, 2488, 3517, 3477, 7245, 1010, 1996, 7778, 7784, 1997, 2029, 2003, 4484, 2011, 23926, 2239, 1005, 2015, 3696, 1011, 4635, 3231, 1012, 102, 101, 3275, 1016, 2038, 1037, 3482, 5436, 1997, 23161, 2013, 2367, 12107, 1997, 2951, 4520, 1010, 2029, 3065, 2008, 1996, 7861, 3921, 2003, 10862, 2893, 3020, 3477, 27475, 1012, 102, 101, 2057, 2175, 2067, 2000, 1996, 7235, 5167, 2944, 2007, 17337, 20611, 1042, 1006, 1060, 1007, 1998, 1043, 1006, 1049, 1007, 1012, 102, 101, 2005, 2023, 2951, 2275, 1010, 1042, 1006, 1060, 1007, 2003, 1037, 13091, 4353, 2007, 4338, 16381, 1016, 1998, 4094, 16381, 1017, 1012, 102, 101, 1043, 1006, 1049, 1007, 2003, 1037, 8150, 1997, 2048, 13433, 24077, 20611, 1024, 1052, 1006, 1018, 1007, 2007, 9723, 1014, 29625, 2575, 1998, 1052, 1006, 3438, 1007, 2007, 9723, 1014, 29625, 2549, 1012, 102, 101, 2021, 2085, 1996, 24155, 8107, 2515, 2025, 2113, 1996, 4127, 1997, 1996, 2995, 20611, 1012, 102, 101, 2738, 2084, 16986, 1996, 4127, 1997, 20611, 1010, 2057, 2224, 16293, 4304, 24155, 1006, 16293, 27045, 1007, 1010, 1037, 2512, 28689, 12589, 24155, 5656, 1012, 102, 101, 7687, 1010, 2445, 1050, 8168, 2013, 1037, 4353, 1052, 1006, 1060, 1007, 1010, 2057, 10197, 1052, 1006, 1060, 1007, 2011, 1037, 8150, 1997, 1050, 16293, 4972, 8857, 2012, 1996, 1050, 8168, 29625, 2050, 11721, 17854, 2937, 16293, 2003, 2109, 2005, 9765, 22835, 1042, 1006, 1060, 1007, 1998, 1037, 6375, 16293, 2003, 2109, 2005, 9765, 22835, 1043, 102, 101, 2012, 2169, 1049, 3357, 1997, 1996, 7861, 9896, 1010, 1996, 20235, 11709, 1997, 1996, 2048, 16293, 24155, 2015, 2342, 2000, 2022, 3479, 1012, 102, 101, 2057, 2224, 1996, 3722, 1000, 3627, 1997, 7639, 1000, 5656, 1031, 2260, 1033, 2005, 20235, 4989, 1012, 102, 101, 1996, 2168, 2828, 1997, 16293, 24155, 1998, 20235, 4989, 6028, 2003, 7528, 2005, 1996, 3722, 3921, 29625, 8162, 3463, 2265, 2008, 1996, 7861, 3921, 3957, 2488, 24155, 2084, 1996, 3722, 3921, 2515, 1012, 102, 101, 2000, 1996, 3722, 10035, 1010, 20119, 2011, 23926, 2239, 1005, 2015, 3696, 1011, 4635, 3231, 29625, 8545, 2059, 24806, 1996, 3517, 3477, 27475, 2104, 1996, 3247, 14833, 13465, 2594, 2944, 2007, 1022, 25582, 10470, 2015, 1012, 102, 101, 1996, 3517, 3477, 27475, 1997, 1996, 7861, 3921, 2020, 2025, 6022, 2488, 2084, 2008, 1997, 1996, 3722, 3921, 1010, 2004, 3491, 2011, 1996, 3482, 5436, 1999, 3275, 1017, 1012, 102, 101, 2028, 2825, 7526, 2003, 2008, 2348, 1996, 3722, 10035, 2020, 2582, 2013, 1996, 6149, 20611, 2084, 1996, 7861, 10035, 1010, 2104, 2023, 3327, 3247, 1011, 14833, 13465, 2594, 2944, 1996, 17534, 5656, 24806, 2478, 1996, 3722, 10035, 3047, 2000, 6162, 2152, 3477, 27475, 1012, 102, 101, 1999, 2060, 2616, 1010, 2009, 2003, 2025, 2138, 1996, 7861, 3921, 2106, 6649, 1010, 2738, 2009, 2003, 2138, 1996, 3722, 3921, 3047, 2000, 2131, 2152, 3477, 27475, 1999, 2023, 4292, 1012, 102, 101, 2256, 7885, 2006, 12553, 2951, 4520, 3662, 2008, 2256, 7861, 3921, 2435, 2204, 10035, 1997, 1996, 2995, 20611, 1999, 2195, 2367, 10906, 1012, 102, 101, 2174, 1010, 1996, 12553, 2951, 4520, 2024, 7013, 2478, 2256, 2944, 2005, 1996, 17534, 2832, 1012, 102, 101, 2947, 1010, 1996, 2682, 7885, 2079, 2025, 2425, 2149, 3251, 2256, 2944, 2005, 1996, 17534, 2832, 2003, 2019, 8321, 6412, 1997, 2054, 6433, 1999, 2613, 2088, 3784, 10470, 2015, 29625, 3406, 3437, 2023, 3160, 1010, 2057, 2342, 2000, 3231, 2256, 3921, 2006, 2613, 2088, 7226, 2951, 1012, 102, 101, 2006, 1041, 15907, 1010, 1996, 17534, 15215, 1997, 2949, 10470, 2015, 2024, 2800, 2005, 1996, 2087, 3522, 2382, 2420, 1012, 102, 101, 6854, 1010, 2592, 2006, 1996, 5023, 20723, 1010, 2926, 1996, 24540, 20723, 1997, 1996, 4791, 1997, 1996, 10470, 2015, 1010, 2003, 2025, 7271, 2800, 1012, 102, 101, 2061, 4406, 1999, 1996, 12553, 2951, 7885, 1010, 2057, 2064, 2025, 12826, 2256, 4358, 20611, 2007, 1996, 1000, 2995, 1000, 20611, 29625, 3406, 2131, 2105, 2023, 3291, 1010, 2057, 2109, 1996, 2206, 3921, 1024, 2034, 2057, 8145, 17534, 15215, 2013, 1037, 2275, 1997, 1041, 15907, 10470, 2015, 1012, 102, 101, 2085, 2057, 9811, 2008, 2216, 3284, 20723, 2020, 2025, 2872, 1010, 1998, 1996, 3130, 2117, 3284, 20723, 2024, 1996, 3284, 20723, 1012, 102, 101, 2057, 2064, 2085, 1000, 5342, 1000, 2122, 2047, 3284, 20723, 1997, 2169, 10470, 1010, 1998, 2224, 2256, 24155, 8107, 2000, 3046, 2000, 16014, 1996, 4353, 1997, 1996, 3284, 7226, 1010, 1042, 1015, 1006, 1060, 1007, 1012, 102, 101, 2057, 2064, 2085, 12826, 2256, 4358, 20611, 2000, 1996, 20723, 2057, 2031, 5023, 1010, 1998, 2036, 24134, 3517, 3477, 27475, 2104, 1996, 3247, 14833, 13465, 2594, 2944, 1012, 102, 101, 2096, 2009, 2003, 2995, 2008, 2023, 3921, 1997, 6318, 20723, 2097, 8970, 13827, 2046, 2256, 24155, 2015, 1010, 2057, 2024, 2025, 2667, 2000, 4553, 1996, 2995, 4353, 1997, 20723, 1997, 2216, 1041, 15907, 10470, 2015, 1012, 102, 101, 2612, 2057, 2024, 2667, 2000, 4553, 1996, 4353, 1997, 2023, 1000, 5429, 1000, 2951, 2275, 1010, 2029, 2003, 9690, 5067, 2013, 1996, 2613, 2088, 1998, 2947, 2323, 2031, 2714, 6459, 2000, 1996, 5025, 17534, 2381, 2951, 1012, 102, 101, 2065, 2256, 2944, 1997, 1996, 17534, 2832, 2003, 6149, 1010, 2059, 2256, 7861, 3921, 2323, 2022, 2583, 2000, 11178, 4070, 2005, 1996, 5023, 20723, 1999, 2023, 2951, 2275, 1998, 3965, 2204, 10035, 2000, 1042, 1015, 1006, 1060, 1007, 1012, 102, 101, 2057, 2031, 5067, 17534, 2381, 1997, 1041, 15907, 10470, 2015, 2006, 4435, 2047, 8412, 9160, 1016, 1006, 11754, 2944, 1007, 22659, 1010, 2058, 1037, 2558, 1997, 1037, 3204, 1999, 2233, 2384, 1012, 102, 101, 7890, 3802, 2632, 29625, 1031, 2340, 1033, 16578, 1041, 15907, 10470, 2951, 2006, 2019, 3041, 2544, 1997, 8412, 9160, 1010, 2073, 2027, 5275, 2008, 7226, 13375, 1005, 26004, 2015, 2006, 9160, 2015, 7166, 2000, 2022, 2485, 2000, 1996, 2797, 3643, 2944, 1012, 102, 101, 2057, 2641, 2069, 10470, 2015, 2008, 6354, 2028, 2154, 1010, 1998, 2018, 2012, 2560, 1017, 7226, 13375, 1012, 102, 101, 2057, 5159, 3438, 10470, 2015, 2008, 8510, 2122, 5918, 1012, 102, 101, 1996, 2951, 2001, 2059, 18154, 4055, 2046, 1037, 2731, 2275, 1998, 1037, 5604, 2275, 1012, 102, 101, 2057, 7718, 2176, 4083, 8107, 1024, 1996, 7861, 1998, 3722, 8107, 2008, 10035, 1037, 3671, 4353, 2005, 1042, 1006, 1060, 1007, 1998, 1037, 13433, 24077, 4353, 2005, 1043, 1006, 1049, 1007, 1010, 1998, 1996, 7861, 1998, 3722, 8107, 2008, 2224, 16293, 4304, 24155, 2000, 10197, 1042, 1006, 1060, 1007, 1998, 1043, 102, 101, 2169, 3921, 2699, 2000, 10197, 1042, 1015, 1006, 1060, 1007, 2013, 1996, 2731, 2275, 1010, 1998, 1996, 10035, 2020, 4102, 2114, 1996, 3284, 20723, 2013, 1996, 3231, 2275, 1012, 102, 101, 2057, 2106, 1022, 3216, 1997, 2023, 7551, 2007, 2367, 6721, 13571, 2015, 1997, 2731, 2275, 1998, 5604, 2275, 1010, 1998, 9572, 2094, 1996, 3463, 1012, 102, 101, 1996, 1047, 2140, 17856, 17905, 2015, 1997, 1042, 1015, 1006, 1060, 1007, 1997, 1996, 8107, 2024, 2714, 1010, 1998, 2053, 2028, 3921, 2003, 6022, 2488, 2084, 1996, 2500, 29625, 8545, 2059, 24806, 1996, 3517, 3477, 27475, 2104, 1996, 3247, 14833, 13465, 2594, 2944, 1012, 102, 101, 1996, 7861, 8107, 4719, 6022, 3020, 3477, 27475, 2084, 1996, 3722, 8107, 1010, 2004, 3491, 1999, 3275, 1018, 1012, 102, 101, 1996, 8107, 2478, 11498, 12589, 4275, 4719, 2714, 3477, 27475, 2000, 1996, 7978, 8107, 2007, 16293, 2015, 1012, 102, 101, 1996, 2204, 2836, 1997, 1996, 11498, 12589, 24155, 7861, 3921, 2005, 1996, 1041, 15907, 2951, 2275, 7127, 2008, 1996, 3671, 1998, 13433, 24077, 4275, 2005, 1042, 1006, 1060, 1007, 1998, 1043, 1006, 1049, 1007, 2089, 2022, 11706, 4275, 2005, 11643, 17534, 2006, 1041, 15907, 1012, 102, 101, 1999, 2023, 3259, 2057, 2031, 4208, 2006, 2019, 2590, 3291, 4320, 2011, 17534, 6074, 1010, 2008, 1997, 9765, 22835, 1996, 20611, 1997, 1996, 2193, 1997, 7226, 13375, 1998, 7226, 8310, 2013, 12958, 10470, 2951, 1012, 102, 101, 2057, 3818, 1037, 4083, 3921, 2241, 2006, 1996, 7861, 9896, 2008, 3138, 2046, 4070, 1996, 4394, 20723, 2011, 2009, 25284, 2135, 11717, 4394, 20723, 1998, 2725, 4555, 16593, 10035, 2006, 1996, 2949, 2275, 1997, 20723, 1012, 102, 101, 2057, 4146, 7885, 2006, 2119, 12553, 2951, 2004, 2092, 2004, 2006, 1041, 15907, 2951, 1010, 1998, 4102, 2256, 3921, 2114, 1996, 19647, 3921, 1997, 9217, 2256, 3463, 2265, 2008, 2256, 3921, 2196, 2106, 4788, 1998, 2411, 2106, 2172, 2488, 2084, 1996, 3722, 3921, 1010, 2119, 1999, 3408, 1997, 1996, 3737, 1997, 102, 101, 2256, 7861, 4083, 3921, 2003, 2025, 3132, 2000, 3247, 14833, 13465, 2594, 10470, 4275, 1025, 2009, 2064, 2036, 2022, 2109, 2011, 2208, 1011, 14833, 13465, 2594, 17534, 6074, 1012, 102, 101, 2057, 2024, 2747, 11538, 2107, 5097, 1997, 2256, 7861, 4083, 3921, 1999, 1037, 2208, 1011, 14833, 13465, 2594, 4292, 1012, 102], "tgt": [1, 9765, 22835, 7226, 13375, 26004, 20611, 1999, 3784, 10470, 2015, 4789, 8418, 2078, 20613, 1010, 4901, 25866, 2669, 1011, 2829, 2533, 1997, 3274, 2671, 2118, 1997, 2329, 3996, 17534, 6074, 2445, 1037, 26004, 3853, 1010, 24134, 1037, 17534, 5656, 2008, 25845, 2015, 7327, 26206, 4267, 8998, 1024, 10595, 2323, 2022, 6987, 1011, 2489, 9587, 29068, 5844, 2742, 1024, 2129, 2323, 6074, 16582, 1999, 1037, 5537, 1997, 1041, 15907, 10470, 2015, 1029, 3, 2208, 14833, 13465, 2594, 3921, 1031, 23689, 16523, 5358, 1004, 13351, 1010, 3196, 1033, 1010, 2172, 4745, 2147, 2013, 17338, 2078, 1012, 3, 2944, 1996, 3663, 2004, 1037, 3016, 25253, 2208, 24134, 1998, 2059, 2377, 1037, 3016, 2229, 1011, 10594, 14442, 1997, 1996, 2208, 2043, 2060, 7226, 13375, 26004, 2015, 2024, 2025, 2124, 1010, 10197, 2068, 2013, 2381, 4009, 12221, 1024, 11581, 3012, 1997, 2060, 6074, 2089, 2022, 1999, 4797, 26721, 25572, 8553, 1997, 9798, 14442, 3674, 1041, 26147, 12322, 4360, 3247, 14833, 13465, 2594, 3921, 1031, 10094, 18622, 2121, 3802, 2632, 29625, 2639, 1025, 2011, 3207, 3802, 2632, 29625, 2384, 1033, 4553, 1996, 5248, 1997, 2060, 7226, 13375, 2013, 3439, 2951, 7438, 2060, 7226, 13375, 2004, 2112, 1997, 1996, 4044, 2377, 2019, 15502, 5656, 1999, 1996, 4525, 2309, 1011, 4005, 3247, 3291, 4083, 26004, 1013, 3976, 20611, 3251, 1996, 14181, 2030, 26718, 3921, 2003, 2579, 1010, 1037, 4207, 4942, 21572, 3468, 2213, 2003, 2478, 3439, 2951, 2000, 10197, 4353, 1997, 7226, 13375, 7226, 8310, 2030, 26004, 2015, 1031, 2012, 14844, 1004, 16889, 2063, 1010, 2456, 1033, 1010, 2536, 2060, 4981, 1999, 17338, 3630, 12589, 2015, 1024, 7868, 2008, 7226, 13375, 2024, 6669, 11581, 1998, 3582, 14442, 9942, 24155, 1997, 26004, 20611, 1999, 2536, 10470, 4127, 2445, 5159, 20723, 1031, 2011, 3207, 1010, 2526, 1033, 1010, 1031, 2962, 3802, 2632, 29625, 2494, 1033, 1010, 1031, 2665, 11191, 1004, 2879, 2319, 1010, 2432, 1033, 1010, 1031, 11349, 2666, 1011, 6701, 3802, 2632, 29625, 2432, 1033, 1010, 1031, 9808, 13699, 22916, 2232, 21661, 3802, 2632, 29625, 2384, 1033, 1024, 10197, 1996, 4353, 1997, 1996, 2345, 7597, 1999, 1006, 1041, 29625, 2290, 29625, 1007, 2394, 10470, 2015, 2241, 2006, 4855, 3976, 1998, 2193, 1997, 6074, 1031, 10094, 18622, 2121, 3802, 2632, 29625, 2639, 1033, 1024, 1037, 3247, 1011, 14833, 13465, 2594, 9108, 2361, 3921, 2000, 17534, 1999, 25582, 2034, 1011, 3976, 10470, 2015, 2005, 21053, 5350, 2005, 1996, 2553, 2073, 2122, 25582, 10470, 2015, 2024, 5567, 1010, 15841, 4083, 1037, 4353, 1997, 2060, 6074, 3284, 7226, 2005, 2169, 2204, 1010, 2241, 2006, 3045, 20723, 3594, 7861, 1024, 1996, 6074, 2219, 7226, 5222, 1010, 6318, 1996, 3284, 7226, 2011, 2060, 6074, 2831, 12685, 4281, 3784, 10470, 2944, 1998, 4083, 3291, 17534, 1999, 25582, 10470, 2015, 6388, 9312, 3784, 10470, 2944, 1037, 1006, 4298, 5567, 1007, 3784, 2394, 10470, 2107, 2004, 1041, 15907, 1049, 4022, 7226, 13375, 1010, 2007, 1049, 4567, 2013, 1037, 4353, 1043, 1006, 1049, 1007, 2292, 1050, 19090, 1996, 2193, 1997, 7226, 13375, 2040, 2173, 1006, 3970, 1007, 20723, 1999, 1996, 10470, 2169, 7226, 4063, 1045, 2038, 2019, 2981, 2797, 26004, 4567, 2013, 4353, 1042, 1006, 1058, 1007, 17534, 10949, 2707, 2007, 3914, 3976, 1997, 5717, 7226, 13375, 25582, 2135, 2173, 24540, 20723, 1006, 2169, 7226, 4063, 4152, 2069, 2028, 7226, 1007, 10470, 11510, 9319, 2783, 3976, 1024, 2117, 1011, 3284, 24540, 3815, 4161, 2061, 2521, 2065, 1037, 2047, 7226, 2003, 2625, 2084, 1996, 2783, 3976, 1010, 2009, 2003, 3333, 17534, 2381, 2070, 7226, 13375, 24540, 7226, 8310, 2097, 2022, 6669, 5159, 1006, 19090, 2023, 2275, 1997, 20723, 1060, 2080, 1007, 2151, 7226, 4063, 2040, 2872, 1037, 24540, 7226, 1998, 2001, 2041, 17062, 1006, 1050, 1011, 1015, 2107, 7226, 13375, 1007, 2174, 1010, 2070, 20723, 2097, 2022, 5023, 1006, 19090, 2023, 2275, 1060, 2232, 1007, 3284, 7226, 1006, 2028, 7226, 4063, 1007, 3936, 2069, 2039, 2000, 1996, 2117, 1011, 3284, 7226, 13375, 24540, 3815, 2151, 7226, 2029, 2001, 2896, 2084, 1996, 2783, 3976, 2043, 2009, 2001, 2872, 1006, 1049, 1050, 7226, 13375, 1007, 2593, 1996, 7226, 4063, 3727, 2030, 1996, 7226, 2003, 5837, 17534, 2742, 3284, 10841, 14343, 3372, 3976, 4083, 1996, 20611, 1042, 1006, 1058, 1007, 1998, 1043, 1006, 1049, 1007, 2951, 1024, 1037, 2275, 1997, 10470, 15215, 2193, 1997, 7226, 13375, 1998, 20723, 5500, 7235, 2135, 1999, 2169, 10470, 3722, 6028, 2005, 9765, 22835, 1042, 1006, 1058, 1007, 1998, 1043, 1006, 1049, 1007, 1024, 8568, 5023, 20723, 1010, 6195, 2069, 1060, 2080, 1998, 1050, 2013, 2169, 10470, 2224, 2151, 3115, 4304, 24155, 6028, 2000, 4553, 1996, 20611, 7687, 2023, 2003, 1996, 19647, 3976, 24155, 6028, 2649, 3041, 3291, 1024, 1996, 3722, 6028, 26663, 1996, 5023, 20723, 1998, 2061, 13999, 13827, 1043, 1006, 1049, 1007, 2097, 2022, 15315, 7974, 2098, 2875, 2235, 5300, 2138, 1050, 1049, 1042, 1006, 1058, 1007, 2089, 2022, 15315, 7974, 2098, 2875, 2235, 5300, 2138, 2009, 26663, 1996, 3045, 7226, 15315, 7974, 2098, 2875, 2312, 5300, 2138, 26663, 3333, 1010, 3974, 20723, 7861, 9896, 5576, 1024, 2224, 7861, 2000, 4070, 2005, 5023, 20723, 2714, 1999, 4382, 2000, 1996, 3921, 2649, 2682, 2011, 10094, 18622, 2121, 3802, 2632, 29625, 1006, 2639, 1007, 2174, 1010, 1999, 2256, 4292, 2070, 3974, 20723, 2024, 2036, 5023, 1025, 1996, 2193, 1997, 7226, 13375, 2003, 9662, 1025, 3517, 2193, 1997, 5023, 20723, 9041, 2006, 1060, 2080, 1998, 1042, 1006, 1058, 1007, 1041, 3357, 1024, 9699, 1996, 4394, 2951, 2445, 10035, 1997, 1042, 1005, 1010, 1043, 1005, 1998, 17534, 2944, 2005, 2169, 8089, 1060, 2080, 1010, 9377, 2127, 1050, 8168, 1997, 1060, 2232, 2031, 2042, 7013, 1024, 7099, 1049, 2013, 1043, 1005, 1006, 1049, 1064, 1049, 1050, 1007, 26633, 17534, 2832, 2127, 1049, 1050, 1009, 1015, 20723, 2031, 2042, 7013, 1024, 4009, 1037, 7099, 2013, 1042, 1005, 1006, 1058, 1007, 2000, 5050, 1037, 2047, 7226, 2065, 1996, 18925, 7226, 23651, 1996, 2279, 7226, 1999, 1060, 2080, 1010, 5672, 1996, 7226, 2007, 1996, 2279, 7226, 2013, 1060, 2080, 1012, 3, 4728, 1010, 5587, 1996, 18925, 7226, 2000, 1060, 2232, 2065, 1060, 2232, 2515, 2025, 5383, 3599, 2028, 7226, 2008, 23651, 1996, 3284, 7226, 1999, 1060, 2080, 1010, 15454, 7099, 1049, 3357, 1024, 10651, 1042, 1005, 1006, 1058, 1007, 1998, 1043, 1005, 1006, 1049, 1007, 2000, 25845, 1996, 16593, 1997, 1996, 20723, 1060, 2080, 1060, 2232, 9041, 2006, 8360, 2433, 1997, 1042, 1005, 1010, 1043, 1005, 1025, 2593, 23521, 2030, 2478, 1041, 29625, 2290, 29625, 23599, 4776, 21682, 4083, 1042, 1006, 1058, 1007, 1998, 1043, 1006, 1049, 1007, 1999, 1037, 2208, 14833, 13465, 2594, 4292, 1996, 3921, 2649, 2682, 2003, 3247, 1011, 14833, 13465, 2594, 2054, 2065, 2057, 2215, 2000, 2202, 1037, 2208, 1011, 14833, 13465, 2594, 3921, 1029, 3, 2012, 14844, 1004, 16889, 2063, 1010, 1006, 2456, 1007, 6848, 24155, 1999, 1996, 2208, 14833, 13465, 2594, 4292, 2174, 1010, 2027, 3227, 7868, 2008, 2193, 1997, 7226, 13375, 2003, 2124, 4766, 6594, 1997, 4242, 2193, 1997, 7226, 13375, 1010, 2021, 2025, 7882, 2000, 2256, 3784, 10470, 4292, 2292, 1042, 1006, 1058, 1007, 2022, 1996, 4353, 1997, 7226, 13375, 26004, 2015, 1006, 2612, 1997, 7226, 8310, 1007, 1043, 1006, 1049, 1007, 3464, 1996, 4353, 1997, 2193, 1997, 7226, 13375, 1010, 2004, 2077, 2445, 1037, 7226, 13375, 26004, 1058, 1010, 2054, 2003, 2010, 7226, 3815, 1029, 3, 9611, 2005, 3016, 2229, 1011, 10594, 14442, 1997, 1996, 10470, 2208, 1024, 7226, 3853, 1038, 1006, 1058, 1064, 1042, 1010, 1043, 1007, 7861, 9896, 2000, 10197, 1042, 1998, 1043, 1999, 1037, 14181, 4292, 1024, 1041, 3357, 1024, 2005, 2169, 7099, 2445, 8089, 1060, 2080, 1024, 7099, 1049, 2013, 1043, 1005, 1006, 1049, 1064, 1049, 1050, 1007, 24134, 5159, 7226, 13375, 26004, 2015, 29536, 2013, 1060, 2080, 2011, 1999, 16874, 2075, 1996, 7226, 3853, 9699, 2047, 7226, 13375, 2007, 26004, 2015, 1058, 2232, 2040, 2173, 5023, 20723, 1060, 2232, 1027, 1038, 1006, 1058, 2232, 1064, 1042, 1005, 1010, 1043, 1005, 1007, 26633, 1996, 10470, 2127, 1049, 1050, 1009, 1015, 20723, 2024, 7013, 1010, 2073, 3599, 2028, 5023, 7226, 2003, 3020, 2084, 1996, 3284, 5159, 7226, 1049, 3357, 1024, 10651, 1042, 1005, 1998, 1043, 1005, 2000, 25845, 16593, 1997, 1996, 26004, 2015, 29536, 1058, 2232, 2831, 12685, 4281, 3784, 10470, 2944, 1998, 4083, 3291, 2311, 2019, 4005, 6388, 9312, 2311, 2019, 4005, 5136, 1996, 2810, 1997, 1037, 3247, 1011, 14833, 13465, 2594, 4005, 2000, 5589, 1999, 1037, 10713, 5537, 1997, 10470, 2015, 1006, 2104, 2256, 3784, 10470, 2944, 1007, 2445, 10035, 1042, 1005, 1006, 1058, 1007, 1998, 1043, 1005, 1006, 1049, 1007, 1010, 2054, 2024, 1996, 15502, 17534, 9942, 1029, 3, 10470, 4044, 1047, 25582, 1010, 2309, 1011, 2204, 3784, 10470, 2015, 2005, 4298, 2512, 29624, 5178, 16778, 9289, 5350, 2057, 2215, 2069, 2028, 8875, 1041, 29625, 2290, 29625, 9343, 1037, 9160, 19090, 2256, 26004, 2005, 1996, 8875, 1999, 10470, 1046, 2004, 1058, 3501, 1998, 2256, 7226, 2004, 1038, 3501, 2292, 1057, 3501, 19090, 3517, 3477, 7245, 2012, 2051, 1046, 1010, 18462, 2006, 2025, 2383, 2180, 2525, 1037, 3853, 1997, 2256, 26004, 2015, 2005, 1996, 5350, 1999, 1996, 10470, 2015, 1046, 1010, 1010, 1047, 2665, 11191, 1004, 2879, 2319, 1006, 2432, 1007, 1998, 12098, 6525, 3802, 2632, 29625, 1006, 2494, 1007, 16578, 2714, 13100, 2478, 2714, 13384, 1010, 2057, 18547, 1996, 15502, 17534, 5656, 2005, 2256, 2944, 9798, 1996, 15502, 5656, 15502, 17534, 1024, 2003, 1996, 7327, 1997, 1996, 17534, 5656, 2008, 25845, 2015, 1057, 3501, 1009, 2487, 1006, 5173, 1999, 1996, 3259, 1007, 2034, 2744, 1024, 3477, 7245, 2013, 2783, 10470, 1025, 2117, 2744, 1024, 3477, 7245, 2013, 2925, 10470, 2015, 3602, 2008, 1057, 3501, 1009, 2487, 9041, 2006, 1996, 4353, 1997, 1996, 3284, 7226, 1024, 1998, 2008, 1042, 3501, 2487, 9041, 1999, 2735, 2006, 1042, 1006, 1058, 1007, 1010, 1043, 1006, 1049, 1007, 2947, 2057, 2442, 10197, 1042, 1006, 1058, 1007, 1010, 1043, 1006, 1049, 1007, 2000, 3857, 1037, 3247, 14833, 13465, 2594, 4005, 1999, 2023, 4292, 2256, 4005, 24134, 2015, 1057, 1008, 1046, 1009, 2487, 2011, 22480, 22835, 2019, 9897, 2478, 10125, 9758, 16227, 1010, 2153, 18345, 2006, 2256, 2944, 1997, 1996, 10470, 3449, 7875, 21223, 2015, 10470, 2015, 2008, 17702, 1999, 2051, 3602, 2008, 2096, 1996, 15502, 7226, 1999, 10470, 1046, 2515, 2025, 12530, 2006, 1042, 3501, 2487, 1010, 2009, 2515, 12530, 2006, 13109, 2487, 2005, 1048, 1028, 1046, 2065, 2019, 10470, 1048, 8267, 1037, 2275, 1997, 1006, 5159, 1007, 20723, 1038, 2140, 2077, 10470, 1046, 2038, 3092, 1010, 2057, 2064, 24134, 1037, 15219, 10197, 1997, 13109, 2487, 1006, 1058, 1007, 1010, 1998, 2947, 1037, 2488, 7226, 2005, 10470, 1046, 7099, 2013, 13109, 2487, 1006, 1058, 1007, 2011, 21934, 10924, 10470, 1048, 2429, 2000, 2256, 10470, 2944, 2054, 2055, 1996, 2208, 14833, 13465, 2594, 3921, 1029, 3, 2065, 2169, 7226, 4063, 1006, 2060, 2084, 2256, 4005, 1007, 2069, 17257, 1999, 2028, 10470, 1024, 7444, 5656, 2003, 2000, 7226, 3606, 7699, 1024, 1038, 1006, 1058, 1007, 1027, 1058, 2057, 2064, 2224, 1996, 3247, 1011, 14833, 13465, 2594, 3921, 2065, 2060, 7226, 13375, 5589, 1999, 2062, 2084, 2028, 10470, 1031, 23689, 16523, 5358, 1004, 13351, 1010, 3196, 1033, 14442, 5656, 4152, 2062, 3375, 1006, 2119, 23972, 1998, 15078, 2135, 1007, 9041, 2006, 4443, 1010, 6164, 6043, 1997, 2060, 6074, 2065, 2057, 2031, 2000, 10197, 1042, 1998, 1043, 1010, 10712, 2060, 6074, 2079, 2205, 1012, 3, 2129, 2323, 2057, 4070, 2005, 1996, 6061, 2008, 2027, 2097, 4553, 16542, 20611, 1029, 3, 3112, 1999, 2023, 5884, 2003, 2172, 6211, 2000, 6847, 10665, 6388, 2135, 2079, 2057, 2903, 2008, 2035, 6074, 2097, 3582, 2019, 14442, 5656, 2006, 1041, 15907, 1029, 3, 2831, 12685, 4281, 3784, 10470, 2944, 1998, 4083, 3291, 2311, 2019, 4005, 6388, 9312, 7885, 2057, 4102, 2256, 7861, 3921, 2114, 1996, 3722, 3921, 1045, 29625, 12553, 2951, 1024, 5537, 1997, 10470, 2015, 2005, 7235, 5167, 1010, 2124, 4353, 2945, 2462, 1012, 3, 12553, 2951, 1024, 5537, 1997, 10470, 2015, 2005, 2512, 29624, 5178, 16778, 9289, 5167, 1010, 2124, 4353, 2945, 3523, 1012, 3, 12553, 2951, 1024, 5537, 1997, 10470, 2015, 2005, 7235, 5167, 1010, 4242, 4353, 2945, 4921, 1012, 3, 1041, 15907, 2951, 1024, 10470, 2015, 2005, 9160, 2005, 2169, 2951, 13462, 1010, 2057, 3198, 2048, 3980, 1024, 1015, 1012, 3, 2029, 3921, 3957, 2488, 10035, 1997, 1996, 20611, 1042, 1006, 1058, 1007, 1010, 1043, 1006, 1049, 1007, 1010, 20069, 1006, 1058, 1007, 1029, 3, 2029, 3921, 3957, 2488, 3517, 3477, 27475, 2104, 1996, 3247, 1011, 14833, 13465, 2594, 17534, 2944, 1029, 3, 2951, 2275, 1045, 1024, 7235, 5167, 12553, 2951, 1024, 1042, 1006, 1058, 1007, 2003, 1037, 3671, 4353, 1025, 1043, 1006, 1049, 1007, 2003, 1037, 13433, 24077, 4353, 17534, 2381, 1997, 2871, 10470, 2015, 2003, 7013, 2005, 2169, 6013, 1012, 3, 2119, 4083, 8107, 2224, 1996, 6149, 1006, 3671, 1004, 13433, 24077, 1007, 2945, 1997, 20611, 2000, 10197, 1042, 1006, 1058, 1007, 1998, 1043, 1006, 1049, 1007, 3160, 1015, 1024, 2029, 3921, 2081, 1037, 2488, 10197, 1997, 1042, 1006, 1058, 1007, 1010, 1043, 1006, 1049, 1007, 1010, 20069, 1006, 1058, 1007, 1029, 3, 7861, 3921, 10862, 2038, 2896, 1047, 2140, 17856, 17905, 2084, 1996, 3722, 3921, 7778, 2135, 3278, 4489, 1024, 23926, 2239, 3696, 1011, 4635, 3231, 1006, 2512, 29624, 28689, 12589, 1007, 1020, 1018, 1016, 1014, 1016, 1018, 1020, 1022, 2184, 2260, 2403, 1014, 7226, 3815, 4353, 1997, 20723, 2995, 3722, 7861, 2951, 2275, 1045, 1024, 13599, 3517, 3477, 27475, 5537, 1997, 2809, 2047, 10470, 2015, 1010, 2044, 4083, 2013, 1996, 2871, 1011, 10470, 2381, 1999, 1996, 2047, 10470, 2015, 1010, 2057, 2145, 2224, 1996, 2995, 1043, 1006, 1049, 1007, 1998, 1042, 1006, 1058, 1007, 3160, 1016, 1024, 2206, 1996, 15502, 5656, 2007, 1996, 7861, 10035, 3957, 3020, 3517, 3477, 27475, 2084, 2206, 2023, 5656, 2007, 1996, 3722, 3921, 2015, 10035, 3722, 7861, 1054, 1041, 2290, 2128, 1056, 3477, 7245, 23161, 2951, 2275, 2462, 1024, 2512, 29624, 5178, 16778, 9289, 5167, 1996, 2812, 1997, 1042, 1006, 1058, 1007, 9041, 7399, 2135, 2006, 2070, 4242, 16381, 1037, 2119, 8107, 2224, 7399, 26237, 2000, 10197, 1996, 7399, 21374, 3160, 1015, 1024, 7861, 3921, 3957, 1006, 28093, 1012, 3, 6022, 1007, 2488, 10035, 3160, 1016, 1024, 7861, 3921, 6162, 2015, 6022, 2488, 3517, 3477, 27475, 1037, 1049, 1041, 1037, 1050, 1051, 1042, 1042, 1006, 1060, 1064, 1037, 1007, 1996, 2812, 1997, 1042, 1006, 1060, 1064, 1037, 1007, 6431, 1037, 2995, 3722, 7861, 2951, 2275, 3523, 1024, 4242, 20611, 7235, 5167, 1012, 3, 4353, 2945, 2005, 1042, 1006, 1058, 1007, 1998, 1043, 1006, 1049, 1007, 2024, 4242, 2598, 3606, 1024, 1042, 1006, 1058, 1007, 2003, 13091, 5500, 1025, 1043, 1006, 1049, 1007, 2003, 1037, 8150, 1997, 2048, 13433, 24077, 2015, 2224, 16293, 4304, 24155, 2000, 10197, 1042, 1006, 1058, 1007, 1998, 1043, 1006, 1049, 1007, 2765, 1024, 1996, 7861, 3921, 3957, 2488, 10035, 1006, 6022, 2896, 1047, 2140, 17856, 17905, 1007, 1025, 2119, 8107, 4719, 2714, 3477, 27475, 1006, 4489, 2025, 3278, 1007, 2184, 1019, 1014, 1019, 2184, 2321, 2322, 2423, 2382, 3486, 1014, 7226, 3815, 4353, 1997, 3284, 7226, 2995, 3722, 16293, 7861, 16293, 3722, 3722, 16293, 7861, 7861, 16293, 1054, 1041, 2290, 2128, 1056, 3477, 7245, 23161, 2951, 2275, 4921, 1024, 1041, 15907, 2951, 2641, 2069, 2028, 1011, 2154, 10470, 2015, 2007, 2012, 2560, 1017, 7226, 13375, 3291, 1024, 3284, 20723, 2025, 2800, 2147, 24490, 1024, 9811, 2117, 1011, 3284, 7226, 2003, 1996, 3284, 7226, 19777, 1024, 2023, 5429, 2951, 2275, 2323, 2031, 2714, 6459, 2000, 1996, 5025, 17534, 2381, 4102, 2176, 8107, 1024, 7861, 1010, 3722, 8107, 9765, 22835, 3671, 1998, 13433, 24077, 20611, 7861, 1010, 3722, 8107, 2478, 16293, 4304, 24155, 3160, 1015, 1024, 2053, 2598, 3606, 2005, 2023, 2951, 2275, 25711, 5669, 20723, 2024, 2428, 3333, 1010, 4385, 29625, 1012, 3, 3160, 1016, 1024, 1996, 7861, 8107, 6162, 6022, 3020, 3517, 3477, 27475, 2084, 1996, 3722, 8107, 1012, 3, 7091, 1004, 2925, 2147, 17534, 6074, 1999, 3784, 10470, 10906, 2227, 1996, 3291, 1997, 9765, 22835, 4353, 1997, 7226, 8310, 1025, 4353, 1997, 2193, 1997, 7226, 13375, 2013, 12958, 10470, 2951, 2057, 3818, 1037, 4083, 3921, 2241, 2006, 7861, 2057, 2641, 1996, 4646, 1997, 2311, 1037, 3247, 14833, 13465, 2594, 4005, 2005, 10071, 1997, 3784, 10470, 2015, 2057, 3662, 1999, 7885, 2008, 2256, 7861, 3921, 2196, 2106, 4788, 1998, 2788, 2106, 2488, 2084, 1996, 19647, 3921, 1010, 2006, 2119, 12553, 1998, 2613, 1011, 2088, 2951, 4067, 2017, 2005, 2115, 3086, 999, 2], "src_sent_labels": [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0], "segs": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "clss": [0, 27, 50, 78, 104, 149, 167, 182, 237, 261, 294, 326, 368, 396, 448, 484, 538, 573, 597, 635, 684, 713, 761, 786, 817, 865, 889, 948, 965, 1002, 1052, 1076, 1107, 1137, 1197, 1238, 1251, 1280, 1326, 1346, 1370, 1399, 1412, 1448, 1482, 1535, 1592, 1615, 1632, 1651, 1707, 1762, 1821, 1836, 1869, 1897, 1955, 1975, 1991, 2015, 2034, 2069, 2094, 2139, 2164, 2180, 2217, 2249, 2273, 2308, 2335, 2382, 2412, 2440, 2497, 2516, 2543, 2561, 2580, 2599, 2628, 2664, 2683, 2713, 2733, 2773, 2796, 2820, 2832, 2849, 2862, 2882, 2926, 2974, 2996, 3015, 3042, 3052, 3079, 3112, 3167, 3186, 3238, 3277, 3297, 3343, 3357, 3377, 3394, 3413, 3457, 3480, 3499, 3551, 3585, 3598, 3631, 3651, 3671, 3684, 3722, 3747, 3789, 3845, 3881, 3925, 3955, 3981, 4002, 4022, 4065, 4098, 4134, 4193, 4226, 4286, 4303, 4341, 4365, 4422, 4475, 4501, 4529, 4583, 4618, 4650, 4702, 4725, 4757, 4780, 4811, 4850, 4884, 4927, 4947, 4973, 4989, 5041, 5059, 5083, 5098, 5126, 5175, 5187, 5213, 5250, 5287, 5309, 5333, 5361, 5406, 5466, 5480, 5501, 5542, 5561, 5604, 5624, 5641, 5652, 5705, 5761, 5775, 5819, 5853, 5914, 5946, 5991, 6030, 6056, 6085, 6107, 6139, 6173, 6199, 6218, 6252, 6303, 6345, 6360, 6385, 6444, 6473, 6503, 6526, 6550, 6585, 6602, 6629, 6687, 6712, 6731, 6766, 6804, 6835, 6881, 6914, 6939, 6957, 7006, 7028, 7055, 7105, 7129, 7167, 7197, 7235, 7274, 7315, 7349, 7393, 7413, 7425, 7442, 7495, 7526, 7553, 7599, 7620, 7640, 7687, 7724, 7762, 7815, 7846], "src_txt": ["there is much active research into the design of automated bidding agents , particularly for environments that involve multiple decoupled auctions .", "these settings are complex partly because an agent 's strategy depends on information about other bidders ' interests .", "when bidders ' valuation distributions are not known ex ante , machine learning techniques can be used to approximate them from historical data .", "it is a characteristic feature of auctions , however , that information about some bidders ' valuations is systematically concealed .", "this occurs in the sense that some bidders may fail to bid at all because the asking price exceeds their valuations , and also in the sense that a high bidder may not be compelled to reveal his valuation .", "ignoring these \" hidden bids \" can introduce bias into the estimation of valuation distributions .", "to overcome this problem , we propose an em - based algorithm .", "we validate the algorithm experimentally using both synthetic and real - world ( ebay ) datasets , and show that our approach estimates bidders ' valuation distributions and the distribution over the true number of bidders significantly more accurately than more straightforward density estimation techniques .", "there has been much research on the study of automated bidding agents for auctions and other market - based environments .", "the trading agent competitions ( tac ) and the tac supply chain management competitions ( tac - scm ) have attracted much interest [ 14 ] .", "there have also been research efforts on bidding agents and bidding strategies in other auction environments [ 5,4,7,3,6,2 ] .", "although this body of work considers many different auction environments , bidding agents always face a similar task : given a valuation function , the bidding agent needs to compute an optimal bidding strategy that maximizes expected surplus .", "( some environments such as tac - scm also require agents to solve additional , e.g. , scheduling tasks . )", "the \" wilson doctrine \" in mechanism design argues that mechanisms should be constructed so that they are \" detail - free \" - that is , so that agents can behave rationally in these mechanisms even without information about the distribution of other agents ' valuations .", "for example , under the vcg mechanism it is a weakly dominant strategy to bid exactly one 's valuation , regardless of other agents ' beliefs , valuations or actions .", "under common assumptions ( in particular , independent private values ) single - item english auctions are similar : an agent should remain in the auction until the bidding reaches the amount of his valuation.while detail - free mechanisms are desirable , however , they are not ubiquitous .", "very often , agents are faced with the problem of deciding how to behave in games that do not have dominant strategies and where other agents ' payoffs are strategically relevant .", "for example , we may want to participate in a series of auctions run by different sellers at different times .", "depending on the assumptions we choose to make about other bidders , two approaches to computing bidding strategies suggest themselves : a game theoretic approach and a decision theoretic approach .", "the game theoretic approach assumes that all agents are perfectly rational and that this rationality is common knowledge ; the auction is modeled as a bayesian game ( see , e.g. , the survey in [ 8 ] ) .", "under this approach , a bidding agent would compute a bayes - nash equilibrium of the auction game , and play the equilibrium bidding strategy .", "for example , for environments with multiple , sequential auctions for identical items and in which each bidder wants only a single item , milgrom and weber [ 9,13 ] identified bayes - nash equilibria .", "such equilibria very often depend on the distribution of agents ' valuation functions and the number of bidders .", "although this information is rarely available in practice , it is usually possible to estimate these distributions from the bidding history of previous auctions of similar items .", "note that this involves making the assumption that past and future bidders will share the same valuation distribution.the game - theoretic approach has received a great deal of study , an is perhaps the dominant paradigm in microeconomics .", "in particular , there are very good reasons for seeking strategy profiles that are resistant to unilateral deviation .", "however , this approach is not always useful to agents needing to decide what to do in a particular setting , especially when the rationality of other bidders is in doubt , when the computation of equilibria is intractable , or when the game has multiple equilibria .", "in such settings , it may be more appropriate to rely on decision theory .", "a decision theoretic approach treats other bidders as part of the environment , and ignores the possibility that they may change their behavior in response to the agent 's actions .", "as above , we again make the assumption that the other bidders come from a population that exhibit stationary bidding behavior ; however , this time we model agents ' bid amounts directly , rather than modeling their valuations and then applying an equilibrium strategy .", "we then solve the resulting single - agent decision problem to find a bidding strategy that maximizes expected payoff .", "we could also use a reinforcement - learning approach , where we continue to learn the bidding behavior of other bidders while participating in the auctions .", "this paper does not attempt to choose between these two approaches ; it is our opinion that each has domains for which it is the most appropriate .", "the important point is that regardless of which approach we elect to take , we are faced with the subproblem of estimating two distributions from the bidding history of past auctions : the distribution on the number of bidders , and the distribution of bid amounts ( for decision theoretic approaches ) or of valuations ( for game theoretic approaches ) .", "it might seem that there is very little left to say on this topic : we learn the distributions of interest from historical data and then compute a bidding strategy based on that information for the current auction .", "however , bidding histories often systematically omit relevant information .", "for example , in sealed bid auctions , the auctioneer may choose not to reveal the bid amounts except the price the winner pays .", "an english auction is stopped when there is only one active bidder left ( i.e. , when the second - highest bidder drops out ) , meaning that the valuation of the highest bidder is not revealed .", "how can we learn valuation distributions when the data available to us is biased in this way ?", "for concreteness , in this paper we focus on a single domain ; however , our techniques are broadly applicable .", "here we consider sequential english auctions in which a full bidding history is revealed , such as the online auctions run by ebay .", "we are thus concerned with two kinds of missing information .", "first , some bidders may come to the auction when it is already in progress , find that the current price already exceeds their valuation , and leave without placing a bid .", "second , the amount the winner was willing to pay is never revealed.ignoring these sources of bias would lead to poor estimates of the underlying valuation distribution .", "we propose a novel learning approach based on the expectation maximization ( em ) algorithm , which iteratively generates hidden bids consistent with the observed bids , and then computes maximum - likelihood estimations of the valuation distribution based on the completed set of bids .", "considering both synthetic data ( in which true valuation distributions are known ) and real - world data from ebay , we show that our approach outperforms more straightforward distribution estimation techniques which do not attempt to account for this missing data.the rest of the paper is organized as follows .", "section 2 introduces our auction setting and describes our generative probabilistic model for the bidding process .", "section 3 focuses on the estimation problem , and describes our em learning approach .", "section 4 discusses the computation of the optimal strategy under the decision theoretic approach .", "in section 5 we present experimental results on synthetic data sets as well as on data collected from ebay , which show that our em learning approach makes better estimates of the distributions , and gets more payoff under the decision theoretic model , as compared to the straightforward approach which ignores hidden bids .", "online auctions present unique challenges to agents trying to estimate the underlying valuation distributions , because we do not get to observe the true number of potential bidders , instead we only see the bidders that has decided to make a bid ; whereas in an auction house environment , we could estimate the number of potential bidders by the number of people present at the auction .", "most online auctions nowadays are english auctions , which are ascending - price auctions during which bidders raise the current price level until only one bidder is willing to pay the current price for the item.in this paper we analyze online english auctions as implemented by ebay .", "other auction sites ' rules are similar to ebay 's .", "one common feature of online auction sites including ebay is the proxy bidding system , which allows bidders to enter their maximum willingness to pay as proxy bids .", "the proxy bidding system will then make the bids automatically for the bidder , up to the specified amount of the proxy bid 1 .", "each ebay auction has a fixed closing time ; when the auction closes , the highest bidder is declared the winner of the auction.we now present a generative model for the bidding process of an ebay auction , which describes how the potential bids are generated , which of them become visible and which of them are hidden .", "there are m potential bidders interested in a certain ebay auction of a single item .", "we assume that bidders have independent private values ( ipv ) .", "we assume that m is drawn from a discrete distribution g ( m ) with support [ 2 , \u221e ) .", "bidders ' potential bids are independently drawn from a continuous distribution f ( x ) .", "a decision theoretic agent 's task is to estimate f ( x ) and g ( m ) and use the estimated distributions to compute an optimal bidding strategy .", "if we instead are using the game theoretic approach , we are interested in the bidders ' valuations .", "in that case we would use a slightly different model , where bidders ' valuations are independently drawn from a distribution f ( v ) , and each bidder bids according to a known bayes - nash equilibrium .", "our game theoretic agent 's task is then to estimate f ( v ) and g ( m ) .", "the m potential bidders submit their potential bids in a sequential order .", "when a proxy bid is submitted , ebay compares it to the current price level , which is the second - highest proxy bid so far plus a small bid increment .", "for simplicity , in this paper we ignore this small increment and assume that the current price level is the second - highest proxy bid so far .", "if the submitted bid is no greater than the current price level , the bid is dropped and nothing is observed .", "if the submitted bid is higher than the current price level but lower than the highest proxy bid so far , then the price level is increased to equal the submitted bid .", "if the submitted bid is higher than the previous highest bid , then the price level is increased to equal the previous highest bid .", "at the end of the auction , the item is awarded to the bidder who placed the highest bid , and the final price level will be equal to the second highest bid.our model of the bidding process is quite general .", "notice that when a bidder observes that the price level is higher than her potential bid , she may decide not to bid in this auction .", "this is equivalent to our model in which she always submits the bid , because dropped bids do not appear in the bidding history .", "also our model covers the case of last - minute bidding , which happens quite often in ebay auctions [ 10 ] : even though last - minute bids may be submitted almost simultaneously , ebay processes the bids in sequence.with the proxy bidding system , and when agents have ipv , there is no strong motivation to bid more than once in an auction .", "however , in practice ebay bidders quite often make multiple bids in one auction .", "one possible motivation of these bids is to reveal more information about the proxy bid of the current high bidder [ 11 ] .", "however , only the last bid of the bidder represents her willingness to pay .", "given a bidder 's last bid , her earlier bids carry no extra information .", "therefore , we will be interested in only the last bid from each bidder 2 .", "we can preprocess the bidding histories by removing all bids except the last bids from each bidder , without losing much information .", "given the model of the bidding process , the first task of our bidding agent is to estimate the distributions f ( x ) and g ( m ) from the bidding history .", "suppose we have access to the bidding history of k auctions of the same item .", "one simple approach is to ignore the missing bids , and try to directly estimate f ( x ) and g ( m ) from observed data .", "the observed number of bidders , n , is used to estimate g ( m ) .", "to estimate f ( x ) we use the observed bids x v , which consists of ( n \u2212 1 ) bids for each auction , since the bids of the highest bidders are missing .", "this approach and its variations have been used in e.g. [ 3 , 5 , 7 ] .", "we would like to have an estimation strategy that accounts for the missing data and any bias introduced by its absence .", "let us denote the hidden bids by x h .", "according to our model , there are two types of missing bids : 1 .", "the highest bid of each auction x hi .2 .", "the dropped bids x d that are not observed due to being lower than the current price .", "since there are m potential bidders in total , ( n \u2212 1 ) bids are visible , and one bid is the highest bid x hi , there are ( m \u2212 n ) dropped bids in x d .", "suppose f ( x ) belongs to a class of distributions parameterized by \u03b8 : f ( x | \u03b8 ) , and g ( m ) belongs to a class of distributions parameterized by \u03bb : g ( m | \u03bb ) .", "we want to find the maximum likelihood estimates of \u03b8 and \u03bb , given the observed data x v .", "suppose that we could actually observe the hidden bids x h as well as x v .", "then estimating \u03b8 and \u03bb from the completed data set ( x v , x h ) would be a much easier task .", "unfortunately we do not have x h .", "given x v , and with the knowledge of the bidding process , we can generate x h if we know \u03b8 and \u03bb .", "unfortunately we do not know \u03b8 and \u03bb.a popular strategy for learning this kind of model with missing data is the expectation maximization ( em ) algorithm .", "em is an iterative procedure that alternates between e steps which generate the missing data given current estimates for the parameters and m steps which compute the maximum likelihood ( or maximum a posteriori ) estimates for the parameters based on the completed data , which consists of the observed data and current estimates for the missing data.formally , the e step computesq ( \u03b8 ) = log ( p ( x h , x v | \u03b8 ) ) p ( x h | x v , \u03b8 ( old ) , \u03bb ( old ) ) dx h ( 1 ) the m step does the following optimization : \u03b8 ( new ) = arg max \u03b8 ( q ( \u03b8 ) ) ( 2 ) similar computations are done to estimate \u03bb , the parameter for g ( m | \u03bb ) .", "the integral in equation ( 1 ) is generally intractable for this complex bidding process .", "instead , we can compute a monte carlo approximation of the integral : we draw n samples from the distribution p ( x h | x v , \u03b8 ( old ) , \u03bb ( old ) ) , and approximate the integral by a small sum over the samples ( see e.g. [ 1 ] ) .", "applied to our model , in each e step our task is to generate samples from the distribution p ( x h | x v , \u03b8 ( old ) , \u03bb ( old ) ) .", "recall that x h consists of the highest bid x hi and the dropped bids x d .", "given \u03b8 ( old ) and the second highest bid ( which is observed ) , the highest bid x hi can easily be sampled from the distribution f ( x | \u03b8 ( old ) ) truncated at the second highest bid .", "sampling the dropped bids x d is a more difficult task .", "we use the following procedure , which is based on simulating the bidding process : 1 .", "sample m from g ( m | \u03bb ( old ) ) .2 .", "if m < n , reject the sample and go back to step 1.3 .", "simulate the bidding process using x v and m \u2212 n dropped bids : ( a ) repeatedly draw a sample bid from f ( x | \u03b8 ( old ) ) , and compare it to the current price level .", "if it is lower than the price level , add the bid to the set of dropped bids x d .", "otherwise , the current price level is increased to the next visible bid from x v .", "( b ) if the number of bids in x d exceeds m \u2212 n , or if we used up all the bids in x v before we have m \u2212 n dropped bids in x d , we reject this sample and go back to step 1 .", "only when we used up all bids in x v and we have m \u2212 n bids in x d , do we accept the sample of x d .4 .", "repeat until we have generated n samples of x d .", "our task at each m step is to compute the maximum likelihood ( ml ) estimates of \u03bb and \u03b8 from x v and the generated samples of x h .", "for many standard parametric family of distributions , there are analytical solutions for the ml estimates .", "if analytical solutions does not exist we can use numerical optimization methods such as simulated annealing .", "the em algorithm terminates when \u03bb and \u03b8 converges .", "in section 2 and 3 we presented a model of the bidding process for a single auction , and proposed methods to estimate the distributions of bids and number of bidders in an auction .", "but our work is not done yet : how do we make use of the estimated distributions to compute a bidding strategy ?", "if we only participate in one english auction , under the ipv model it is a dominant strategy to bid up to our valuation of the item , and we do not even need to estimate the distributions .", "however if we are interested in buying from multiple auctions , good estimates of the distributions f ( x ) and g ( m ) is essential in computing a good bidding strategy.in this section we develop a decision theoretic bidding agent for finitely repeated auctions .", "we choose this setting because it is a fairly accurate model of the decision theoretic problem we would face when we want to buy one item from an online auction site .", "our estimation algorithm can easily be applied to more complex decision theoretic models such as infinite horizon models with discount factors , and combinatorial valuation models , as well as game - theoretic bidding models .", "suppose we only want to buy one item , say a playstation from ebay , where multiple auctions of similar playstation systems are held regularly .", "if we successfully win one item , our utility will be equal to our valuation for the item minus the price we pay .", "so our bidding agent 's task is to compute a bidding strategy that will maximize this utility .", "we are only interested in the next k auctions after we arrived at the auction site .", "one motivation for such a restriction is that usually we prefer to have the item soon , i.e. we do not want the bidding agent to spend too much time in order to get the best deal .", "if we fail to win an item from the k auctions , we lose interest of the item and leave the auction site , and our utility is 0 .", "an alternative model would be that we could go and buy an item from a store after we leave the auction site , in which case we would get some other constant utility .", "some of the k auctions may overlap in time , but since ebay auctions have strict closing times , this can be modeled as a sequential decision problem , where our agent makes bidding decisions right before each auction closes.number the auctions 1 . . . k according to their closing times .", "let v j denote our valuation for the item from auction j. note that this allows the items in the auctions to be non-identical .", "let b j denote our agent 's bid for auction j. let u j denote our agent 's expected payoff from participating in auctions j . . . k , assuming we did not win before auction j. let u k +1 be our payoff if we fail to win any of the auctions .", "for simplicity , in this paper we define u k +1 = 0 .", "suppose for each auction j , the number of other bidders is drawn from g j ( m ) and each bidder 's bid is drawn from f j ( x ) .", "since each auction j is an english auction , only the highest bid from other bidders affects our payoff .", "let f 1 j ( x ) and f 1 j ( x ) respectively denote the probability density function and cumulative density function ( cdf ) of the highest bid from other bidders in the j - th auction.then f 1 j ( x ) = \u221e m = 2 g j ( m ) ( f j ( x ) ) m , where f j ( x ) is the cdf of f j ( x ) .", "now u j can be expressed as the following function of the future bids b j : k = ( b j , . . . , b k ) and valuations v j : k = ( v j , . . . , v k ) : u j ( b j : k , v j : k ) = bj \u2212 \u221e ( v j \u2212 x ) f 1 j ( x ) dx + ( 1 \u2212 f 1 j ( b j ) ) u j +1 ( b j +1 : k , v j +1 : k ) ( 3 ) the first term is the expected payoff from the j - th auction ; the second term is the expected payoff from the later auctions .", "let u * j ( v j : k ) denote the expected payoff under optimal strategy b * j : k .", "we can optimize u j from the k - th auction to the first one , in a manner similar to backward induction .", "by solving the first - order conditions of u j , we obtain the optimal bidding strategy : b * j = v j \u2212 u * j +1 ( v j +1 : k ) ( 4 ) in other words , our agent should shade her bids by the \" option value \" , i.e. the expected payoff of participating in future auctions , except for the k - th auction.in the latter case there are no future auctions and the optimal bid is b * k = v k .", "the computation of the optimal bidding strategies requires the computation of the expected payoffs u * j , which involves an integral over the distribution f 1 j ( x ) .", "in general this can not be done analytically , but we can compute its monte carlo approximation if we can sample from f 1 j ( x ) .", "if we can sample from f j ( x ) and g j ( m ) , we can use the following straightforward procedure to generate a sample from f 1 j ( x ) : first draw m from g j ( m ) , then draw m samples from f j ( x ) and take the maximum.the bidding strategy b * 1 : k computed using equations 4 and 3 is optimal , provided that the distributions f j ( x ) and g j ( m ) are the correct distributions of bids and number of bidders for all j \u2208 1 . . . k. of course in general we do not know the true f j ( x ) and g j ( m ) and the focus of this paper is to estimate the distributions from the bidding history and use the estimated distributions to compute the bidding strategy .", "as a result , the computed bidding strategy should be expected to achieve less than the optimal expected payoff .", "however , it is reasonable to think that better estimates of f ( x ) and g ( m ) should give bidding strategies with higher expected payoffs .", "this is confirmed in our experiments across a wide range of data sets , which we discuss in section 5 .", "so far we have been estimating the distribution of the highest bid f 1 ( x ) using f ( x ) and g ( m ) .", "in practice , we often observe some early bidding activity by other bidders in auctions j + 1 , . . . , k before we have to make a bid on auction j .", "this allows us to make even more informed estimates on f 1 ( x ) , based on f ( x ) , g ( m ) and the observed bids .", "suppose we have observed n \u2212 1 early bids , denoted by x v ; the current highest bid x hi is not revealed ( but can be sampled from f ( x ) truncated at the current price ) .", "since the auction is not over , there could be some set of future bids x future .", "when the auction closes , the highest bid from the other bidders will be max { x hi , x future } .", "we can generate x future if we know the number of future bids .", "we know the total number of bids m is drawn from g ( m ) , and the number of bids made so far is n + | x d | , where x d are the dropped bids so far , so the number of future bids is m \u2212 n \u2212 | x d | .", "now we have a procedure that samples from f 1 ( x ) : 1 .", "simulate the auction using our model in section 2 to generate x d , the dropped bids so far .2 .", "sample the total number of bids m from g ( m ) .", "we evaluated both our em learning approach and the simple approach on several synthetic data sets and on real world data collected from ebay .", "for each data set , both approaches were used to estimate the distributions of number of bidders and bid amounts , and these estimates were then used to compute bidding strategies and expected payoffs under the decision theoretic model of section 4 .", "we compared the approaches in two ways : 1 .", "which approach gives better estimates of the distributions f ( x ) , g ( m ) and f 1 ( x ) ?", "this is important because better estimation of these distributions should give better results , regardless of whether agents take a decision theoretic approach or a game theoretic approach to bidding .", "we measure the closeness of an estimated distribution to the true distribution using the kullback - leibler ( kl ) divergence from the true distribution to the estimated distribution .", "the smaller the kl divergence , the closer the estimated distribution to the true one .2 .", "which approach gives better expected payoff under the decision theoretic bidding model 3 as described in section 4 ?", "our experiments show that the em learning approach outperforms the simple approach on both aspects , across a wide range of data sets .", "in this section we present results on four representative data sets : \u2022 data set 1 has auctions of identical items , and we know the family of distributions that f ( x ) and g ( m ) belong to .", "\u2022 data set 2 has auctions of non-identical items , but we know the bid distribution f ( x ) is influenced linearly by an attribute a. \u2022 data set 3 has auctions of identical items , but we do not know what kind of distributions f ( x ) and g ( m ) are .", "we use nonparametric estimation techniques to estimate the distributions .", "\u2022 data set 4 is real - world auction data on identical items , collected from ebay .", "in this data set , the items on sale in all auctions are identical , so the number of bidders and bid amounts come from stationary distributions g ( m ) and f ( x ) .", "f ( x ) is a normal distribution n ( 4 , 3.5 ) .", "g ( m ) is a poisson distribution shifted to the right : g ( m \u2212 2 ) = p ( 40 ) , i.e. the number of bidders is always at least 2 .", "the bidding history is generated using our model of the bidding process as described in section 2 .", "each instance of the data set consists of bidding history from 40 auctions .", "we generated 15 instances of the data set .", "both estimation approaches are informed of the parametric families from which f ( x ) and g ( m ) are drawn ; their task is to estimate the parameters of the distributions , ( \u00b5 , \u03c3 ) for f ( x ) and \u03bb for g ( m ) .", "at the m step of the em algorithm , standard ml estimates for \u00b5 , \u03c3 , and \u03bb are computed , i.e. sample mean of the bid amounts for \u00b5 , standard deviation of the bid amounts for \u03c3 , and the mean of the number of bidders minus 2 ( due to the shifting ) for the poisson parameter \u03bb.our results show that the em approach outperforms the simple approach in the quality of its estimates for the distributions f ( x ) , g ( m ) and f 1 ( x ) .", "figure 1 shows typical estimated distributions 4 and the true distributions .", "we observe that the plot of the estimated f ( x ) by the simple approach is significantly shifted to the right of the true distribution , i.e. the simple approach overestimated f ( x ) .", "we have also calculated kl divergences from the true distributions to the estimated distributions , and the em estimations have consistently lower kl divergences .", "this difference was verified to be significant , using the nonparametric wilcoxon sign - rank test.then , estimates from both approaches are used to compute bidding strategies for an auction environment with 8 sequentially held auctions of the same kind of items , using the decision theoretic model .", "the agent 's \" actual \" expected payoffs u 1 ( b , v ) under these bidding strategies are then computed , using the true distributions .", "the optimal bidding strategy and its expected payoff are also computed.our results show that the em approach gives bidding strategies closer to the optimal strategy , and achieves higher expected payoffs , compared to the simple approach .", "figure 1 has a plot of the bidding strategies in the first auction , and a box plot of the regrets , which is the differences between optimal expected payoffs and actual expected payoffs .", "from the box plot we observe that the mean regret of the em approach is much smaller than that of the simple approach .", "we also used the estimated distributions on the decision - theoretic model with partial bidding activity , as described in section 4.2 .", "again our results show that the em approach achieves higher expected payoffs compared to the simple approach .", "in our second data set , the items on sale are not identical ; instead the distribution of valuations are influenced by an observable attribute a .", "in this data set the dependence is linear : f ( x | a ) = n ( 1.1 a + 1.0 , 3.5 ) .", "g ( m ) is a poisson distribution as before : g ( m \u2212 2 ) = p ( 35 ) .", "for each auction , a is sampled uniformly from the interval [ 3,9 ] .", "in other words , this data set is similar to data set 1 , except that the bid distribution f ( x ) is drawn from a different parametric family .", "both approaches now use linear regression to estimate the linear coefficients.again , our results show that the em approach outperforms the simple approach for this data set , in terms of its estimates for f ( x ) and g ( m ) .", "figure 2 shows the estimated linear relation between the mean of f ( x | a ) and a. from the figure we can see that the em approach gives a much better estimate to the linear function .", "the simple approach again significantly overestimates the bid amounts .", "in fact the simple approach has consistently overestimated f ( x ) for all the synthetic data sets we tested .", "this shows that given our model of the bidding process , the estimated f ( x ) of the simple approach is biased.we then used the estimated distributions to compute a decision - theoretic agent 's bidding strategies and expected payoffs of an auction environment with 8 sequential auctions , where the attribute a of each item is observed .", "the em approach also gives better expected payoff , the statistical significance of which is confirmed by wilcoxon 's sign - rank test .", "figure 2 has a box plot of regrets from different instances of data sets , which shows that the em approach is consistently getting higher payoffs .", "we go back to the identical items model with stationary distributions f ( x ) and g ( m ) .", "for this data set , f ( x ) is a gamma distribution with shape parameter 2 and scale parameter 3 .", "g ( m ) is a mixture of two poisson distributions : p ( 4 ) with probability 0.6 and p ( 60 ) with probability 0.4 .", "but now the estimation approaches does not know the types of the true distributions .", "rather than guessing the types of distributions , we use kernel density estimation ( kernel smoothing ) , a nonparametric estimation strategy .", "essentially , given n samples from a distribution p ( x ) , we estimate p ( x ) by a mixture of n kernel functions centered at the n samples.a gaussian kernel is used for estimating f ( x ) and a uniform kernel is used for estimating g ( m ) .", "at each m step of the em algorithm , the bandwidth parameters of the two kernel estimations need to be selected .", "we use the simple \" rule of thumb \" strategy [ 12 ] for bandwidth selection .", "the same type of kernel estimation and bandwidth selection technique is implemented for the simple approach.our results show that the em approach gives better estimation than the simple approach does .", "to the simple estimates , verified by wilcoxon 's sign - rank test.we then computed the expected payoffs under the decision theoretic model with 8 sequential auctions .", "the expected payoffs of the em approach were not significantly better than that of the simple approach , as shown by the box plot in figure 3 .", "one possible explanation is that although the simple estimates were further from the correct distributions than the em estimates , under this particular decision - theoretic model the bidding strategy computed using the simple estimates happened to achieve high payoffs .", "in other words , it is not because the em approach did badly , rather it is because the simple approach happened to get high payoffs in this setting .", "our experiments on synthetic data sets showed that our em approach gave good estimates of the true distributions in several different settings .", "however , the synthetic data sets are generated using our model for the bidding process .", "thus , the above experiments do not tell us whether our model for the bidding process is an accurate description of what happens in real world online auctions.to answer this question , we need to test our approach on real world bid data .", "on ebay , the bidding histories of completed auctions are available for the most recent 30 days .", "unfortunately , information on the hidden bids , especially the proxy bids of the winners of the auctions , is not publicly available .", "so unlike in the synthetic data experiments , we can not compare our estimated distributions with the \" true \" distributions.to get around this problem , we used the following approach : first we collect bidding histories from a set of ebay auctions .", "now we pretend that those highest bids were not placed , and the previously second highest bids are the highest bids .", "we can now \" hide \" these new highest bids of each auction , and use our estimation approaches to try to predict the distribution of the highest bid , f 1 ( x ) .", "we can now compare our estimated distributions to the bids we have hidden , and also compute expected payoffs under the decision theoretic model .", "while it is true that this approach of hiding bids will introduce bias into our estimations , we are not trying to learn the true distribution of bids of those ebay auctions .", "instead we are trying to learn the distribution of this \" shifted \" data set , which is nonetheless collected from the real world and thus should have similar characteristics to the actual bidding history data .", "if our model of the bidding process is correct , then our em approach should be able to correctly account for the hidden bids in this data set and produce good estimates to f 1 ( x ) .", "we have collected bidding history of ebay auctions on brand new sony playstation 2 ( slim model ) consoles , over a period of a month in march 2005 .", "shah et al. [ 11 ] analyzed ebay auction data on an earlier version of sony playstation , where they argued that bidders ' valuations on playstations tend to be close to the private value model .", "we considered only auctions that lasted one day , and had at least 3 bidders .", "we observed 60 auctions that satisfied these requirements .", "the data was then randomly divided into a training set and a testing set .", "we tested four learning approaches : the em and simple approaches that estimates a normal distribution for f ( x ) and a poisson distribution for g ( m ) , and the em and simple approaches that use kernel density estimation to estimate f ( x ) and g ( m ) .", "each approach tried to estimate f 1 ( x ) from the training set , and the estimates were compared against the highest bids from the test set .", "we did 8 runs of this experiment with different random partitions of training set and testing set , and aggregated the results .", "the kl divergences of f 1 ( x ) of the approaches are similar , and no one approach is significantly better than the others.we then computed the expected payoffs under the decision theoretic model .", "the em approaches achieved significantly higher payoffs than the simple approaches , as shown in figure 4 .", "the approaches using parametric models achieved similar payoffs to the corresponding approaches with kernels .", "the good performance of the parametric estimation em approach for the ebay data set indicates that the normal and poisson models for f ( x ) and g ( m ) may be adequate models for modeling bidding on ebay .", "in this paper we have focused on an important problem faced by bidding agents , that of estimating the distributions of the number of bidders and bid amounts from incomplete auction data .", "we proposed a learning approach based on the em algorithm that takes into account the missing bids by iteratively generating missing bids and doing maximum likelihood estimates on the completed set of bids .", "we conducted experiments on both synthetic data as well as on ebay data , and compared our approach against the straightforward approach of ignoring our results show that our approach never did worse and often did much better than the simple approach , both in terms of the quality of the estimates and in terms of expected payoffs under a decision theoretic bidding model .", "our em learning approach is not limited to decision theoretic auction models ; it can also be used by game - theoretic bidding agents .", "we are currently investigating such applications of our em learning approach in a game - theoretic setting ."], "tgt_txt": "estimating bidders valuation distributions in online auctions albert xin jiang , kevin leyton - brown department of computer science university of british columbia bidding agents given a valuation function , compute a bidding strategy that maximizes eu notwithstanding wilson doctrine : mechanisms should be detail - free motivating example : how should agents behave in a sequence of ebay auctions ?<q>game theoretic approach [ milgrom & weber , 1982 ] , much subsequent work from econ .<q>model the situation as a bayesian game compute and then play a bayes - nash equilibrium of the game when other bidders valuations are not known , estimate them from history drawbacks : rationality of other agents may be in doubt intractability of computing equilibrium multiple equilibria decision theoretic approach [ boutilier et al. 1999 ; byde et al. 2005 ] learn the behavior of other bidders from historical data treat other bidders as part of the environment play an optimal strategy in the resulting single - agent decision problem learning valuation / price distributions whether the gt or dt approach is taken , a shared subproblem is using historical data to estimate distribution of bidders bid amounts or valuations [ athey & haile , 2000 ] , various other papers in econometrics : assume that bidders are perfectly rational and follow equilibrium strategies estimation of valuation distributions in various auction types given observed bids [ byde , 2002 ] , [ stone et al. 2003 ] , [ greenwald & boyan , 2004 ] , [ mackie - mason et al. 2004 ] , [ osepayshvili et al. 2005 ] : estimate the distribution of the final prices in ( e.g. ) english auctions based on selling price and number of agents [ boutilier et al. 1999 ] : a decision - theoretic mdp approach to bidding in sequential first - price auctions for complementary goods for the case where these sequential auctions are repeated , discusses learning a distribution of other agents highest bid for each good , based on winning bids uses em : the agents own bid wins , hiding the highest bid by other agents talk outline background online auction model and learning problem bidding in sequential auctions experimental evaluation online auction model a ( possibly repeated ) online english auction such as ebay m potential bidders , with m drawn from a distribution g ( m ) let n denote the number of bidders who place ( accepted ) bids in the auction each bidder i has an independent private valuation drawn from distribution f ( v ) bidding dynamics start with reserve price of zero bidders sequentially place proxy bids ( each bidder gets only one bid ) auctioneer maintains current price : second - highest proxy amount declared so far if a new bid is less than the current price , it is dropped bidding history some bidders proxy bid amounts will be perfectly observed ( denote this set of bids xo ) any bidder who placed a proxy bid and was outbid ( n - 1 such bidders ) however , some bids will be hidden ( denote this set xh ) highest bid ( one bidder ) revealed only up to the second - highest bidders proxy amount any bid which was lower than the current price when it was placed ( m n bidders ) either the bidder leaves or the bid is rejected bidding example highestcurrent price learning the distributions f ( v ) and g ( m ) data : a set of auction histories number of bidders and bids distributed identically in each auction simple technique for estimating f ( v ) and g ( m ) : ignore hidden bids , considering only xo and n from each auction use any standard density estimation technique to learn the distributions essentially this is the straightforward price estimation technique described earlier problem : the simple technique ignores the hidden bids and so introduces bias g ( m ) will be skewed towards small values because n m f ( v ) may be skewed towards small values because it ignores the winning bid skewed towards large values because ignores dropped , losing bids em algorithm solution : use em to account for hidden bids similar in spirit to the approach described above by boutilier et al. ( 1999 ) however , in our setting some losing bids are also hidden ; the number of bidders is uncertain ; expected number of hidden bids depends on xo and f ( v ) e step : generate the missing data given estimates of f ' , g ' and bidding model for each observation xo , repeat until n samples of xh have been generated : sample m from g ' ( m | m n ) simulate bidding process until m n + 1 bids have been generated : draw a sample from f ' ( v ) to represent a new bid if the sampled bid exceeds the next bid in xo , replace the bid with the next bid from xo .<q>otherwise , add the sampled bid to xh if xh does not contain exactly one bid that exceeds the highest bid in xo , reject sample m step : update f ' ( v ) and g ' ( m ) to maximize the likelihood of the bids xo xh depends on functional form of f ' , g ' ; either analytic or using e.g. simulated annealing learning f ( v ) and g ( m ) in a game theoretic setting the approach described above is decision - theoretic what if we want to take a game - theoretic approach ?<q>athey & haile , ( 2000 ) discuss estimation in the game theoretic setting however , they generally assume that number of bidders is known brief discussion of unknown number of bidders , but not relevant to our online auction setting let f ( v ) be the distribution of bidders valuations ( instead of bid amounts ) g ( m ) remains the distribution of number of bidders , as before given a bidders valuation v , what is his bid amount ?<q>solve for bayes - nash equilibrium of the auction game : bid function b ( v | f , g ) em algorithm to estimate f and g in a gt setting : e step : for each sample given observation xo : sample m from g ' ( m | m n ) compute observed bidders valuations vo from xo by inverting the bid function generate new bidders with valuations vh who place hidden bids xh = b ( vh | f ' , g ' ) simulate the auction until m n + 1 bids are generated , where exactly one hidden bid is higher than the highest observed bid m step : update f ' and g ' to maximize likelihood of the valuations vo vh talk outline background online auction model and learning problem building an agent experimental evaluation building an agent consider the construction of a decision - theoretic agent to participate in a finite sequence of auctions ( under our online auction model ) given estimates f ' ( v ) and g ' ( m ) , what are the optimal bidding strategies ?<q>auction environment k sequential , single - good online auctions for possibly non-identical goods we want only one item e.g. buying a playstation denote our valuation for the item in auction j as vj and our bid as bj let uj denote expected payoff at time j , conditional on not having won already a function of our valuations for the goods in the auctions j , , k greenwald & boyan ( 2004 ) and arora et al. ( 2003 ) analyzed similar domains using similar reasoning , we derive the optimal bidding strategy for our model computing the optimal strategy optimal bidding : is the eu of the bidding strategy that maximizes uj +1 ( derived in the paper ) first term : payoff from current auction ; second term : payoff from future auctions note that uj +1 depends on the distribution of the highest bid : and that fj1 depends in turn on f ( v ) , g ( m ) thus we must estimate f ( v ) , g ( m ) to build a decision theoretic agent in this setting our agent computes u * j +1 by approximating an integral using monte carlo sampling , again relying on our model of the auction elaborations auctions that overlap in time note that while the optimal bid in auction j does not depend on fj1 , it does depend on fl1 for l > j if an auction l receives a set of ( observed ) bids bl before auction j has ended , we can compute a posterior estimate of fl1 ( v ) , and thus a better bid for auction j sample from fl1 ( v ) by simulating auction l according to our auction model what about the game theoretic approach ?<q>if each bidder ( other than our agent ) only participates in one auction : dominant strategy is to bid truthfully : b ( v ) = v we can use the decision - theoretic approach if other bidders participate in more than one auction [ milgrom & weber , 1982 ] equilibrium strategy gets more complex ( both strategically and computationally ) depends on entry , exit policies of other agents if we have to estimate f and g , presumably other agents do too .<q>how should we account for the possibility that they will learn incorrect distributions ?<q>success in this domain is much harder to benchmark experimentally do we believe that all agents will follow an equilibrium strategy on ebay ?<q>talk outline background online auction model and learning problem building an agent experimental evaluation experiments we compared our em approach against the simple approach i. synthetic data : sequence of auctions for identical items , known distribution families ii .<q>synthetic data : sequence of auctions for non-identical items , known distribution families iii .<q>synthetic data : sequence of auctions for identical items , unknown distribution families iv .<q>ebay data : auctions for playstation for each dataset , we ask two questions : 1 .<q>which approach gives better estimates of the distributions f ( v ) , g ( m ) , f1 ( v ) ?<q>which approach gives better expected payoffs under the decision - theoretic bidding model ?<q>data set i : identical items synthetic data : f ( v ) is a normal distribution ; g ( m ) is a poisson distribution bidding history of 40 auctions is generated for each instance .<q>both learning approaches use the correct ( normal & poisson ) families of distributions to estimate f ( v ) and g ( m ) question 1 : which approach made a better estimate of f ( v ) , g ( m ) , f1 ( v ) ?<q>em approach consistently has lower kl divergence than the simple approach statistically significant difference : wilcoxon sign - rank test ( non-parametric ) 6 4 2 0 2 4 6 8 10 12 14 0 bid amount distribution of bids true simple em data set i : comparing expected payoffs sequence of eight new auctions , after learning from the 40 - auction history in the new auctions , we still use the true g ( m ) and f ( v ) question 2 : following the optimal strategy with the em estimates gives higher expected payoffs than following this strategy with the simple approachs estimates simple em r eg re t payoff regrets data set ii : non-identical items the mean of f ( v ) depends linearly on some unknown parameter a both approaches use linear regression to estimate the linear coefficients question 1 : em approach gives ( stat .<q>significantly ) better estimates question 2 : em approach achieves significantly better expected payoffs a m e a n o f f ( x | a ) the mean of f ( x | a ) versus a true simple em data set iii : unknown distributions identical items .<q>distribution families for f ( v ) and g ( m ) are unknown ground truth : f ( v ) is gamma distributed ; g ( m ) is a mixture of two poissons use kernel density estimation to estimate f ( v ) and g ( m ) result : the em approach gives better estimates ( significantly lower kl divergence ) ; both approaches achieved similar payoffs ( difference not significant ) 10 5 0 5 10 15 20 25 30 35 0 bid amount distribution of highest bid true simple kernel em kernel simple simple kernel em em kernel r eg re t payoff regrets data set iv : ebay data considered only one - day auctions with at least 3 bidders problem : highest bids not available workaround : pretend second - highest bid is the highest bid justification : this shifted data set should have similar characteristics to the actual bidding history compared four approaches : em , simple approaches estimating normal and poisson distributions em , simple approaches using kernel density estimation question 1 : no ground truth for this data setdropped bids are really dropped , etc. .<q>question 2 : the em approaches achieve significantly higher expected payoffs than the simple approaches .<q>conclusion & future work bidding agents in online auction settings face the problem of estimating distribution of bid amounts ; distribution of number of bidders from incomplete auction data we proposed a learning approach based on em we considered the application of building a decision theoretic agent for sequences of online auctions we showed in experiments that our em approach never did worse and usually did better than the straightforward approach , on both synthetic and real - world data thank you for your attention !", "sections": [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17], "token_sections}