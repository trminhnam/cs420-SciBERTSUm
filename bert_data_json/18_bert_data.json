{"src": [101, 2311, 10539, 2897, 2578, 2008, 2064, 8116, 8335, 2152, 2836, 2000, 7846, 1999, 1996, 3739, 1997, 15428, 1998, 6532, 2100, 5157, 2003, 6450, 1998, 1999, 12879, 8873, 23402, 3372, 1012, 102, 101, 4219, 2411, 2342, 2000, 2022, 4600, 2058, 21572, 17084, 2098, 2000, 8752, 4672, 5157, 1998, 1996, 3465, 1997, 2107, 2058, 29624, 21572, 17084, 2075, 1000, 7597, 2041, 1000, 2116, 5097, 2008, 2071, 3233, 2000, 5770, 2013, 1037, 2836, 3808, 1011, 5658, 1998, 4821, 3073, 2062, 10539, 2326, 2000, 2203, 5198, 1012, 102, 101, 2000, 4769, 2122, 3471, 1010, 2057, 16599, 2019, 3921, 2241, 2006, 1037, 4207, 15078, 2326, 10802, 1006, 20116, 2361, 1007, 1012, 102, 101, 1037, 20116, 2361, 2003, 2019, 9178, 2029, 3640, 5294, 8310, 1997, 4235, 5500, 22334, 1998, 5527, 1998, 3084, 4219, 2800, 2083, 1037, 4666, 1997, 3962, 1998, 13819, 6089, 1012, 102, 101, 2578, 6855, 4219, 2083, 1996, 20116, 2361, 1998, 1010, 5059, 7780, 2013, 5446, 1010, 12666, 20155, 3891, 2968, 5461, 2005, 6202, 2125, 3465, 1010, 2836, 1010, 1998, 3891, 2000, 4013, 3676, 27965, 25084, 6162, 4539, 3798, 1997, 5359, 7396, 2836, 1012, 102, 101, 2311, 10539, 2897, 2578, 2008, 2064, 8116, 8335, 2152, 2836, 2000, 7846, 1999, 1996, 3739, 1997, 15428, 1998, 6532, 2100, 5157, 2003, 6450, 1998, 1999, 12879, 8873, 23402, 3372, 1012, 102, 101, 4219, 2411, 2342, 2000, 2022, 4600, 2058, 21572, 17084, 2098, 2000, 8752, 4672, 5157, 1998, 1996, 3465, 1997, 2107, 2058, 21572, 17084, 2075, 1000, 7597, 2041, 1000, 2116, 5097, 2008, 2071, 3233, 2000, 5770, 2013, 1037, 2836, 3808, 1011, 5658, 1998, 4821, 3073, 2062, 10539, 2326, 2000, 2203, 5198, 1012, 102, 101, 2096, 4207, 6502, 2015, 2241, 2006, 2326, 1011, 2504, 10540, 1006, 22889, 3022, 1007, 2024, 5681, 2147, 3085, 1998, 21155, 18730, 1997, 4094, 1010, 22889, 3022, 2024, 3227, 10763, 1010, 2146, 1011, 2744, 8311, 1012, 102, 101, 8821, 1010, 2027, 2024, 4050, 1999, 12879, 8873, 23402, 3372, 1006, 2349, 2000, 2058, 21572, 17084, 2075, 1999, 1996, 8311, 1007, 1998, 1013, 2030, 20694, 2012, 14120, 2000, 2051, 1011, 9671, 7170, 1999, 1037, 21425, 5450, 29625, 3406, 4769, 2122, 3471, 1010, 2057, 16599, 2019, 3921, 2241, 2006, 1037, 4207, 15078, 2326, 10802, 1006, 20116, 2361, 1007, 1012, 102, 101, 1037, 20116, 2361, 2003, 2019, 9178, 2029, 3640, 5294, 8310, 1997, 4235, 5500, 22334, 1998, 5527, 1998, 3084, 4219, 2800, 2083, 1037, 4666, 1997, 3962, 1998, 13819, 6089, 1015, 1012, 102, 101, 2578, 6855, 4219, 2083, 1996, 20116, 2361, 1998, 1010, 5059, 7780, 2013, 5446, 1010, 12666, 20155, 3891, 2968, 5461, 2005, 6202, 2125, 3465, 1010, 2836, 1010, 1998, 3891, 2000, 4013, 3676, 27965, 25084, 6162, 4539, 3798, 1997, 5359, 7396, 2836, 1012, 102, 101, 1996, 2203, 3125, 2003, 2000, 2128, 9331, 1996, 6666, 1997, 7778, 3674, 19612, 1999, 1996, 20116, 2361, 2096, 2036, 3228, 5097, 1996, 6502, 1998, 5906, 2000, 20155, 2135, 6133, 2037, 7692, 9347, 2075, 1999, 1996, 2227, 1997, 2051, 1011, 9671, 7692, 4425, 1998, 5157, 29625, 10760, 2717, 1997, 2023, 3259, 2003, 4114, 2004, 4076, 1012, 102, 101, 1999, 2930, 1016, 1010, 2057, 4009, 11698, 3111, 2000, 5446, 1010, 6235, 1996, 2048, 3145, 12046, 2015, 2057, 2224, 2000, 24110, 27351, 2836, 3891, 1010, 1998, 6235, 1996, 4525, 20600, 3291, 2008, 2578, 2227, 2058, 2051, 1012, 102, 101, 1999, 2930, 1017, 1010, 2057, 2059, 6235, 1996, 6502, 2734, 2000, 2490, 7375, 1997, 1996, 17289, 3891, 2968, 9942, 1012, 102, 101, 4919, 1010, 2023, 2950, 1996, 4127, 1997, 6089, 3569, 2011, 1037, 20116, 2361, 1010, 1996, 4425, 1998, 5157, 19939, 2075, 13792, 2008, 2097, 2022, 2734, 1010, 1998, 12817, 2006, 4730, 3891, 2968, 9942, 2000, 4013, 3676, 27965, 25084, 6162, 4539, 3798, 1997, 7396, 2836, 1012, 102, 101, 22267, 1010, 1999, 2930, 1018, 1010, 2057, 16519, 1998, 6848, 2330, 3471, 2008, 2342, 2000, 13332, 1999, 2344, 2000, 2191, 2023, 3921, 2025, 2069, 2702, 3085, 2021, 4621, 1999, 3218, 1012, 102, 101, 2096, 12771, 8335, 2152, 2836, 2000, 7846, 2003, 1037, 16166, 3200, 2005, 1037, 10539, 2897, 2326, 2000, 2031, 1010, 1037, 3145, 3277, 4320, 2011, 1037, 2326, 2003, 1996, 3465, 3378, 2007, 12771, 2023, 2836, 1012, 102, 101, 5834, 2006, 1996, 2326, 1998, 1996, 6123, 1010, 1996, 5166, 2800, 2005, 13868, 1998, 6605, 4219, 2000, 8116, 4539, 3798, 1997, 2836, 8137, 1010, 2411, 2011, 2898, 17034, 1012, 102, 101, 2005, 2742, 1010, 5136, 1996, 3465, 1013, 2836, 3119, 1011, 2125, 1997, 12725, 2008, 5585, 29625, 2683, 1003, 1997, 7396, 11186, 2131, 13995, 2306, 2184, 5796, 1999, 2019, 4816, 1041, 15549, 7368, 6202, 2291, 6431, 1037, 2235, 1010, 2334, 1041, 29624, 9006, 5017, 3401, 10802, 1012, 102, 101, 1999, 2023, 2553, 1010, 1996, 3465, 3378, 2007, 2025, 6364, 11186, 1999, 1037, 23259, 5450, 2024, 3497, 2000, 2022, 6022, 3020, 2005, 1996, 6202, 2291, 1012, 102, 101, 8821, 1010, 2107, 1037, 2291, 2003, 3497, 2000, 5478, 1037, 3469, 5166, 2005, 9347, 2075, 1998, 6605, 4219, 2107, 2008, 2204, 2836, 2003, 16316, 2007, 2152, 9723, 1012, 102, 101, 6246, 1010, 2057, 2064, 4671, 2023, 16112, 3119, 1011, 2125, 2090, 3465, 1998, 2836, 2004, 4076, 1024, 2445, 1037, 9059, 4539, 2504, 1997, 2836, 1058, 1010, 1037, 2051, 9154, 1050, 1010, 1998, 9723, 1060, 1997, 3116, 1996, 2836, 4539, 1010, 2129, 2323, 4219, 2022, 9347, 2098, 2058, 2051, 2107, 2008, 2057, 102, 101, 2005, 2742, 1010, 1999, 1996, 6202, 2291, 1010, 2057, 2089, 4299, 2000, 2360, 1024, 1000, 2057, 2024, 5585, 29625, 2683, 1003, 3056, 2008, 2057, 2097, 2832, 2035, 14279, 1999, 2104, 2184, 5796, 2058, 1996, 2279, 3204, 1000, 1012, 102, 101, 2028, 2126, 2000, 6162, 2023, 2003, 2000, 9347, 1996, 2291, 2007, 10709, 4219, 1010, 2019, 5724, 2008, 2003, 4445, 22945, 4496, 16166, 2445, 2049, 2152, 3465, 1998, 2256, 10713, 2326, 5166, 1038, 29625, 6516, 1010, 1999, 4507, 2119, 1996, 4219, 2800, 1998, 1996, 5166, 2005, 13868, 2216, 4219, 2097, 2022, 10713, 102, 101, 2144, 7396, 5157, 2064, 2022, 6532, 2100, 1010, 1996, 4072, 4219, 2012, 2151, 2445, 2051, 2000, 3113, 1996, 9059, 2836, 5918, 2036, 9783, 1012, 102, 101, 2947, 1010, 2057, 2031, 1037, 7692, 16169, 3291, 1010, 2028, 2029, 7336, 12503, 1999, 2119, 7692, 5157, 1998, 4425, 2058, 2051, 29625, 2378, 5446, 1010, 2769, 10489, 2227, 2019, 19639, 3291, 1012, 102, 101, 2045, 1010, 2445, 1037, 11103, 1997, 3361, 5693, 1006, 1041, 29625, 2290, 29625, 1010, 15768, 1010, 9547, 1010, 16942, 1010, 4385, 29625, 1007, 1010, 2027, 4299, 2000, 20155, 2135, 14358, 1996, 3891, 3378, 2007, 1996, 11103, 29625, 10760, 3643, 1011, 2012, 1011, 3891, 1006, 13075, 1007, 1031, 1021, 1033, 1997, 1037, 11103, 7680, 7849, 10057, 2049, 2561, 3891, 2241, 102, 101, 1996, 3125, 1999, 6605, 1996, 11103, 2003, 2059, 2000, 2191, 6413, 3119, 1011, 12446, 2090, 1060, 1010, 1058, 1010, 1998, 1050, 2083, 9414, 5512, 1998, 2968, 1997, 1996, 11103, 1012, 102, 101, 4050, 1010, 2023, 2003, 2589, 2011, 15696, 6413, 8045, 4275, 1998, 3525, 2002, 2094, 4726, 3891, 2478, 16942, 1010, 13131, 3563, 12450, 1997, 15768, 2008, 2024, 19762, 23900, 1999, 3976, 1010, 1998, 2061, 5743, 1012, 102, 101, 1996, 8050, 7337, 2003, 6202, 1998, 1996, 6502, 2008, 12939, 2009, 2003, 6089, 2005, 1037, 5041, 2846, 1997, 3361, 5693, 29625, 5856, 8159, 1996, 12319, 2682, 1010, 2057, 2947, 16599, 1996, 9366, 1997, 1037, 2836, 13075, 2029, 2839, 10057, 4539, 3798, 1997, 2836, 2004, 2649, 1999, 2256, 6202, 2742, 2682, 1012, 102, 101, 2445, 1037, 4539, 2836, 13075, 1010, 2256, 3125, 2059, 2003, 2000, 3073, 1996, 4072, 6502, 2061, 4219, 2005, 1996, 2326, 2064, 2022, 8073, 9347, 2098, 2107, 2008, 1996, 13075, 2003, 2777, 1006, 2930, 1017, 1007, 1012, 102, 101, 2096, 2023, 3259, 7679, 7580, 2006, 1996, 2836, 13075, 1010, 1999, 6958, 2256, 3921, 2064, 2022, 4162, 2000, 2060, 4539, 12046, 2015, 2004, 2092, 1006, 1041, 29625, 2290, 29625, 1010, 11343, 1010, 2951, 15258, 1010, 4385, 29625, 1007, 1012, 102, 101, 23569, 27605, 6774, 2005, 14930, 1997, 12046, 2015, 7453, 2003, 2036, 1037, 6061, 2021, 2097, 5478, 2108, 2583, 2000, 2944, 1998, 21933, 8737, 9232, 1996, 2536, 4216, 1997, 10318, 12503, 1998, 2000, 3305, 2037, 5816, 5857, 2000, 2169, 6922, 1997, 1037, 4539, 4800, 22172, 6132, 19301, 13075, 1012, 102, 101, 2096, 1996, 2836, 13075, 4136, 2149, 2008, 1060, 1003, 1997, 2051, 2057, 2079, 2025, 4530, 2917, 2070, 4539, 2504, 1997, 2836, 1058, 1010, 2009, 2515, 2025, 2360, 2505, 2055, 1996, 2846, 1997, 2836, 5359, 2005, 1996, 2060, 1006, 2531, 1597, 1060, 1007, 1003, 1997, 7396, 11186, 1012, 102, 101, 5834, 2006, 1996, 2326, 1010, 2025, 3116, 2256, 2836, 3125, 2011, 1037, 2235, 3815, 2089, 2022, 2172, 2062, 11701, 2084, 4394, 2256, 2836, 3125, 2011, 1037, 2898, 7785, 1006, 1041, 29625, 2290, 29625, 1010, 7510, 2035, 1006, 2531, 1597, 1060, 1007, 1003, 1997, 2035, 7396, 11186, 1999, 1037, 6202, 2291, 6431, 5815, 2019, 102, 101, 2947, 1010, 1999, 2804, 2000, 1996, 13075, 1010, 2057, 2052, 2066, 1037, 12046, 2008, 2839, 10057, 2256, 2836, 3289, 2005, 2122, 2041, 14355, 3572, 1012, 102, 101, 2144, 2122, 3572, 2024, 1996, 13191, 2553, 1010, 2023, 2832, 2064, 7687, 2022, 7021, 2004, 4053, 2491, 2073, 2054, 2057, 2024, 2667, 2000, 4503, 2003, 1037, 20155, 2126, 1997, 6605, 2023, 4053, 2491, 29625, 17048, 10889, 1010, 2019, 19639, 4145, 18653, 1999, 5446, 1012, 102, 101, 1996, 18462, 3643, 1011, 2012, 1011, 3891, 1006, 26226, 2906, 1007, 1031, 2321, 1033, 1997, 1037, 11103, 24110, 3775, 14213, 1996, 3517, 3279, 2006, 1996, 11103, 22442, 2006, 1996, 3279, 17003, 1058, 6363, 1012, 102, 101, 4162, 1999, 1037, 15078, 4292, 1010, 2057, 2947, 16599, 1996, 19639, 2801, 1997, 1037, 2836, 26226, 2906, 2029, 2003, 1996, 3517, 2836, 5359, 2058, 2051, 2558, 1050, 11398, 2058, 2035, 11186, 3005, 2836, 2001, 4788, 2084, 1058, 1012, 102, 101, 1996, 3891, 2968, 3291, 2003, 2059, 2048, 10371, 1012, 102, 101, 2034, 1010, 2445, 1037, 4539, 13075, 1998, 5166, 1038, 2005, 1037, 3327, 2897, 2326, 1010, 2256, 2034, 3125, 2003, 2000, 9347, 1037, 5500, 2275, 1997, 4219, 2005, 1996, 2326, 2107, 2008, 13075, 2003, 8510, 1999, 2296, 2051, 3357, 2058, 1996, 2051, 13483, 1050, 2096, 7163, 4328, 6774, 3465, 1998, 3116, 1996, 5166, 102, 101, 2057, 2191, 2053, 17568, 2055, 1996, 2051, 14350, 2000, 9347, 4219, 5816, 2000, 1050, 1012, 102, 101, 2612, 1010, 2057, 7868, 2008, 1996, 2051, 2000, 4685, 7692, 9347, 2075, 2003, 5387, 2098, 2046, 1996, 11103, 1997, 7692, 8311, 4663, 2013, 1996, 20116, 2361, 2107, 2008, 1000, 7160, 2015, 1000, 2000, 2131, 2067, 2000, 1996, 4539, 7692, 2275, 2064, 2022, 2081, 1999, 1037, 23259, 5450, 1999, 3433, 2000, 5159, 15428, 2096, 2145, 102, 101, 2117, 1010, 2445, 1996, 2836, 13075, 1010, 2256, 2117, 7863, 2003, 2000, 18478, 1996, 2836, 26226, 2906, 1012, 102, 101, 5560, 1010, 2122, 3289, 17637, 2000, 1024, 1006, 1045, 1007, 2667, 2000, 8116, 1037, 8335, 4539, 2504, 1997, 2836, 2000, 1996, 3484, 1997, 7846, 2058, 2070, 2051, 2558, 1998, 1006, 2462, 1007, 2667, 2000, 5676, 2008, 2043, 2057, 2079, 2025, 3113, 2256, 2836, 7889, 2008, 1996, 4525, 2836, 2003, 2025, 102, 101, 2023, 2003, 3223, 2061, 2057, 2064, 8752, 1037, 2326, 1005, 2015, 4672, 7670, 2096, 2036, 4346, 2438, 4469, 3977, 2107, 2008, 15428, 1998, 7233, 2064, 2022, 8971, 2096, 2145, 12771, 8335, 2152, 2836, 2000, 7846, 1012, 102, 101, 2028, 2126, 2000, 14570, 2023, 2003, 2000, 3432, 2058, 21572, 17084, 4219, 2000, 5047, 4672, 5157, 1012, 102, 101, 2096, 2107, 2019, 3921, 2003, 2147, 3085, 2005, 3056, 4187, 2897, 2578, 2073, 1996, 5366, 2024, 11701, 1010, 2009, 2003, 2145, 3227, 6450, 2000, 2079, 1010, 1000, 7597, 2041, 1000, 2116, 2897, 2578, 1010, 1998, 2411, 5942, 3278, 4722, 11532, 2000, 3857, 1998, 6133, 2107, 2019, 6502, 29625, 8663, 3366, 15417, 2135, 1010, 2057, 16599, 2019, 102, 101, 1999, 5688, 2000, 3025, 2147, 1031, 1018, 1033, 1010, 2029, 3818, 2714, 6502, 2015, 1010, 2182, 2057, 16599, 20116, 4523, 2073, 4219, 2024, 21125, 1999, 2119, 2686, 1998, 2051, 1998, 3734, 2083, 1037, 2275, 1997, 6089, 2029, 3119, 1037, 4666, 1997, 15078, 5693, 1006, 9671, 4127, 1997, 7692, 8311, 1007, 1012, 102, 101, 2083, 2565, 12644, 6202, 1999, 2107, 6089, 1010, 3784, 8822, 1998, 2836, 19939, 2075, 1010, 1998, 11887, 2578, 5051, 6895, 8873, 2278, 2592, 1010, 2256, 4708, 2003, 2059, 2000, 9570, 15502, 11103, 2015, 1997, 15078, 5693, 2008, 6614, 2000, 3113, 2256, 4539, 2836, 13075, 1998, 26226, 2906, 1012, 102, 101, 1999, 1996, 3818, 2944, 1010, 2897, 2578, 2224, 4219, 1999, 1996, 20116, 2361, 2000, 3073, 2326, 2000, 7846, 1998, 2578, 2224, 20155, 3891, 2968, 5461, 2096, 15929, 16594, 7778, 3674, 19612, 1999, 1996, 20116, 2361, 2000, 8116, 4539, 3798, 1997, 2836, 13075, 1998, 26226, 2906, 2012, 1037, 6263, 3465, 1012, 102, 101, 6168, 1999, 5446, 1010, 1996, 7337, 2003, 6202, 1998, 1996, 6502, 2003, 10067, 1998, 4964, 3318, 6089, 2000, 6133, 3361, 3891, 1010, 2182, 2057, 2036, 2224, 6202, 1998, 6133, 15078, 3891, 2478, 6089, 1999, 15078, 4219, 1012, 102, 101, 2478, 2107, 6089, 1010, 1996, 2801, 2003, 2008, 2326, 9224, 1010, 2030, 2062, 3497, 3454, 2030, 14546, 3772, 2006, 2037, 6852, 1010, 9570, 1998, 6133, 11103, 2015, 1997, 15078, 5693, 2000, 6162, 4539, 3798, 1997, 2836, 13075, 1998, 26226, 2906, 1012, 102, 101, 4621, 2968, 1997, 2107, 11103, 2015, 2097, 12530, 24670, 2006, 2256, 3754, 2000, 2839, 4697, 7692, 4425, 1998, 5157, 2058, 2051, 1010, 1999, 3327, 23900, 15428, 2306, 1996, 20116, 2361, 1012, 102, 101, 1996, 3078, 3114, 2005, 1996, 4598, 1997, 1037, 20116, 2361, 2003, 7778, 3674, 19612, 1012, 102, 101, 2009, 2003, 2062, 8114, 2000, 2031, 3674, 2897, 2578, 3745, 1037, 2691, 6502, 2008, 2064, 16888, 15428, 1998, 19239, 1999, 7396, 5157, 2084, 2009, 2003, 2000, 2031, 2296, 2326, 2058, 21572, 17084, 4219, 2000, 8752, 4672, 7692, 5918, 2478, 4722, 6502, 1012, 102, 101, 1996, 25323, 2003, 2008, 1037, 20116, 2361, 2097, 4050, 6614, 2000, 3073, 1037, 4770, 1997, 9572, 4219, 3760, 2084, 1996, 7680, 1997, 4672, 7692, 7670, 2408, 2035, 2578, 1012, 102, 101, 2009, 2097, 2059, 11160, 2006, 7778, 3674, 19612, 1998, 6599, 2013, 7846, 1998, 5159, 5157, 2058, 2051, 1999, 10561, 3251, 2000, 7949, 1013, 7859, 7692, 3977, 29625, 10760, 5310, 2947, 5344, 2048, 3145, 8465, 1024, 1006, 1045, 1007, 1996, 20116, 2361, 2064, 2025, 5047, 2296, 2825, 4666, 1997, 7692, 11186, 1006, 1041, 29625, 2290, 29625, 1010, 2035, 102, 101, 1996, 25323, 2003, 2947, 2008, 5198, 2097, 2342, 2000, 4685, 15078, 3891, 2968, 2000, 6162, 4539, 2836, 13075, 1998, 26226, 2906, 3798, 2004, 2649, 1999, 2930, 1016, 29625, 2509, 2096, 2036, 2108, 2522, 29076, 13471, 2102, 1997, 10713, 7692, 3977, 1998, 2051, 1011, 9671, 4425, 1998, 5157, 1012, 102, 101, 2023, 9587, 29068, 8520, 1996, 2342, 2005, 6089, 2008, 9585, 12379, 2002, 2094, 4726, 1006, 1041, 29625, 2290, 29625, 1010, 14889, 1999, 4185, 6681, 2005, 2048, 2420, 1999, 1996, 2925, 2005, 2070, 3976, 1999, 11162, 1997, 1037, 6532, 1999, 7396, 5157, 2107, 2004, 1037, 2047, 4031, 2713, 1007, 1012, 102, 101, 6089, 1999, 15078, 5693, 3073, 1996, 6502, 2008, 3499, 5198, 2000, 6133, 4539, 2836, 13075, 1998, 26226, 2906, 3798, 3081, 6202, 1997, 15078, 5693, 1012, 102, 101, 2742, 15078, 5693, 2453, 2421, 8311, 2008, 3073, 4056, 2224, 1997, 1037, 3698, 2030, 14516, 5527, 2058, 3563, 6993, 1997, 2051, 1012, 102, 101, 2000, 3499, 2578, 2000, 8790, 3973, 9878, 2107, 4219, 1006, 1041, 29625, 2290, 29625, 1010, 1999, 3433, 2000, 1037, 5573, 6532, 1999, 5157, 1010, 2030, 3383, 1037, 9874, 8131, 1037, 2236, 3623, 1999, 5157, 1007, 1010, 1037, 20116, 2361, 2097, 10124, 2135, 3073, 7516, 6089, 1999, 13045, 1998, 5527, 2847, 1012, 102, 101, 2005, 2742, 1010, 1037, 26163, 3206, 1999, 1996, 13045, 3962, 3006, 2453, 20648, 4056, 2224, 1997, 1037, 3327, 13045, 2058, 2051, 2558, 1031, 1056, 1015, 1010, 1056, 1016, 1033, 1012, 102, 101, 2057, 16599, 2478, 3115, 8311, 1010, 2750, 4022, 28424, 3314, 1010, 2000, 3443, 3006, 6381, 3012, 1998, 5326, 8122, 29625, 2378, 2804, 2000, 3962, 6089, 1010, 1037, 20116, 2361, 2097, 3749, 2012, 2560, 1037, 17795, 3006, 1998, 3383, 2019, 7047, 3006, 1012, 102, 101, 17795, 6089, 3119, 17795, 8311, 1010, 2169, 1997, 2029, 2003, 2019, 3820, 2000, 4965, 2030, 5271, 2019, 11412, 2012, 3056, 2051, 1999, 1996, 2925, 2012, 1037, 3056, 3976, 1012, 102, 101, 1999, 1996, 2553, 1997, 1037, 20116, 2361, 1010, 2107, 1037, 3206, 2052, 20648, 2224, 1997, 1037, 3327, 13045, 2058, 2925, 2051, 2558, 1031, 1056, 1015, 1010, 1056, 1016, 1033, 2012, 3976, 1052, 1042, 1012, 102, 101, 2122, 8311, 3499, 5198, 2000, 17834, 3891, 2349, 2000, 5285, 10450, 18605, 1999, 7396, 5157, 2005, 2037, 2326, 2004, 2092, 2004, 9572, 7396, 5157, 2005, 4207, 4219, 2029, 2064, 3426, 15316, 3976, 5750, 1998, 7692, 11343, 1012, 102, 101, 2004, 2019, 2742, 1010, 6814, 2008, 1037, 2326, 6872, 4282, 2008, 5157, 2005, 2014, 2326, 2003, 2183, 2000, 3623, 1999, 2382, 2420, 2349, 2000, 1037, 4031, 4888, 1012, 102, 101, 2738, 2084, 3403, 2127, 2008, 2051, 2000, 5309, 1996, 4219, 1010, 2012, 2029, 2051, 1996, 7597, 2071, 2031, 7671, 2000, 4895, 7011, 14550, 8231, 2152, 3798, 2349, 2000, 6327, 5876, 1006, 1041, 29625, 2290, 29625, 2060, 2578, 2713, 2012, 2105, 1996, 2168, 2051, 1010, 6209, 3692, 1010, 4385, 29625, 1007, 1010, 2016, 2064, 2612, 5309, 1037, 2275, 102, 101, 1996, 13075, 1998, 26226, 2906, 1997, 2023, 2047, 11103, 2003, 6516, 5301, 2005, 1996, 2558, 2877, 2039, 2000, 1996, 4888, 2349, 2000, 1996, 17834, 1012, 102, 101, 2000, 3305, 1996, 2553, 2043, 1996, 5025, 3976, 1997, 1996, 4219, 2006, 4888, 2003, 2896, 2084, 2054, 1996, 5310, 3825, 3081, 1996, 17795, 3206, 1010, 2028, 2064, 4009, 2019, 23323, 2000, 5427, 1010, 2029, 18227, 1996, 12482, 5178, 3891, 1006, 2054, 2057, 2428, 4737, 2055, 1007, 1010, 2750, 1996, 2755, 2008, 102, 101, 1999, 2804, 1010, 2578, 2064, 24501, 5349, 9987, 4219, 2323, 2037, 3791, 2689, 1012, 102, 101, 2144, 1996, 20116, 2361, 8617, 1996, 4219, 1010, 2009, 2097, 2491, 1996, 4425, 1997, 2047, 15078, 5693, 2046, 1996, 6089, 2058, 2051, 1012, 102, 101, 2009, 2003, 2036, 4276, 7302, 2041, 2008, 1996, 6089, 2057, 16599, 8676, 1997, 8311, 2005, 2309, 1011, 13045, 4219, 1012, 102, 101, 2008, 2003, 1010, 2057, 2079, 2025, 5136, 20723, 2005, 25946, 1997, 4219, 1006, 1045, 29625, 2063, 29625, 1010, 22863, 23207, 4818, 20723, 1007, 2012, 1996, 7290, 2504, 1997, 1996, 2291, 1012, 102, 101, 2023, 2003, 2589, 3952, 2004, 2019, 4646, 1997, 1996, 2203, 1011, 2000, 1011, 2203, 6958, 1031, 2385, 1033, 1998, 2256, 6772, 2008, 2116, 2537, 2897, 2578, 2097, 18547, 4297, 28578, 21050, 9710, 2013, 7704, 16169, 2015, 1012, 102, 101, 2005, 2742, 1010, 1037, 5310, 28946, 2453, 2215, 4185, 14164, 1998, 2022, 5627, 2000, 3477, 1002, 2531, 2021, 2089, 2036, 2022, 5627, 2000, 5138, 3590, 14164, 2005, 1002, 2753, 2030, 2151, 7399, 2135, 18953, 1006, 1001, 3630, 6155, 1010, 3976, 1007, 3940, 1999, 2090, 1012, 102, 101, 3602, 2008, 2023, 4832, 1999, 5688, 2000, 5500, 9798, 10058, 2107, 2004, 2897, 3231, 8270, 2015, 1031, 1019, 29623, 16932, 29623, 15136, 1033, 1010, 2073, 5198, 4703, 2079, 6148, 2000, 2448, 2006, 3563, 14930, 1997, 4219, 2000, 4685, 3563, 7885, 1006, 1041, 29625, 2290, 29625, 1010, 26743, 8553, 5852, 1010, 5852, 2478, 3563, 2897, 2327, 20792, 1010, 4385, 29625, 1007, 1012, 102, 101, 6202, 2005, 25946, 1997, 4219, 2012, 1996, 7290, 2504, 1999, 1037, 20116, 2361, 2515, 2025, 3653, 20464, 12672, 1996, 2224, 1997, 15078, 3891, 2968, 1012, 102, 101, 5834, 2006, 1996, 6202, 7337, 4846, 1010, 2009, 2071, 2191, 9798, 1996, 3465, 2000, 6162, 2070, 4539, 2504, 1997, 13075, 2062, 3375, 2174, 1012, 102, 101, 2005, 2742, 1010, 2065, 1996, 3006, 6753, 6202, 1997, 15275, 25946, 1997, 4219, 1010, 2023, 3084, 24110, 27351, 2075, 1996, 3006, 3643, 1997, 2019, 15275, 10810, 1997, 4219, 2062, 3697, 1012, 102, 101, 1999, 5688, 1010, 1037, 26163, 3006, 2008, 14279, 8311, 2005, 2309, 3630, 3207, 4219, 2003, 6082, 2000, 3114, 2055, 1012, 102, 101, 2007, 16367, 8311, 1010, 3439, 7597, 2064, 2022, 2109, 2000, 7633, 3006, 5157, 2005, 13045, 4219, 1998, 2122, 7597, 2064, 3525, 2022, 2109, 2004, 2112, 1997, 11103, 20600, 1012, 102, 101, 2323, 5198, 5478, 3375, 7692, 14930, 1006, 1041, 29625, 2290, 29625, 1010, 1000, 1022, 14164, 2005, 1037, 2154, 2030, 3904, 2012, 2035, 1000, 1007, 1010, 2057, 2903, 2008, 2107, 11186, 2064, 2022, 28959, 2083, 3905, 6089, 3498, 2011, 2353, 4243, 2478, 7772, 3006, 10595, 2107, 22863, 23207, 4818, 10470, 2015, 1031, 1020, 1010, 1022, 1010, 2184, 102, 101, 2004, 2112, 1997, 6605, 13075, 1998, 26226, 2906, 1010, 2178, 3145, 2112, 1997, 15078, 3891, 2968, 2003, 3161, 8822, 1998, 19939, 2075, 1997, 2119, 3265, 2897, 2326, 5157, 1998, 9572, 7692, 5157, 2058, 2035, 2578, 1012, 102, 101, 1996, 3114, 2023, 2003, 2590, 2003, 2138, 13075, 1998, 26226, 2906, 2024, 4539, 12046, 2015, 2008, 2024, 2981, 1997, 2147, 11066, 2946, 1012, 102, 101, 2027, 3432, 20648, 7778, 5918, 2008, 2442, 2022, 2777, 2058, 2151, 2147, 11066, 2058, 1037, 9675, 2051, 2558, 1012, 102, 101, 1037, 14108, 1997, 4219, 2008, 6010, 2836, 13075, 1998, 26226, 2906, 2005, 2019, 2779, 2147, 11066, 2089, 2022, 3294, 13990, 2005, 2178, 2147, 11066, 7978, 2000, 1010, 2360, 1010, 1037, 5956, 4306, 1012, 102, 101, 8821, 1010, 9962, 6327, 1037, 3188, 2072, 3716, 2055, 2326, 5157, 1010, 1037, 3145, 7337, 2005, 6605, 3891, 2097, 2022, 3161, 8822, 1998, 19939, 2075, 1997, 7692, 5157, 1998, 2478, 5157, 19939, 2015, 2004, 2112, 1997, 3161, 15078, 11103, 2968, 29625, 5332, 4328, 8017, 2135, 1010, 2096, 1996, 9572, 7692, 4425, 1997, 1037, 20116, 2361, 2003, 3497, 2000, 2022, 102, 101, 14164, 1999, 1996, 2291, 2064, 5823, 1010, 2836, 15428, 2064, 5258, 1010, 1998, 2119, 2089, 2022, 23900, 2408, 3056, 4520, 1997, 6681, 2012, 2367, 2685, 1999, 2051, 1012, 102, 101, 2947, 1010, 2096, 19939, 2075, 5157, 2003, 2763, 2062, 2590, 1010, 19939, 2075, 1996, 7692, 4425, 3253, 2011, 1037, 20116, 2361, 2003, 2036, 9280, 7882, 29625, 29278, 19281, 16643, 3070, 5157, 1998, 4425, 2024, 2025, 4498, 2047, 3471, 1012, 102, 101, 3025, 2147, 1010, 2005, 2742, 1010, 2038, 10847, 11268, 16281, 1996, 7692, 5918, 1997, 2897, 2578, 1031, 1015, 29623, 2509, 29623, 16576, 1033, 1998, 2839, 6026, 1996, 4945, 6459, 1997, 2312, 5500, 3001, 1031, 2539, 1033, 1012, 102, 101, 1996, 2280, 2064, 2022, 7021, 2004, 4346, 3265, 2951, 2685, 2005, 2326, 5157, 2445, 3563, 2147, 11066, 2015, 1010, 2096, 1996, 3732, 2064, 2022, 7021, 2004, 4346, 3053, 1996, 12450, 2057, 6148, 1012, 102, 101, 1999, 1996, 2553, 1997, 19939, 2075, 7692, 5157, 1010, 2028, 2825, 5576, 2005, 1037, 20116, 2361, 2453, 2022, 2005, 1996, 20116, 2361, 2000, 5441, 1998, 9167, 7692, 8192, 6747, 2000, 5097, 1010, 2029, 2453, 2059, 2224, 2023, 2592, 1999, 5257, 2007, 4722, 4646, 1011, 3563, 6747, 1006, 1041, 29625, 2290, 29625, 1010, 2193, 1997, 11186, 2363, 102, 101, 1999, 1996, 2553, 1997, 19939, 2075, 7692, 4425, 1010, 2057, 2071, 2059, 21155, 1996, 3463, 2013, 1031, 2539, 1033, 1012, 102, 101, 2426, 2060, 2477, 1010, 2048, 3145, 3463, 1997, 2008, 3259, 2020, 2008, 2019, 3265, 3698, 1005, 2015, 11047, 24475, 1998, 11047, 16344, 2064, 2022, 10173, 2007, 9608, 10640, 1998, 2008, 2312, 1011, 4094, 23900, 15428, 2024, 2691, 1999, 2613, 3001, 1012, 102, 101, 2027, 7718, 2122, 1044, 22571, 14573, 23072, 2006, 2093, 4235, 5500, 3001, 1006, 4774, 20470, 1031, 2403, 1033, 1010, 1040, 3619, 1010, 1998, 1996, 4773, 1007, 1998, 2947, 2122, 3463, 2024, 3497, 2000, 2022, 4235, 12711, 1012, 102, 101, 1996, 25323, 2003, 2008, 19939, 2075, 1997, 7692, 4425, 1999, 1996, 9572, 2003, 2119, 6742, 1998, 9280, 2590, 2005, 6605, 2836, 13075, 1998, 26226, 2906, 1999, 2897, 2578, 1012, 102, 101, 2633, 1010, 15078, 3891, 2968, 2003, 20076, 2000, 4945, 2065, 2009, 3084, 2311, 10539, 2897, 2578, 15241, 13988, 17198, 8462, 1998, 3375, 1012, 102, 101, 2096, 6202, 1998, 15078, 6089, 2011, 1996, 20116, 2361, 3640, 1996, 7337, 1998, 6502, 2000, 9585, 7375, 1997, 15078, 3891, 2968, 9942, 1010, 4821, 1996, 7781, 1997, 2216, 9942, 3791, 2000, 2022, 16984, 1998, 6472, 2000, 8790, 3973, 9347, 1037, 2326, 1005, 2015, 4219, 2058, 2051, 1012, 102, 101, 4919, 1010, 2023, 2097, 4372, 14162, 1024, 1006, 1045, 1007, 19939, 2075, 7692, 5157, 1998, 4425, 2119, 2005, 1996, 2326, 1998, 1996, 2291, 1999, 1996, 9572, 1006, 1996, 3732, 2089, 2022, 3024, 2004, 1037, 4207, 2326, 9280, 1007, 1010, 1006, 2462, 1007, 12515, 1996, 6413, 4297, 28578, 21050, 3431, 1999, 1037, 2326, 1005, 2015, 11103, 102, 101, 1037, 3145, 4119, 2097, 2947, 2022, 12697, 16744, 1998, 17928, 2015, 2000, 6509, 1999, 8285, 18900, 2075, 2122, 4084, 2004, 2172, 2004, 2825, 1998, 16572, 1996, 3463, 29625, 19927, 12138, 5198, 2089, 2224, 1996, 20116, 2361, 1005, 2015, 16744, 1998, 17928, 2015, 3495, 2000, 10408, 3891, 2968, 9942, 1010, 2116, 5198, 2097, 2022, 2488, 2366, 2011, 2353, 4243, 102, 101, 2107, 2353, 4243, 2024, 19639, 2000, 3361, 18934, 2007, 5198, 4346, 2152, 1011, 2504, 3891, 2968, 11100, 1006, 1041, 29625, 2290, 29625, 1010, 1996, 2326, 1005, 2015, 4539, 13075, 1998, 26226, 2906, 1007, 1998, 1996, 2353, 4243, 14972, 3891, 2968, 9942, 2008, 3113, 2122, 11100, 2006, 2037, 6852, 1012, 102, 101, 2144, 2009, 2003, 9832, 2008, 2169, 4646, 2097, 5478, 2049, 2219, 4310, 3891, 2968, 5656, 1010, 11103, 10489, 2089, 9280, 21155, 18730, 1997, 4094, 2011, 12151, 3891, 2968, 1000, 2640, 7060, 1000, 2029, 2599, 2000, 16381, 21335, 3468, 3891, 2968, 5656, 24977, 1012, 102, 101, 5198, 2052, 2059, 2031, 1996, 5724, 1997, 8130, 1998, 10549, 1996, 3891, 2968, 5656, 2008, 2003, 2087, 8702, 2000, 2068, 2302, 2108, 4986, 2007, 1996, 4751, 1997, 2129, 1996, 5656, 4152, 7528, 2083, 1996, 6089, 2006, 1996, 20116, 2361, 1012, 102, 101, 1999, 2023, 3259, 1010, 2057, 3818, 2019, 3921, 2005, 2311, 3811, 10539, 2897, 2578, 2008, 21155, 2015, 1037, 4207, 4770, 1997, 15078, 4219, 7801, 2083, 6089, 1998, 3266, 2478, 20155, 3891, 2968, 5461, 2008, 3119, 2125, 3465, 1010, 2836, 1010, 1998, 3891, 2000, 4013, 3676, 27965, 25084, 6162, 4539, 3798, 1997, 2836, 1012, 102, 101, 2256, 3921, 9891, 7780, 2013, 19639, 3891, 2968, 5461, 2109, 1999, 5446, 2000, 20155, 2135, 6133, 1996, 3891, 3378, 2007, 9662, 7368, 1999, 10067, 1998, 4964, 3318, 6089, 1012, 102, 101, 2096, 2057, 2903, 2045, 2024, 5664, 22617, 2000, 2256, 3921, 1010, 2045, 2024, 6600, 2062, 3980, 2084, 6998, 2012, 2023, 2391, 1998, 2582, 2470, 11131, 2122, 3314, 2003, 2734, 2000, 14358, 2049, 24010, 2005, 2613, 3001, 29625, 5643, 2275, 1997, 3980, 14396, 2000, 20874, 1024, 2129, 2323, 1037, 20116, 2361, 3976, 4219, 1999, 102, 101, 2178, 2465, 1997, 3980, 5936, 11103, 2968, 2164, 1024, 2054, 4127, 1997, 9942, 2097, 2022, 4621, 1998, 2054, 2097, 2027, 4372, 14162, 1010, 2054, 2828, 1997, 7692, 19939, 2075, 13792, 2024, 2734, 1010, 2129, 8321, 2079, 2107, 13792, 2342, 2000, 2022, 2000, 2022, 4621, 1010, 1998, 2064, 2057, 21155, 9942, 1999, 5446, 102, 101, 22267, 1010, 4730, 2897, 2578, 1999, 2023, 2806, 2097, 2022, 1037, 3145, 4119, 1998, 2071, 2191, 2030, 3338, 1996, 24010, 1997, 1996, 3818, 3921, 1012, 102, 101, 2048, 2590, 3980, 2182, 2024, 2947, 1024, 1006, 1045, 1007, 2054, 2323, 1996, 4730, 2944, 1010, 16744, 1010, 1998, 17928, 2015, 2005, 1037, 20116, 2361, 1998, 2049, 6089, 2298, 2066, 1998, 1006, 2462, 1007, 2064, 2057, 9570, 16381, 21335, 3468, 4280, 1997, 3891, 2968, 9942, 2008, 2191, 2009, 3733, 2005, 2590, 4280, 1997, 2897, 102], "tgt": [1, 15078, 3891, 2968, 2005, 2311, 3811, 10539, 2897, 2578, 15775, 3211, 12835, 12895, 1050, 29625, 20979, 5170, 20934, 7856, 5280, 2532, 2980, 3207, 2361, 2692, 2629, 15775, 3211, 12835, 1064, 1064, 15078, 3891, 2968, 1016, 2897, 2326, 2836, 4792, 2005, 2524, 2836, 21586, 5585, 29625, 2683, 2683, 2683, 1003, 11343, 1010, 2035, 14279, 1026, 2382, 3823, 3697, 2000, 6162, 10862, 5157, 1024, 2147, 11066, 9783, 1998, 2064, 2022, 6532, 2100, 4425, 1024, 7692, 3791, 8137, 1998, 2524, 2000, 2933, 2005, 4056, 1998, 2058, 29624, 21572, 17084, 2075, 1002, 1002, 1002, 1010, 2659, 27891, 4207, 6502, 7692, 4425, 9783, 2971, 1010, 15428, 3119, 7245, 4425, 1998, 2836, 21586, 15775, 3211, 12835, 1064, 1064, 15078, 3891, 2968, 1017, 15078, 2326, 10802, 1006, 20116, 2361, 1007, 3125, 1024, 7337, 2000, 6133, 4425, 4219, 1006, 1041, 29625, 2290, 29625, 8241, 14164, 1007, 8752, 4672, 5157, 1997, 2087, 2578, 6089, 1997, 14164, 2169, 13045, 15187, 7692, 8311, 3962, 1010, 17795, 1010, 7047, 8311, 21125, 2241, 2006, 4425, 1998, 5157, 15775, 3211, 12835, 1064, 1064, 15078, 3891, 2968, 1018, 5468, 3891, 2129, 2000, 24110, 27351, 2836, 21586, 3891, 12046, 2015, 1024, 3722, 7778, 7680, 7849, 3111, 1997, 6151, 2229, 7895, 3468, 13105, 2742, 1024, 3643, 1011, 2012, 1011, 3891, 1006, 13075, 1007, 5446, 1024, 1996, 22625, 8203, 4636, 2097, 4558, 2053, 2062, 2084, 1002, 2423, 7382, 7058, 1010, 2007, 5345, 1003, 9723, 22334, 1024, 9733, 29625, 9006, 2097, 2832, 4449, 1999, 2625, 2084, 2382, 3823, 3679, 2005, 5345, 1003, 1997, 2035, 4449, 2048, 7860, 1024, 18422, 13075, 1998, 14639, 4106, 1997, 13075, 15775, 3211, 12835, 1064, 1064, 15078, 3891, 2968, 1019, 18422, 13075, 10250, 2278, 3517, 2836, 4353, 2742, 4118, 1024, 3439, 4725, 1024, 23284, 1010, 10125, 9758, 1010, 6911, 5604, 1052, 20996, 1038, 1037, 1038, 6335, 2009, 1061, 22625, 4636, 5618, 1013, 3279, 1052, 20996, 1038, 1037, 1038, 6335, 2009, 1061, 9733, 29625, 9006, 2344, 2051, 1014, 1016, 1018, 1020, 1022, 2184, 2260, 2403, 2385, 2324, 2322, 2570, 2484, 2656, 2654, 2382, 3590, 4090, 4029, 15775, 3211, 12835, 1064, 1064, 15078, 3891, 2968, 1020, 24134, 13075, 1024, 2944, 4425, 1998, 5157, 2219, 2326, 2147, 11066, 19939, 13045, 2836, 1998, 3119, 19939, 9572, 2147, 11066, 19939, 13075, 2275, 1997, 7801, 13045, 4219, 4425, 15775, 3211, 12835, 1064, 1064, 15078, 3891, 2968, 1021, 14639, 4106, 1997, 13075, 3125, 1024, 2944, 2129, 13075, 9783, 2004, 1996, 2275, 1997, 7692, 8311, 3431, 13075, 1027, 1042, 1006, 2275, 1997, 7692, 8311, 1007, 19939, 5157, 1998, 4425, 14164, 1998, 9572, 2147, 11066, 19939, 2219, 7396, 2147, 11066, 19939, 2944, 11103, 13075, 19948, 2275, 1997, 7692, 8311, 18422, 13075, 8377, 15775, 3211, 12835, 1064, 1064, 15078, 3891, 2968, 1022, 11103, 2968, 3125, 1024, 3113, 4539, 13075, 2306, 5166, 1998, 10124, 3465, 7142, 11103, 20600, 2424, 2800, 2275, 1997, 4219, 2424, 4520, 2008, 6162, 2190, 13075, 3119, 7692, 8311, 4965, 2190, 2275, 2306, 5166, 15775, 3211, 12835, 1064, 1064, 15078, 3891, 2968, 1023, 5446, 1024, 6133, 11103, 13075, 11103, 13075, 4539, 13075, 1024, 1996, 22625, 8203, 4636, 2097, 4558, 2053, 2062, 2084, 1002, 2423, 7382, 7058, 2007, 5345, 1003, 9723, 1012, 3, 9980, 5796, 6199, 2030, 20464, 1052, 20996, 1038, 1037, 1038, 6335, 2009, 1061, 22625, 5618, 1013, 3279, 1041, 15907, 3361, 6089, 5271, 9980, 1030, 1002, 4293, 4965, 1041, 15907, 1030, 1002, 4261, 15775, 3211, 12835, 1064, 1064, 15078, 3891, 2968, 2184, 1052, 20996, 1038, 1037, 1038, 6335, 2009, 1061, 9733, 29625, 9006, 2344, 2051, 1014, 1016, 1018, 1020, 1022, 2184, 2260, 2403, 2385, 2324, 2322, 2570, 2484, 2656, 2654, 2382, 3590, 4090, 4029, 13045, 2549, 22334, 1024, 6133, 11103, 13075, 11103, 13075, 4539, 13075, 1024, 9733, 29625, 9006, 2097, 2832, 4449, 1999, 2625, 2084, 2382, 3823, 2005, 5345, 1003, 1997, 2035, 4449, 1012, 3, 13045, 2487, 13045, 2475, 13045, 2509, 20116, 2361, 5271, 13045, 2487, 1030, 1002, 2753, 4965, 13045, 2549, 1030, 1002, 2382, 15775, 3211, 12835, 1064, 1064, 15078, 3891, 2968, 2340, 2330, 3471, 7692, 8311, 1024, 20874, 1010, 2918, 3197, 4730, 1024, 2944, 1010, 17928, 11643, 4425, 1998, 5157, 11103, 9942, 1024, 3115, 11103, 2015, 6970, 25918, 8010, 1024, 2408, 2367, 20116, 10374, 15775, 3211, 12835, 1064, 1064, 15078, 3891, 2968, 2260, 7091, 4056, 5443, 29625, 4207, 20116, 2361, 1024, 3745, 4219, 3081, 6089, 6162, 2836, 3289, 1999, 1996, 6123, 1997, 4207, 20116, 2361, 24110, 27351, 2836, 3125, 3081, 3891, 12046, 2015, 2066, 13075, 17208, 1998, 14639, 4106, 11103, 20600, 15775, 3211, 12835, 1064, 1064, 15078, 3891, 2968, 2410, 10200, 14816, 15775, 3211, 12835, 1064, 1064, 15078, 3891, 2968, 2403, 3722, 7551, 2326, 2147, 11066, 13045, 15428, 2169, 5227, 5363, 1050, 14164, 18154, 2065, 2119, 14164, 2091, 3478, 5227, 3679, 2326, 11343, 1027, 8246, 7840, 3144, 11186, 2035, 11186, 15775, 3211, 12835, 1064, 1064, 15078, 3891, 2968, 2321, 3463, 2169, 2391, 1024, 2531, 3679, 3216, 1010, 2531, 11186, 1013, 17850, 2], "src_sent_labels": [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], "segs": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "clss": [0, 32, 85, 108, 139, 182, 214, 266, 303, 363, 395, 438, 495, 534, 556, 603, 636, 673, 704, 752, 780, 810, 863, 903, 956, 982, 1016, 1077, 1109, 1146, 1199, 1237, 1278, 1328, 1377, 1432, 1459, 1505, 1541, 1581, 1592, 1646, 1663, 1719, 1739, 1791, 1829, 1848, 1906, 1959, 2009, 2061, 2100, 2143, 2176, 2193, 2237, 2268, 2327, 2377, 2428, 2455, 2479, 2532, 2564, 2608, 2639, 2675, 2714, 2744, 2803, 2830, 2883, 2899, 2924, 2946, 2979, 3018, 3065, 3128, 3155, 3181, 3214, 3236, 3267, 3325, 3363, 3388, 3409, 3444, 3505, 3535, 3576, 3615, 3650, 3708, 3730, 3773, 3812, 3843, 3868, 3917, 3974, 4034, 4085, 4130, 4172, 4227, 4258, 4313, 4367, 4394], "src_txt": ["building reliable network services that can deliver consistent high performance to clients in the presence of failures and bursty demand is expensive and inefficient .", "resources often need to be heavily overprovisioned to accommodate peak demand and the cost of such over-provisioning \" prices out \" many applications that could stand to benefit from a performance safety - net and ultimately provide more reliable service to end users .", "to address these problems , we propose an approach based on a shared computational service provider ( csp ) .", "a csp is an entity which provides massive amounts of widely distributed computation and storage and makes resources available through a mix of spot and derivative markets .", "services obtain resources through the csp and , drawing inspiration from finance , employ quantitative risk management techniques for trading off cost , performance , and risk to probabilistically achieve target levels of delivered client performance .", "building reliable network services that can deliver consistent high performance to clients in the presence of failures and bursty demand is expensive and inefficient .", "resources often need to be heavily overprovisioned to accommodate peak demand and the cost of such overprovisioning \" prices out \" many applications that could stand to benefit from a performance safety - net and ultimately provide more reliable service to end users .", "while shared infrastructures based on service - level agreements ( slas ) are occasionally workable and leverage economies of scale , slas are generally static , long - term contracts .", "consequently , they are typically inefficient ( due to overprovisioning in the contracts ) and / or ineffective at responding to time - varying load in a predictable manner.to address these problems , we propose an approach based on a shared computational service provider ( csp ) .", "a csp is an entity which provides massive amounts of widely distributed computation and storage and makes resources available through a mix of spot and derivative markets 1 .", "services obtain resources through the csp and , drawing inspiration from finance , employ quantitative risk management techniques for trading off cost , performance , and risk to probabilistically achieve target levels of delivered client performance .", "the end goal is to reap the benefits of statistical multiplexing in the csp while also giving applications the infrastructure and tools to quantitatively manage their resource provisioning in the face of time - varying resource supply and demand.the rest of this paper is organized as follows .", "in section 2 , we draw analogies to finance , describe the two key metrics we use to quantify performance risk , and describe the resulting optimization problem that services face over time .", "in section 3 , we then describe the infrastructure needed to support implementation of the aforementioned risk management strategies .", "specifically , this includes the types of markets supported by a csp , the supply and demand forecasting algorithms that will be needed , and touches on programming risk management strategies to probabilistically achieve target levels of client performance .", "lastly , in section 4 , we conclude and discuss open problems that need to solved in order to make this approach not only tenable but effective in practice .", "while delivering consistent high performance to clients is a desirable property for a reliable network service to have , a key issue faced by a service is the cost associated with delivering this performance .", "depending on the service and the context , the budget available for acquiring and managing resources to deliver target levels of performance vary , often by wide margins .", "for example , consider the cost / performance trade - off of ensuring that 99.9 % of client requests get processed within 10 ms in an electronic equities trading system versus a small , local e-commerce provider .", "in this case , the cost associated with not processing requests in a timely manner are likely to be significantly higher for the trading system .", "consequently , such a system is likely to require a larger budget for provisioning and managing resources such that good performance is ensured with high probability .", "formally , we can express this inherent trade - off between cost and performance as follows : given a desired target level of performance v , a time horizon n , and probability x of meeting the performance target , how should resources be provisioned over time such that we can say that we are x % certain that we will deliver at least performance v over the next n time units ?", "for example , in the trading system , we may wish to say : \" we are 99.9 % certain that we will process all trades in under 10 ms over the next month \" .", "one way to achieve this is to provision the system with infinite resources , an option that is neither feasible nor desirable given its high cost and our finite service budget b. hence , in reality both the resources available and the budget for acquiring those resources will be finite .", "since client demand can be bursty , the necessary resources at any given time to meet the desired performance requirements also varies .", "thus , we have a resource allocation problem , one which involves uncertainty in both resource demand and supply over time.in finance , money managers face an analogous problem .", "there , given a portfolio of financial instruments ( e.g. , stocks , bonds , derivatives , etc. ) , they wish to quantitatively assess the risk associated with the portfolio.the value - at - risk ( var ) [ 7 ] of a portfolio summarizes its total risk based on the statement : \" we are x % certain that we will not lose more than v dollars in the next n days \" ( e.g. , x = 99 % and n = 10 days are typical numbers ) .", "the goal in managing the portfolio is then to make appropriate trade - offs between x , v , and n through intelligent composition and management of the portfolio .", "typically , this is done by constructing appropriate mathematical models and subsequently hedging risk using derivatives , purchasing specific quantities of stocks that are negatively correlated in price , and so forth .", "the fundamental mechanism is trading and the infrastructure that enables it is markets for a broad range of financial instruments.given the similarities above , we thus propose the notion of a performance var which characterizes target levels of performance as described in our trading example above .", "given a target performance var , our goal then is to provide the necessary infrastructure so resources for the service can be automatically provisioned such that the var is met ( section 3 ) .", "while this paper focuses exclusively on the performance var , in principle our approach can be applied to other target metrics as well ( e.g. , availability , data reliability , etc. ) .", "optimizing for combinations of metrics simultaneously is also a possibility but will require being able to model and decompose the various sources of underlying uncertainty and to understand their relative contributions to each component of a target multidimensional var .", "while the performance var tells us that x % of time we do not drop below some target level of performance v , it does not say anything about the range of performance delivered for the other ( 100 \u2212 x ) % of client requests .", "depending on the service , not meeting our performance goal by a small amount may be much more acceptable than missing our performance goal by a wide margin ( e.g. , dropping all ( 100 \u2212 x ) % of all client requests in a trading system versus adding an additional 1 ms of processing per request ) .", "thus , in addition to the var , we would like a metric that characterizes our performance goals for these outlier cases .", "since these cases are the uncommon case , this process can essentially be viewed as damage control where what we are trying to develop is a quantitative way of managing this damage control.not surprisingly , an analogous concept arises in finance .", "the conditional value - at - risk ( cvar ) [ 15 ] of a portfolio quantifies the expected loss on the portfolio conditioned on the loss exceeding v dollars .", "applied in a computational setting , we thus propose the analogous idea of a performance cvar which is the expected performance delivered over time period n averaged over all requests whose performance was worse than v .", "the risk management problem is then twofold .", "first , given a target var and budget b for a particular network service , our first goal is to provision a distributed set of resources for the service such that var is satisfied in every time step over the time interval n while minimizing cost and meeting the budget constraint .", "we make no assumptions about the time delays to provision resources relative to n .", "instead , we assume that the time to perform resource provisioning is factored into the portfolio of resource contracts obtained from the csp such that \" deltas \" to get back to the target resource set can be made in a timely manner in response to observed failures while still maintaining the target var .", "second , given the performance var , our second objective is to minimize the performance cvar .", "roughly , these goals translate to : ( i ) trying to deliver a consistent target level of performance to the majority of clients over some time period and ( ii ) trying to ensure that when we do not meet our performance targets that the resulting performance is not exceedingly bad.to achieve these goals , we need access to a large pool of computational resources .", "this is required so we can accommodate a service 's peak demands while also providing enough extra capacity such that failures and recovery can be handled while still delivering consistent high performance to clients .", "one way to accomplish this is to simply overprovision resources to handle peak demand .", "while such an approach is workable for certain critical network services where the costs are acceptable , it is still generally expensive to do , \" prices out \" many network services , and often requires significant internal expertise to build and manage such an infrastructure.consequently , we propose an alternative architecture based on computational service providers ( csps ) .", "in contrast to previous work [ 4 ] , which proposed similar infrastructures , here we propose csps where resources are priced in both space and time and acquired through a set of markets which trade a mix of computational instruments ( varying types of resource contracts ) .", "through programmatic trading in such markets , online monitoring and performance forecasting , and optional servicespecific information , our task is then to construct optimal portfolios of computational instruments that aim to meet our target performance var and cvar .", "in the proposed model , network services use resources in the csp to provide service to clients and services use quantitative risk management techniques while leveraging statistical multiplexing in the csp to deliver target levels of performance var and cvar at a minimum cost .", "whereas in finance , the mechanism is trading and the infrastructure is equity and fixed income markets to manage financial risk , here we also use trading and manage computational risk using markets in computational resources .", "using such markets , the idea is that service operators , or more likely programs or scripts acting on their behalf , construct and manage portfolios of computational instruments to achieve target levels of performance var and cvar .", "effective management of such portfolios will depend fundamentally on our ability to characterize resource supply and demand over time , in particular correlated failures within the csp .", "the primary reason for the existence of a csp is statistical multiplexing .", "it is more efficient to have multiple network services share a common infrastructure that can absorb failures and bursts in client demand than it is to have every service overprovision resources to accommodate peak resource requirements using internal infrastructure .", "the implication is that a csp will typically aim to provide a pool of aggregate resources smaller than the sum of peak resource demands across all services .", "it will then rely on statistical multiplexing and revenue from clients and observed demand over time in deciding whether to extend / collapse resource capacity.the user thus faces two key consequences : ( i ) the csp can not handle every possible mix of resource requests ( e.g. , all services requesting peak resource requirements to meet their target var and cvar levels ) and ( ii ) given that markets are the means by which resources are acquired , the cost of obtaining resources is a time - varying quantity that is a function of supply and demand .", "the implication is thus that users will need to perform computational risk management to achieve target performance var and cvar levels as described in section 2.3 while also being cognizant of finite resource capacity and time - varying supply and demand .", "this motivates the need for markets that enable flexible hedging ( e.g. , locking in 64 machines for two days in the future for some price in anticipation of a burst in client demand such as a new product release ) .", "markets in computational instruments provide the infrastructure that allow users to manage target performance var and cvar levels via trading of computational instruments .", "example computational instruments might include contracts that provide dedicated use of a machine or persistent storage over specific periods of time .", "to allow services to dynamically acquire such resources ( e.g. , in response to a sudden burst in demand , or perhaps a trend indicating a general increase in demand ) , a csp will minimally provide spots markets in node and storage hours .", "for example , a baseline contract in the node spot market might specify dedicated use of a particular node over time period [ t 1 , t 2 ] .", "we propose using standard contracts , despite potential fragmentation issues , to create market liquidity and promote efficiency.in addition to spot markets , a csp will offer at least a futures market and perhaps an options market .", "futures markets trade futures contracts , each of which is an agreement to buy or sell an asset at certain time in the future at a certain price .", "in the case of a csp , such a contract would specify use of a particular node over future time period [ t 1 , t 2 ] at price p f .", "these contracts allow users to hedge risk due to volatility in client demand for their service as well as aggregate client demand for shared resources which can cause adverse price movements and resource availability .", "as an example , suppose that a service operator knows that demand for her service is going to increase in 30 days due to a product launch .", "rather than waiting until that time to purchase the resources , at which time the prices could have swung to unfavorably high levels due to external factors ( e.g. other services release at around the same time , holiday seasons , etc. ) , she can instead purchase a set of futures contracts and lock in a fixed price .", "the var and cvar of this new portfolio is hence improved for the period leading up to the launch due to the hedge .", "to understand the case when the actual price of the resources on launch is lower than what the user paid via the futures contract , one can draw an analogy to insurance , which protects the downside risk ( what we really worry about ) , despite the fact that premiums paid may not be collectible should nothing happen.both spot and derivative markets will be two - sided so that both buyers and sellers can trade csp resources , thereby enabling flexible trading scenarios to occur .", "in addition , services can resell excess resources should their needs change .", "since the csp owns the resources , it will control the supply of new computational instruments into the markets over time .", "it is also worth pointing out that the markets we propose consist of contracts for single - node resources .", "that is , we do not consider bids for baskets of resources ( i.e. , combinatorial bids ) at the lowest level of the system .", "this is done primarily as an application of the end - to - end principle [ 16 ] and our belief that many production network services will derive incremental utility from partial allocations .", "for example , a user ideally might want 64 nodes and be willing to pay $ 100 but may also be willing to accept 32 nodes for $ 50 or any linearly scaled ( #nodes , price ) pair in between .", "note that this stands in contrast to distributed computing environments such as network testbeds [ 5,14,18 ] , where users frequently do seek to run on specific combinations of resources to perform specific experiments ( e.g. , scalability tests , tests using specific network topologies , etc. ) .", "trading for baskets of resources at the lowest level in a csp does not preclude the use of computational risk management .", "depending on the trading mechanism employed , it could make computing the cost to achieve some target level of var more complex however .", "for example , if the market supports trading of arbitrary baskets of resources , this makes quantifying the market value of an arbitrary basket of resources more difficult .", "in contrast , a baseline market that trades contracts for singlenode resources is easier to reason about .", "with standardized contracts , historical prices can be used to gauge market demand for node resources and these prices can subsequently be used as part of portfolio optimization .", "should users require complex resource combinations ( e.g. , \" 8 nodes for a day or none at all \" ) , we believe that such requests can be accommodated through secondary markets operated by third parties using specialized market mechanisms such combinatorial auctions [ 6 , 8 , 10 - 12 ] or exchanges [ 13 ] .", "as part of managing var and cvar , another key part of computational risk management is active monitoring and forecasting of both individual network service demand and aggregate resource demand over all services .", "the reason this is important is because var and cvar are target metrics that are independent of workload size .", "they simply specify statistical requirements that must be met over any workload over a specified time period .", "a batch of resources that meets performance var and cvar for an average workload may be completely insufficient for another workload corresponding to , say , a flash crowd .", "consequently , absent external a priori knowledge about service demand , a key mechanism for managing risk will be active monitoring and forecasting of resource demand and using demand forecasts as part of active computational portfolio management.similarly , while the aggregate resource supply of a csp is likely to be more stable than demand , it too is a time - varying quantity .", "nodes in the system can crash , performance failures can occur , and both may be correlated across certain sets of machines at different points in time .", "thus , while forecasting demand is probably more important , forecasting the resource supply offered by a csp is also potentially relevant.forecasting demand and supply are not entirely new problems .", "previous work , for example , has investigated profiling the resource requirements of network services [ 1,3,17 ] and characterizing the failure characteristics of large distributed systems [ 19 ] .", "the former can be viewed as providing individual data points for service demand given specific workloads , while the latter can be viewed as providing nearly the quantities we seek .", "in the case of forecasting resource demand , one possible solution for a csp might be for the csp to maintain and export resource usage statistics to applications , which might then use this information in combination with internal application - specific statistics ( e.g. , number of requests received over various time periods ) to characterize their resource demands as a function of workload .", "in the case of forecasting resource supply , we could then leverage the results from [ 19 ] .", "among other things , two key results of that paper were that an individual machine 's mttf and mttr can be predicted with reasonable accuracy and that large - scale correlated failures are common in real systems .", "they tested these hypotheses on three widely distributed systems ( planetlab [ 14 ] , dns , and the web ) and thus these results are likely to be widely applicable .", "the implication is that forecasting of resource supply in the aggregate is both practical and potentially important for managing performance var and cvar in network services .", "finally , computational risk management is doomed to failure if it makes building reliable network services overly cumbersome and complex .", "while trading and computational markets by the csp provides the mechanism and infrastructure to enable implementation of computational risk management strategies , ultimately the execution of those strategies needs to be programmed and executed to dynamically provision a service 's resources over time .", "specifically , this will entail : ( i ) forecasting resource demand and supply both for the service and the system in the aggregate ( the latter may be provided as a shared service potentially ) , ( ii ) determining the appropriate incremental changes in a service 's portfolio of computational instruments to meet var at minimal cost and within the service 's budget constraint and to minimize cvar , and ( iii ) performing appropriate trades in the csp 's markets to realize the changes computed in the second step .", "a key challenge will thus be designing protocols and apis to assist in automating these steps as much as possible and composing the results.while sophisticated users may use the csp 's protocols and apis directly to implement risk management strategies , many users will be better served by third parties that specialize in portfolio management services .", "such third parties are analogous to financial advisors with users providing high - level risk management objectives ( e.g. , the service 's target var and cvar ) and the third parties implementing risk management strategies that meet these objectives on their behalf .", "since it is unlikely that each application will require its own unique risk management strategy , portfolio managers may potentially leverage economies of scale by identifying risk management \" design patterns \" which lead to parameterizable risk management strategy implementations .", "users would then have the option of picking and choosing the risk management strategy that is most attractive to them without being concerned with the details of how the strategy gets implemented through the markets on the csp .", "in this paper , we proposed an approach for building highly reliable network services that leverages a shared pool of computational resources accessible through markets and managed using quantitative risk management techniques that trade off cost , performance , and risk to probabilistically achieve target levels of performance .", "our approach draws inspiration from analogous risk management techniques used in finance to quantitatively manage the risk associated with uncertainties in equity and fixed income markets .", "while we believe there are distinct merits to our approach , there are nevertheless more questions than answers at this point and further research exploring these issues is needed to assess its feasibility for real systems.one set of questions relate to pricing : how should a csp price resources in its spot and derivative markets , can we leverage analogous techniques in finance to assist in this process ( e.g. , black - scholes - merton [ 2,9 ] for pricing derivatives ) , and what will the dynamics of such prices look like in practice ?", "another class of questions concerns portfolio management including : what types of strategies will be effective and what will they entail , what type of resource forecasting algorithms are needed , how accurate do such algorithms need to be to be effective , and can we leverage strategies in finance for managing var and cvar ( or related metrics ) in managing computational portfolios ?", "lastly , programming network services in this style will be a key challenge and could make or break the feasibility of the proposed approach .", "two important questions here are thus : ( i ) what should the programming model , protocols , and apis for a csp and its markets look like and ( ii ) can we construct parameterizable classes of risk management strategies that make it easy for important classes of network services to use a csp and deliver reliable , consistent performance to clients ?"], "tgt_txt": "computational risk management for building highly reliable network services chaki ng brent n. chun philip buonadonna hotdep05 chaki ng | | computational risk management 2 network service performance desire for hard performance guarantees 99.999 % availability , all trades < 30 seconds difficult to achieve consistently demand : workload varies and can be bursty supply : resource needs vary and hard to plan for dedicated and over-provisioning $ $ $ , low utilization shared infrastructure resource supply varies competition , failures tradeoff supply and performance guarantees chaki ng | | computational risk management 3 computational service provider ( csp ) goal : mechanism to manage supply resources ( e.g. server nodes ) accommodate peak demand of most services markets of nodes each node sells resource contracts spot , futures , options contracts priced based on supply and demand chaki ng | | computational risk management 4 measure risk how to quantify performance guarantees risk metrics : simple statistical summaries of undesirable outcomes example : value - at - risk ( var ) finance : the fidelity mutual fund will lose no more than $ 25mm monthly , with 95 % probability computation : amazon.com will process orders in less than 30 seconds daily for 95 % of all orders two challenges : calculate var and sensitivity analysis of var chaki ng | | computational risk management 5 calculate var calc expected performance distribution example method : historical methods : variance , monte carlo , stress testing p ro b a b il it y fidelity fund profit / loss p ro b a b il it y amazon.com order time 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 chaki ng | | computational risk management 6 compute var : model supply and demand own service workload forecast node performance and trade forecast aggregate workload forecast var set of accessible node resources supply chaki ng | | computational risk management 7 sensitivity analysis of var goal : model how var varies as the set of resource contracts changes var = f ( set of resource contracts ) forecast demand and supply nodes and aggregate workload forecast own client workload forecast model portfolio var swap set of resource contracts calculate var improvements chaki ng | | computational risk management 8 portfolio management goal : meet target var within budget and minimal cost continuous portfolio optimization find available set of resources find sets that achieve best var trade resource contracts buy best set within budget chaki ng | | computational risk management 9 finance : manage portfolio var portfolio var target var : the fidelity mutual fund will lose no more than $ 25mm monthly with 95 % probability .<q>ibm msft orcl p ro b a b il it y fidelity profit / loss ebay financial markets sell ibm @ $ 75 buy ebay @ $ 37 chaki ng | | computational risk management 10 p ro b a b il it y amazon.com order time 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 node4 computation : manage portfolio var portfolio var target var : amazon.com will process orders in less than 30 seconds for 95 % of all orders .<q>node1 node2 node3 csp sell node1 @ $ 50 buy node4 @ $ 30 chaki ng | | computational risk management 11 open problems resource contracts : pricing , base units programming : model , api modeling supply and demand portfolio strategies : standard portfolios interoperability : across different cspes chaki ng | | computational risk management 12 conclusion dedicated vs. shared csp : share resources via markets achieve performance goals in the context of shared csp quantify performance goal via risk metrics like var calculation and sensitivity analysis portfolio optimization chaki ng | | computational risk management 13 backup slides chaki ng | | computational risk management 14 simple experiment service workload node failures each request tries n nodes randomly if both nodes down failed request daily service availability = failover successful requests all requests chaki ng | | computational risk management 15 results each point : 100 daily runs , 100 requests / hr", "sections": [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12], "token_sections}