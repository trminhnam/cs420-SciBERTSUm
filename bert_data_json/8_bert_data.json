{"src": [101, 1996, 6131, 26876, 3921, 2005, 5903, 9798, 2003, 8702, 2005, 28547, 2040, 6148, 3435, 2458, 12709, 1010, 2152, 3642, 2128, 29624, 8557, 1010, 1998, 19160, 4730, 1010, 2030, 3005, 5097, 8327, 12052, 22334, 15665, 1998, 4807, 7060, 1012, 102, 101, 1054, 15042, 2003, 4235, 4233, 2004, 1996, 4807, 24504, 2005, 5153, 4769, 2686, 7372, 1012, 102, 101, 2174, 1010, 1996, 4807, 8964, 2015, 1997, 4493, 1054, 15042, 1011, 2241, 3001, 2024, 2788, 2019, 2344, 1997, 10194, 3020, 2084, 2216, 2179, 1999, 3811, 15757, 11867, 26876, 3001, 1012, 102, 101, 2023, 3291, 2038, 2947, 2521, 3132, 1996, 5574, 1997, 2152, 1011, 2504, 4730, 4155, 2241, 2006, 6131, 26876, 4275, 1999, 1996, 5903, 9798, 2451, 1012, 102, 101, 2023, 3259, 28062, 1996, 8050, 12546, 1997, 6131, 26876, 4807, 2478, 1037, 2553, 2817, 1997, 2048, 5903, 4730, 4155, 1010, 5512, 2389, 1039, 29622, 29622, 1006, 10507, 1009, 1009, 1007, 1998, 3975, 1011, 1039, 1010, 2008, 3073, 2490, 2005, 1037, 3795, 2171, 2686, 1012, 102, 101, 2000, 5323, 1037, 2691, 7831, 3978, 1010, 2256, 7375, 1997, 10507, 1009, 1009, 2001, 2764, 2000, 2224, 2720, 15042, 1010, 1037, 1054, 15042, 2291, 23569, 27605, 5422, 2005, 6131, 26876, 5903, 9798, 1998, 2241, 2006, 3161, 7696, 1012, 102, 101, 3937, 1054, 15042, 2836, 1999, 10507, 1009, 1009, 2003, 2306, 1037, 5387, 1997, 2048, 2013, 2216, 1997, 3975, 1011, 1039, 1998, 2060, 24732, 9014, 1012, 102, 101, 10507, 1009, 1009, 5097, 4685, 2306, 1037, 5387, 1997, 2048, 2000, 2416, 2013, 12435, 3975, 1011, 1039, 4617, 1010, 2029, 5050, 2019, 2344, 1997, 10194, 7620, 2058, 3025, 10507, 1009, 1009, 24977, 1012, 102, 101, 1996, 3463, 6592, 2008, 1054, 15042, 1011, 2241, 4807, 2064, 2022, 2109, 6464, 1999, 2116, 2152, 1011, 2836, 6131, 26876, 5903, 5097, 1012, 102, 101, 3975, 1011, 1039, 2003, 1037, 5903, 5331, 1997, 1039, 2008, 6753, 8114, 3229, 2000, 3795, 4769, 2686, 2478, 3795, 20884, 2015, 1012, 102, 101, 2009, 3640, 1037, 2235, 2275, 1997, 3795, 3229, 10968, 2015, 1998, 3722, 5903, 1011, 5527, 9621, 8170, 2015, 1012, 102, 101, 1996, 21624, 10438, 3722, 3120, 1011, 2000, 1011, 3120, 21865, 1010, 16401, 1996, 2653, 14305, 2046, 2448, 7292, 3075, 4455, 1012, 102, 101, 1996, 3795, 2171, 2686, 15980, 2019, 11867, 26876, 2944, 1024, 2035, 18017, 15389, 1996, 2168, 2565, 1012, 102, 101, 3975, 1011, 1039, 2038, 2042, 27650, 2000, 2195, 5500, 3638, 4800, 21572, 9623, 21748, 2015, 1998, 2003, 3227, 2200, 8114, 29625, 9468, 1009, 1009, 2003, 1037, 5903, 5331, 1997, 1039, 29622, 29622, 2881, 2005, 1996, 2458, 1997, 4708, 1011, 5903, 4874, 1011, 8048, 3454, 1012, 102, 101, 10507, 1009, 1009, 3594, 13151, 5200, 2000, 10061, 1996, 2367, 4769, 7258, 1999, 2019, 6131, 26876, 4646, 1012, 102, 101, 2009, 3640, 1037, 3795, 2171, 2686, 2408, 13151, 5200, 2083, 3795, 20884, 2015, 1010, 1998, 5903, 2491, 5090, 2008, 3499, 5991, 1997, 3642, 2000, 2022, 6472, 15442, 1012, 102, 101, 1037, 3180, 1039, 29622, 29622, 2465, 2064, 2022, 8319, 2000, 1037, 13151, 4874, 2083, 2653, 14305, 1010, 2437, 2035, 2049, 2270, 4725, 1998, 2951, 7801, 2011, 2060, 13151, 5200, 2478, 3795, 20884, 2015, 29625, 10760, 3145, 5966, 2090, 2122, 4155, 2024, 1024, 2491, 1998, 26351, 8093, 10698, 9276, 1024, 1999, 3975, 1011, 1039, 1010, 1996, 2565, 23448, 2006, 102, 101, 1999, 10507, 1009, 1009, 1010, 2047, 16457, 1997, 2491, 2064, 2022, 2580, 2478, 25645, 1010, 1998, 2491, 5991, 2064, 15389, 15442, 2065, 5754, 17287, 3064, 2007, 1996, 11968, 1998, 11968, 29278, 3145, 22104, 1012, 102, 101, 26351, 8093, 10698, 9276, 2003, 4719, 2478, 4339, 1011, 2320, 26351, 10857, 29625, 23296, 16429, 2389, 2171, 2686, 1024, 1996, 3252, 1997, 3975, 1011, 1039, 1005, 2015, 3795, 2171, 2686, 2003, 2081, 5710, 2000, 1996, 20273, 1999, 2008, 1037, 3795, 20884, 3774, 1997, 1037, 6364, 13045, 2193, 1998, 1037, 2334, 4769, 2006, 2008, 13045, 1012, 102, 101, 1999, 3327, 1010, 20204, 2006, 1996, 13045, 2112, 1997, 1996, 3795, 20884, 2003, 2109, 2000, 3229, 10763, 10857, 2006, 15275, 14164, 1998, 2000, 3659, 27448, 2408, 2035, 14164, 1012, 102, 101, 1996, 3975, 1011, 1039, 2828, 2291, 27343, 3795, 20884, 2015, 2013, 6623, 2334, 3924, 1998, 4807, 3138, 2173, 8073, 2043, 1037, 6556, 20884, 2003, 4315, 27235, 24413, 2094, 1012, 102, 101, 4406, 3975, 1011, 1039, 1010, 3795, 20884, 2015, 1999, 10507, 1009, 1009, 2024, 28670, 1012, 102, 101, 1996, 21624, 2392, 1011, 2203, 16315, 2035, 3795, 20884, 4315, 27235, 24413, 2015, 2046, 1054, 15042, 2015, 1012, 102, 101, 2266, 4725, 1015, 1997, 6556, 5200, 14964, 2011, 1037, 3795, 20884, 2064, 2022, 24959, 3495, 1012, 102, 101, 4118, 1999, 19152, 24646, 5910, 2007, 6685, 5832, 2075, 1998, 4895, 7849, 7377, 13112, 3642, 1998, 4807, 4455, 2046, 1996, 2448, 7292, 2291, 2024, 7013, 8073, 29625, 9006, 23041, 21261, 1024, 3975, 1011, 1039, 3594, 1037, 2193, 1997, 10176, 1997, 1996, 1039, 8775, 4861, 2000, 3229, 6556, 5269, 26351, 8093, 17175, 27191, 1010, 2000, 3277, 3975, 1011, 4403, 4152, 1010, 8509, 1010, 1998, 2028, 102, 101, 1037, 2193, 1997, 9625, 1011, 4651, 10968, 2015, 2490, 1996, 8114, 4651, 1997, 25177, 3638, 5991, 1012, 102, 101, 1999, 10507, 1009, 1009, 1010, 2035, 4807, 3138, 2173, 1999, 1996, 2433, 1997, 1054, 15042, 2015, 29625, 2389, 2705, 10593, 2045, 2003, 2053, 16840, 2006, 1996, 2193, 1998, 4127, 1997, 9918, 1998, 1997, 1996, 2765, 3643, 2008, 1037, 6556, 4118, 2064, 2031, 1010, 10507, 1009, 1009, 28547, 2031, 2000, 3073, 2037, 2219, 2951, 5832, 2075, 3136, 2005, 102, 101, 9625, 2951, 4651, 2003, 12754, 2011, 4458, 2035, 1996, 2951, 2004, 9918, 2000, 2019, 1054, 15042, 1012, 102, 101, 1054, 15042, 13999, 1037, 2193, 1997, 3314, 2046, 1996, 4807, 6741, 2008, 2024, 9962, 2013, 3975, 1011, 1039, 1024, 4118, 3415, 2442, 2022, 10395, 2000, 4443, 2391, 11596, 1010, 9918, 2442, 2022, 8610, 2098, 1010, 1998, 3674, 16457, 1997, 2491, 2442, 2022, 3569, 1012, 102, 101, 1999, 2804, 1010, 1996, 19160, 3012, 1998, 3020, 3798, 1997, 24504, 3253, 2011, 10507, 1009, 1009, 5478, 1037, 2062, 2334, 3193, 1997, 1996, 10266, 1997, 4807, 1998, 22334, 2084, 1999, 3975, 1011, 1039, 1010, 2029, 13531, 2129, 1996, 5508, 1997, 7696, 2003, 11156, 1998, 2129, 9593, 4506, 2024, 7528, 29625, 10760, 3314, 6936, 102, 101, 2023, 2965, 2008, 1996, 21624, 2064, 2025, 3227, 5646, 1996, 4598, 2030, 3295, 1997, 1037, 6556, 4118, 10763, 3973, 1012, 102, 101, 1996, 12375, 2013, 1996, 4118, 2171, 2000, 2049, 4443, 2391, 4769, 2442, 2022, 2081, 2012, 2448, 7292, 1010, 2029, 5942, 2593, 4469, 2461, 1011, 4440, 9934, 7696, 2030, 1996, 6726, 1997, 1996, 2171, 2612, 1997, 2049, 4769, 1999, 7696, 1012, 102, 101, 1999, 5688, 1010, 1996, 3975, 1011, 1039, 2448, 7292, 2291, 16024, 2069, 1037, 2309, 2565, 3746, 1998, 15980, 2008, 6556, 3642, 1998, 2951, 2024, 2284, 2012, 1996, 2168, 11596, 2004, 2006, 1996, 2334, 13045, 29625, 2906, 22850, 4765, 5832, 2075, 1024, 1999, 10507, 1009, 1009, 1996, 9918, 1997, 2019, 1054, 15042, 2064, 2022, 15275, 5200, 1010, 9034, 102, 101, 2023, 16991, 3084, 10507, 1009, 1009, 1005, 2015, 1054, 15042, 9975, 2062, 3928, 2084, 1996, 3795, 1015, 1999, 2023, 3259, 1010, 2057, 2224, 1996, 3408, 4118, 1998, 7709, 8989, 8231, 29625, 4168, 5302, 2854, 3229, 10968, 2015, 1999, 3975, 1011, 1039, 1010, 2029, 2069, 6753, 1037, 1000, 8467, 6100, 1000, 1997, 5310, 1011, 4225, 2951, 4127, 1012, 102, 101, 2006, 1996, 2060, 2192, 1010, 2023, 16991, 4297, 9236, 2012, 2560, 2028, 4469, 24731, 1997, 1996, 2951, 2004, 2092, 2004, 1996, 8964, 1997, 4214, 1996, 7642, 3989, 4725, 1012, 102, 101, 1996, 10507, 1009, 1009, 21624, 2064, 2069, 23881, 2122, 4455, 1999, 3722, 3572, 1010, 2021, 1999, 2060, 3572, 1006, 2926, 1999, 1996, 3739, 1997, 12839, 1007, 1037, 2440, 8790, 4118, 1999, 19152, 2003, 3223, 1012, 102, 101, 2070, 3001, 1031, 1015, 29623, 16147, 1033, 3535, 2000, 5547, 1996, 3465, 1997, 1054, 15042, 2011, 26996, 1996, 4127, 2008, 2064, 2022, 8610, 2098, 2030, 2011, 2069, 4637, 8467, 4809, 1997, 1054, 15042, 9918, 29625, 2850, 2696, 4651, 1024, 3975, 1011, 1039, 6753, 8114, 2951, 4651, 2011, 9034, 1996, 4604, 2121, 2000, 20648, 1037, 6556, 17698, 4769, 2073, 1996, 102, 101, 1999, 10507, 1009, 1009, 1010, 1996, 21624, 6914, 16848, 24646, 2497, 2035, 24755, 4570, 1037, 4374, 17698, 2013, 2029, 2951, 2097, 2022, 4895, 7849, 7377, 3709, 1010, 2021, 1996, 4604, 2121, 2515, 2025, 2424, 2041, 2055, 2023, 17698, 2127, 2448, 7292, 1012, 102, 101, 2061, 1010, 2012, 2034, 1010, 2951, 2442, 2022, 12057, 2000, 1037, 12391, 17698, 1998, 2059, 15826, 2046, 1996, 4374, 17698, 1012, 102, 101, 2023, 4297, 9236, 2048, 3176, 4809, 1006, 2028, 2005, 9918, 1998, 2178, 2005, 1996, 2709, 3643, 1007, 2046, 1054, 15042, 4661, 2216, 3223, 2005, 2951, 5832, 2075, 29625, 8663, 13181, 2140, 4651, 1024, 2019, 1054, 15042, 5942, 2008, 2491, 2022, 4015, 2000, 1037, 2047, 11689, 2012, 1996, 4909, 2203, 2138, 2053, 9259, 2024, 2872, 2006, 1996, 3136, 2864, 102, 101, 1999, 3327, 1010, 1037, 4118, 2089, 3796, 2006, 1037, 5843, 2218, 2011, 1996, 7153, 22334, 1010, 9034, 1996, 3732, 2000, 10838, 2077, 1996, 2280, 2064, 3143, 1012, 102, 101, 2023, 5942, 2008, 2169, 2565, 2031, 3674, 16457, 1998, 2008, 1996, 7684, 1997, 1037, 4471, 1010, 2012, 2560, 11177, 2135, 1010, 3443, 1037, 2047, 11689, 1012, 102, 101, 1996, 2342, 2005, 3674, 16457, 9909, 1037, 3278, 8964, 1999, 10507, 1009, 1009, 1012, 102, 101, 4661, 1996, 3465, 1997, 6123, 11991, 1010, 2009, 5942, 18414, 14808, 6313, 4955, 1997, 11223, 2046, 1996, 2448, 7292, 1998, 4807, 6741, 2000, 5441, 11689, 1011, 3808, 1012, 102, 101, 1996, 8964, 1997, 11689, 19940, 2064, 2468, 3278, 2043, 8304, 1037, 2312, 2193, 1997, 14932, 1054, 15042, 7696, 1012, 102, 101, 2028, 5770, 1997, 4800, 2705, 16416, 4667, 2003, 1996, 3754, 2000, 5342, 1996, 4807, 2397, 9407, 1010, 2021, 2049, 12353, 9041, 2006, 1996, 5816, 5366, 1997, 1996, 11689, 3136, 1006, 4325, 1010, 6123, 11991, 1010, 1998, 26351, 8093, 10698, 9276, 1007, 2007, 4847, 2000, 1996, 2397, 9407, 29625, 11800, 26583, 11867, 26876, 3001, 1031, 1017, 29623, 2581, 1033, 18478, 1996, 11689, 2075, 5366, 2011, 102, 101, 3975, 1011, 1039, 3138, 2019, 2130, 2062, 7490, 3921, 1011, 5378, 2069, 1037, 2309, 22334, 11689, 5685, 16803, 2006, 3975, 1011, 4403, 6556, 3229, 2229, 2000, 19242, 2397, 14767, 29625, 7834, 3736, 3351, 7684, 1024, 1037, 4187, 6922, 1997, 1996, 4807, 2397, 9407, 2003, 1996, 10861, 25165, 8536, 22667, 2011, 7696, 2012, 1996, 4909, 2203, 2077, 2027, 2024, 22858, 102, 101, 1999, 2019, 11867, 26876, 2291, 1010, 2073, 4807, 12335, 2064, 2022, 3740, 16452, 1010, 2009, 2003, 22945, 2000, 5478, 1996, 20273, 1006, 2030, 1996, 21624, 1007, 2000, 8970, 13216, 8554, 3136, 2000, 4638, 2005, 4471, 5508, 1012, 102, 101, 17888, 2003, 3227, 2200, 10036, 1998, 2064, 10750, 2659, 2397, 14767, 2065, 6472, 2411, 2438, 1012, 102, 101, 2023, 3921, 2003, 2109, 1999, 3975, 1011, 1039, 29625, 10760, 2062, 19160, 4730, 2806, 3755, 2011, 10507, 1009, 1009, 3227, 5684, 2019, 17938, 1011, 5533, 4471, 7684, 1012, 102, 101, 1996, 4007, 17938, 7013, 2006, 4471, 5508, 2003, 17678, 16098, 3064, 2000, 1996, 4646, 1005, 2015, 2448, 7292, 2291, 1010, 2029, 9005, 1037, 2047, 11689, 2000, 5047, 1996, 4471, 1012, 102, 101, 2174, 1010, 1996, 8964, 2015, 1997, 1996, 17938, 1998, 1997, 1996, 16293, 9014, 17678, 16098, 3436, 2009, 2000, 1996, 4646, 2024, 2411, 3278, 1010, 4852, 1996, 3452, 4807, 2397, 9407, 1012, 102, 101, 2720, 15042, 2003, 2019, 1054, 15042, 2291, 2881, 1998, 23569, 27605, 5422, 2005, 6131, 26876, 5903, 9798, 2006, 1037, 24854, 1010, 5500, 3638, 4800, 29624, 9006, 18780, 2121, 1012, 102, 101, 1996, 2291, 3774, 1997, 1037, 2448, 7292, 3075, 2008, 10438, 4807, 1010, 5832, 2075, 1997, 3937, 2951, 4127, 1998, 6556, 2565, 7781, 1012, 102, 101, 1996, 2783, 7375, 3216, 2006, 1996, 9980, 11867, 4800, 29624, 9006, 18780, 2121, 1012, 102, 101, 1996, 2561, 3120, 3642, 2946, 2003, 28048, 2620, 3210, 1997, 1039, 29622, 29622, 1998, 7005, 3210, 1997, 1039, 1012, 102, 101, 1996, 4807, 11336, 2003, 21323, 2006, 2327, 1997, 2572, 1998, 3594, 1037, 7661, 1010, 2512, 29624, 28139, 6633, 24971, 16457, 7427, 1012, 102, 101, 2057, 2556, 1037, 4766, 19184, 1997, 1996, 2720, 15042, 7375, 1999, 2023, 2930, 1011, 1037, 16030, 6412, 2064, 2022, 2179, 1999, 1031, 1019, 1033, 1012, 102, 101, 10507, 1009, 1009, 2038, 2042, 27650, 2000, 2224, 2720, 15042, 1012, 102, 101, 2009, 3640, 2720, 15042, 2007, 24646, 2497, 4245, 1998, 1037, 3795, 2171, 2686, 1012, 102, 101, 1996, 2291, 2003, 3605, 1997, 1037, 2392, 1011, 2203, 1006, 10507, 1009, 1009, 2000, 1039, 29622, 29622, 1007, 11403, 1998, 1037, 2067, 1011, 2203, 1039, 29622, 29622, 21624, 1012, 102, 101, 1996, 2392, 1011, 2203, 16315, 2035, 3795, 20884, 3229, 2229, 2046, 20587, 24646, 5910, 1998, 19735, 3795, 7709, 4443, 2685, 2007, 2655, 4402, 24646, 5910, 29625, 10354, 3334, 6268, 1010, 1037, 10507, 1009, 1009, 2565, 3774, 1997, 2019, 4654, 8586, 23056, 1006, 2029, 3397, 1996, 2364, 4443, 2391, 1007, 1998, 4298, 1037, 2193, 1997, 13151, 5200, 1012, 102, 101, 2012, 2034, 1010, 1996, 3040, 13045, 1006, 4050, 6364, 13045, 1014, 1007, 4627, 1996, 2364, 4654, 8586, 23056, 1998, 1996, 2060, 14164, 3961, 18373, 3403, 2005, 2019, 14932, 5227, 2000, 8790, 3973, 7170, 13151, 5200, 29625, 10760, 20587, 24646, 2497, 7107, 13143, 2015, 1037, 12170, 29624, 4305, 2890, 7542, 2389, 2203, 8400, 2008, 4324, 1037, 4604, 1006, 1055, 1011, 1007, 1998, 1037, 4374, 17698, 102, 101, 2009, 19818, 2015, 1996, 8417, 1997, 1996, 1055, 1011, 17698, 1006, 2491, 2592, 1010, 2655, 4402, 24646, 2497, 4443, 2391, 1998, 2655, 9918, 1007, 2478, 2572, 2000, 1037, 10763, 1010, 2566, 1011, 13045, 17698, 4224, 1010, 1998, 5991, 1996, 20587, 11689, 1012, 102, 101, 2588, 5508, 1997, 1996, 4471, 1999, 1996, 2655, 4402, 2217, 1010, 1037, 18365, 28213, 2003, 3625, 2005, 14817, 2075, 1996, 2491, 2592, 2013, 1996, 10763, 17698, 1010, 24731, 1996, 9918, 2013, 1996, 10763, 17698, 2000, 1037, 4397, 11095, 1054, 1011, 17698, 1010, 2559, 2039, 1998, 1999, 22776, 1996, 2655, 4402, 24646, 2497, 2007, 1996, 1054, 102, 101, 1996, 2655, 4402, 24646, 2497, 4895, 7849, 7377, 4877, 1996, 9918, 1010, 4455, 1996, 4118, 1010, 1998, 3314, 1037, 7514, 2572, 2000, 1996, 20587, 2007, 1996, 2709, 3643, 1012, 102, 101, 1037, 2709, 28213, 1016, 2003, 3625, 2005, 24731, 1996, 2709, 3643, 2013, 1996, 10763, 17698, 2046, 1996, 20587, 1054, 1011, 17698, 1998, 2005, 4895, 23467, 2075, 1996, 20587, 11689, 1012, 102, 101, 1996, 2224, 1997, 1996, 10763, 17698, 4224, 11027, 2015, 1996, 2342, 2005, 1996, 20587, 2000, 3277, 2019, 4469, 2461, 24901, 4471, 2000, 5646, 2019, 1054, 1011, 17698, 1010, 2021, 2145, 5942, 2048, 2951, 4809, 2006, 1996, 20587, 1006, 2076, 1054, 15042, 7514, 1007, 1998, 2655, 4402, 3903, 29625, 3367, 12083, 6187, 8450, 2003, 2109, 2000, 11027, 1996, 8964, 102, 101, 1996, 4443, 2391, 11596, 2005, 2655, 4402, 24646, 5910, 2024, 10395, 2478, 1037, 2298, 1011, 2039, 2046, 1037, 2334, 23325, 2795, 1012, 102, 101, 2169, 6364, 13045, 9319, 1037, 2795, 1997, 24646, 2497, 11596, 2029, 2003, 25331, 2011, 13151, 2193, 1998, 4118, 2171, 23325, 3643, 1012, 102, 101, 2076, 2448, 7292, 3988, 3989, 1010, 2334, 2655, 4402, 24646, 5910, 2024, 5068, 2046, 1996, 2795, 1010, 1998, 6556, 10445, 2024, 4417, 2004, 19528, 1012, 102, 101, 1996, 1999, 29050, 4263, 1997, 2019, 1054, 15042, 3594, 1996, 13151, 2193, 1006, 2579, 2013, 1996, 3795, 20884, 1007, 1998, 1996, 4118, 23325, 3643, 2000, 5950, 2046, 1996, 2795, 1012, 102, 101, 2065, 1996, 4443, 2003, 9398, 1010, 1996, 24646, 2497, 4443, 2391, 4769, 2003, 18584, 2098, 1998, 2979, 2000, 1996, 6556, 13045, 1999, 1996, 4471, 1012, 102, 101, 2065, 1996, 4443, 2003, 19528, 1010, 1996, 2972, 4118, 2171, 2003, 2979, 1999, 1996, 4471, 1998, 1996, 5813, 5158, 2012, 1996, 6556, 2203, 2007, 1037, 4471, 2108, 2741, 2067, 2000, 10651, 1996, 2334, 4443, 1012, 102, 101, 1996, 2364, 6666, 1997, 29304, 1996, 2171, 2006, 1996, 20587, 2217, 2024, 2000, 5547, 1996, 2946, 1997, 1996, 7696, 1998, 18422, 1996, 23325, 3643, 2012, 2448, 7292, 3988, 3989, 29625, 3406, 5547, 1996, 5832, 2075, 8964, 2015, 1010, 1055, 1011, 1998, 1054, 1011, 17698, 2015, 2024, 3653, 29624, 8095, 24755, 3064, 1010, 1998, 1054, 1011, 17698, 2015, 2024, 2081, 14516, 1010, 1045, 29625, 2063, 29625, 102, 101, 3322, 1010, 2005, 1037, 1000, 3147, 1000, 1054, 15042, 1010, 9918, 2024, 8610, 2098, 2046, 1996, 1055, 1011, 17698, 1998, 4015, 2000, 1037, 2566, 1011, 13045, 10763, 17698, 2181, 2012, 1996, 2655, 4402, 2217, 1012, 102, 101, 1996, 18365, 28213, 2035, 24755, 4570, 1037, 2047, 1054, 1011, 17698, 1010, 4809, 1996, 2951, 2013, 1996, 10763, 17698, 2181, 2046, 1996, 1054, 1011, 17698, 1010, 1998, 6017, 2009, 2004, 4987, 2000, 1996, 4118, 2108, 2170, 1012, 102, 101, 1996, 4769, 1997, 1996, 21144, 16093, 7512, 2003, 2513, 2007, 1996, 24646, 2497, 2795, 10651, 4471, 1012, 102, 101, 4745, 17053, 2094, 1999, 19152, 2015, 2097, 6100, 2951, 3495, 2046, 1996, 14516, 1010, 2566, 1011, 13045, 1054, 1011, 17698, 3378, 2007, 1996, 6556, 7709, 1010, 2947, 15349, 2028, 4469, 2951, 6100, 2006, 1996, 2655, 4402, 2217, 29625, 3406, 11027, 1037, 2951, 6100, 2006, 1996, 20587, 2217, 2076, 1996, 1054, 15042, 7514, 1010, 1996, 20587, 2064, 2035, 24755, 2618, 102, 101, 1996, 2655, 4402, 2064, 2911, 1996, 2709, 3643, 3495, 2046, 2023, 17698, 1012, 102, 101, 2023, 20600, 2038, 2025, 2042, 5100, 2046, 1996, 2783, 7375, 29625, 20041, 2000, 1996, 2152, 3465, 1997, 4007, 17938, 2015, 2006, 4471, 5508, 2006, 1996, 9980, 11867, 1010, 4471, 7684, 2003, 2241, 2006, 17888, 2008, 5158, 2006, 1037, 13045, 2296, 2051, 1037, 4471, 2003, 2741, 1031, 1020, 1033, 1012, 102, 101, 1999, 2344, 2000, 4468, 2757, 7878, 2015, 2043, 2045, 2003, 2053, 2448, 22966, 11689, 1010, 2720, 15042, 19896, 1037, 17888, 11689, 2006, 2169, 6364, 13045, 2012, 3988, 3989, 1012, 102, 101, 1996, 6388, 16437, 3774, 1997, 1037, 2186, 1997, 10507, 1009, 1009, 1998, 3975, 1011, 1039, 4807, 12702, 29624, 10609, 2818, 27373, 1998, 2093, 5097, 1024, 7861, 29097, 1010, 2300, 1010, 1998, 8534, 11320, 22511, 1017, 1012, 102, 101, 1996, 2572, 6741, 1998, 1996, 16457, 7427, 2031, 2042, 5362, 6602, 2098, 2000, 4070, 2005, 1996, 2193, 1010, 4127, 1010, 1998, 10826, 1997, 4471, 15210, 2004, 2092, 2004, 1996, 2193, 1997, 16457, 1010, 6123, 15924, 1010, 1998, 26351, 8093, 10698, 9276, 3136, 1012, 102, 101, 2035, 7885, 2448, 2006, 2019, 9980, 11867, 2007, 2019, 28443, 1017, 29625, 2475, 29625, 2629, 4082, 2291, 1012, 102, 101, 2348, 1996, 4155, 2224, 2367, 2067, 1011, 2203, 21624, 2015, 1006, 10507, 1009, 1009, 3594, 9980, 1039, 29622, 29622, 1998, 3975, 1011, 1039, 3594, 1043, 9468, 1007, 1010, 1996, 2836, 1997, 1996, 1042, 2361, 16293, 1999, 2035, 2093, 5097, 2003, 8990, 1996, 2168, 2005, 2119, 21624, 2015, 29625, 7712, 3217, 1011, 6847, 27373, 1024, 3275, 1016, 1998, 3275, 1015, 2265, 102, 101, 1528, 6556, 3229, 2000, 1037, 4185, 1011, 2978, 3313, 2083, 1037, 3795, 20884, 1006, 14246, 3191, 1013, 4339, 1007, 1010, 2029, 3774, 1997, 2019, 1054, 15042, 4606, 1037, 7514, 4471, 2007, 1996, 2709, 3643, 1006, 3313, 1007, 1012, 102, 101, 1528, 9625, 4651, 1997, 2019, 9140, 1997, 2322, 7695, 2478, 1037, 10507, 1009, 1009, 1054, 15042, 1998, 3975, 1011, 1039, 9625, 9631, 1998, 7009, 1006, 9625, 16416, 2094, 1013, 4339, 1007, 1012, 102, 101, 1528, 3653, 7959, 10649, 2075, 1997, 2322, 6556, 7695, 11570, 2083, 3795, 20884, 2015, 2478, 11968, 29278, 5991, 1999, 10507, 1009, 1009, 1998, 3975, 1011, 4403, 4152, 1999, 3975, 1011, 1039, 1006, 3653, 7959, 10649, 1007, 1012, 102, 101, 1024, 2003, 1037, 5903, 4646, 2008, 26633, 2015, 17225, 4400, 20594, 1031, 1022, 29623, 15136, 1033, 1012, 102, 101, 1996, 2364, 2951, 3252, 2003, 1037, 5500, 10629, 1012, 102, 101, 2431, 1997, 2049, 14164, 5050, 5300, 1997, 2019, 3751, 2492, 1006, 1041, 1007, 2012, 3479, 2685, 1999, 2686, 1010, 1998, 1996, 2060, 14788, 2000, 5300, 1997, 1996, 8060, 2492, 1006, 1044, 1007, 1012, 102, 101, 1996, 10629, 2003, 12170, 19362, 23096, 1024, 2053, 2048, 14164, 1997, 1996, 2168, 2828, 1006, 1041, 29625, 2290, 29625, 1041, 2030, 1044, 1007, 2024, 5516, 1012, 102, 101, 2169, 1997, 1996, 18017, 2038, 1996, 2093, 4617, 1997, 7861, 29097, 1999, 10507, 1009, 1009, 1998, 3975, 1011, 1039, 2024, 4102, 2182, 2011, 9671, 1996, 7017, 1997, 5516, 14164, 2008, 2024, 2284, 2006, 6556, 18017, 1012, 102, 101, 2169, 2544, 3594, 1037, 2367, 4118, 2000, 4651, 2951, 1012, 102, 101, 1996, 2034, 2544, 1006, 7861, 29097, 1011, 2918, 1007, 4315, 27235, 24413, 2015, 1037, 3795, 20884, 2000, 1037, 6556, 13045, 2169, 2051, 1996, 3643, 2003, 2734, 1012, 102, 101, 2144, 2070, 2522, 29624, 4135, 12921, 10629, 14164, 2089, 3745, 6556, 10638, 1010, 10449, 2334, 5745, 14164, 1010, 2029, 5050, 6556, 10629, 3787, 2064, 11027, 21707, 3795, 3229, 2229, 1012, 102, 101, 2023, 3722, 2433, 1997, 6187, 8450, 2003, 2109, 1999, 7861, 29097, 1011, 5745, 1010, 2073, 2034, 1996, 5300, 1997, 2035, 5745, 14164, 2024, 18584, 2098, 1998, 1996, 2364, 22334, 7077, 2003, 11850, 2334, 1012, 102, 101, 2023, 2544, 2064, 2022, 2582, 23569, 27605, 5422, 2011, 12943, 17603, 16961, 2035, 5745, 14164, 2108, 4015, 2013, 2028, 13151, 2000, 2178, 1012, 102, 101, 7861, 29097, 1011, 9625, 3594, 2023, 20600, 2000, 3277, 9625, 15210, 2612, 1997, 2116, 3265, 18584, 2229, 29625, 10760, 6847, 10665, 3216, 3491, 1999, 2023, 3259, 3594, 1037, 12553, 10629, 1997, 5385, 14164, 5500, 2408, 1018, 18017, 2073, 2169, 13045, 2038, 3014, 2322, 2005, 1037, 2561, 1997, 20143, 7926, 1012, 102, 101, 1996, 12884, 1997, 7926, 2008, 2892, 13151, 7372, 2003, 9426, 2013, 2184, 1003, 2000, 2531, 1003, 1999, 2344, 2000, 2689, 1996, 22334, 2000, 4807, 6463, 29625, 5880, 1024, 2003, 2019, 1050, 1011, 2303, 8382, 10949, 4646, 2579, 2013, 1996, 17624, 6847, 10665, 7621, 1031, 2570, 1033, 2008, 24134, 2015, 1996, 2749, 1998, 19320, 1997, 102, 101, 1996, 22334, 2009, 22139, 2015, 2058, 1037, 2193, 1997, 4084, 1010, 1998, 2169, 1997, 2029, 7336, 9798, 1996, 26721, 29624, 5685, 6970, 29624, 5302, 2571, 15431, 2749, 2005, 10737, 4838, 1999, 1037, 1000, 11919, 2389, 1000, 3482, 1010, 2029, 3216, 1999, 1051, 1006, 1050, 1016, 1007, 2051, 1012, 102, 101, 1037, 16014, 2953, 1011, 6149, 2953, 4118, 2003, 2109, 2000, 17409, 4367, 1997, 2300, 10737, 2058, 2051, 1012, 102, 101, 1996, 2561, 4022, 2943, 2003, 10174, 2004, 1996, 7680, 1997, 26721, 29624, 5685, 6970, 5302, 2571, 15431, 4022, 2015, 1012, 102, 101, 1996, 2364, 2951, 3252, 2003, 2019, 9140, 1997, 10737, 5500, 10763, 3973, 2408, 2035, 18017, 1012, 102, 101, 1996, 26721, 29624, 5302, 2571, 21225, 10266, 2024, 24806, 7246, 1010, 6168, 1996, 6970, 29624, 5302, 2571, 21225, 3924, 5478, 9631, 1998, 7009, 1997, 6556, 2951, 29625, 2102, 12155, 4617, 1997, 2300, 2517, 1999, 10507, 1009, 1009, 1998, 3975, 1011, 1039, 2024, 4102, 1012, 102, 101, 1996, 2918, 2544, 1006, 2300, 1011, 9593, 1007, 3314, 9593, 9631, 1998, 7009, 2000, 3229, 1998, 10651, 1996, 6556, 10737, 1012, 102, 101, 1996, 23569, 27605, 5422, 2544, 1006, 2300, 1011, 3653, 7959, 10649, 1007, 20736, 1996, 9593, 3191, 11186, 2007, 13228, 3653, 7959, 10649, 2075, 1010, 2073, 3479, 2951, 1997, 6556, 10737, 2024, 24378, 1998, 18584, 2098, 2013, 2037, 7972, 18017, 3188, 2000, 2334, 9798, 1012, 102, 101, 2119, 4617, 2024, 2448, 2007, 20407, 1997, 4185, 1998, 24406, 10737, 5500, 2058, 1018, 18017, 29625, 23467, 2098, 11320, 22511, 1024, 22164, 11320, 5387, 3989, 1997, 1037, 9742, 8185, 2004, 2649, 1999, 1996, 17624, 6847, 10665, 7621, 1031, 2570, 1033, 1012, 102, 101, 1996, 8185, 2003, 4055, 2046, 5991, 5500, 2426, 18017, 1012, 102, 101, 2296, 3357, 8681, 2093, 4942, 29624, 13473, 4523, 1024, 2034, 1010, 1996, 14255, 22994, 3796, 1006, 1045, 1010, 1045, 1007, 2003, 5387, 2098, 2011, 2049, 3954, 1025, 2117, 1010, 2035, 18017, 2029, 2031, 5991, 1999, 1996, 1045, 1011, 16215, 5216, 2030, 1045, 1011, 16215, 5930, 6855, 1996, 7172, 14255, 22994, 3796, 1025, 2353, 1010, 2035, 4722, 102, 101, 2035, 6556, 5991, 7303, 1999, 1037, 2445, 4942, 29624, 13473, 2361, 2342, 2000, 2022, 18584, 2098, 2144, 2027, 2020, 6310, 1999, 11003, 4942, 29624, 13473, 4523, 1012, 102, 101, 1996, 2918, 3975, 1011, 1039, 2544, 1006, 8040, 1011, 11320, 1007, 3594, 2028, 1011, 2126, 5324, 2005, 12045, 14391, 14255, 22994, 5991, 1998, 3653, 7959, 10649, 2229, 2035, 5991, 2077, 2927, 1996, 2353, 4942, 29624, 13473, 2361, 1012, 102, 101, 1999, 1996, 10507, 1009, 1009, 2544, 1006, 10507, 1011, 11320, 1007, 1010, 1996, 2028, 1011, 2126, 5324, 1998, 3653, 7959, 10649, 2229, 2024, 2999, 2011, 1054, 15042, 2015, 1012, 102, 101, 1996, 7953, 2003, 1037, 24406, 2595, 22203, 2475, 8185, 1997, 7695, 2007, 1037, 3796, 2946, 1997, 2385, 2595, 16048, 1012, 102, 101, 12702, 29624, 10609, 2818, 27373, 1024, 2004, 2464, 1999, 2348, 1996, 5832, 2075, 1997, 3937, 4127, 13999, 1037, 11265, 25394, 18507, 3465, 1999, 1996, 10507, 1009, 1009, 2448, 7292, 1010, 1996, 2951, 2003, 2741, 2478, 2572, 9625, 4651, 10968, 2015, 1010, 2029, 4297, 9236, 2019, 3176, 2321, 27527, 2615, 19716, 2100, 6979, 10023, 2094, 13871, 2094, 2615, 2615, 2615, 23644, 4160, 4160, 2140, 4160, 4160, 2487, 1011, 2773, 1010, 1016, 1011, 2773, 1007, 1012, 102, 101, 2023, 8964, 2003, 9511, 1999, 14246, 3191, 1013, 4339, 2144, 3229, 2229, 2000, 3722, 2951, 4127, 2083, 3795, 20884, 2015, 2024, 23569, 27605, 5422, 2478, 2235, 5227, 1013, 7514, 3161, 7696, 29625, 10760, 3465, 1997, 5832, 2075, 4150, 3278, 2005, 1996, 9140, 1997, 2322, 7695, 1012, 102, 101, 9625, 9631, 3465, 2062, 2084, 9625, 7009, 1999, 10507, 1009, 1009, 2138, 1996, 2709, 2951, 2038, 2000, 2022, 15826, 3807, 1024, 2320, 2013, 1996, 10763, 17698, 2000, 1996, 4374, 17698, 1010, 1998, 2153, 2013, 1996, 4374, 17698, 2000, 1996, 10507, 1009, 1009, 4874, 1012, 102, 101, 2023, 3465, 2052, 2022, 5892, 2065, 1996, 1999, 29050, 4263, 1997, 1037, 9625, 3191, 2979, 2019, 1054, 1011, 17698, 4769, 2073, 1996, 2709, 3643, 2052, 2022, 8250, 1010, 2004, 2649, 3041, 29625, 10760, 3653, 7959, 10649, 2075, 6847, 10665, 3065, 2008, 1996, 8964, 1997, 11689, 2968, 13416, 1996, 12353, 1997, 2397, 9407, 6318, 12381, 29625, 7076, 24456, 19304, 1024, 1996, 7781, 2335, 1997, 102, 101, 3975, 1011, 1039, 1005, 2015, 2448, 7292, 2003, 14729, 2005, 1999, 1996, 17368, 6922, 1012, 102, 101, 3275, 1018, 3065, 1996, 2566, 1011, 3341, 7861, 29097, 2836, 1012, 102, 101, 10507, 1009, 1009, 2003, 6975, 2007, 3975, 1011, 1039, 2005, 2169, 1997, 1996, 4617, 1012, 102, 101, 1999, 7861, 29097, 1011, 2918, 1010, 1996, 2502, 4489, 2090, 10507, 1009, 1009, 1998, 3975, 1011, 1039, 2005, 2659, 6556, 3341, 7017, 2015, 2003, 2349, 2000, 1996, 8964, 1997, 3229, 2229, 2000, 2334, 2951, 2083, 3795, 20884, 2015, 1012, 102, 101, 2004, 1996, 7017, 1997, 6556, 7926, 7457, 1010, 1996, 5816, 2836, 1997, 10507, 1009, 1009, 28314, 2015, 2000, 2055, 1037, 5387, 1997, 1016, 1997, 2795, 1017, 1012, 102, 101, 1996, 2561, 2051, 2988, 2005, 2169, 3231, 2001, 4663, 2011, 14985, 2058, 6694, 2692, 27758, 2015, 1012, 102, 101, 1999, 10507, 1009, 1009, 1010, 2561, 2003, 1996, 7680, 1997, 1996, 24732, 6741, 1006, 2572, 1007, 1010, 1996, 16457, 2051, 1010, 1998, 1996, 2448, 7292, 1012, 102, 101, 1999, 3975, 1011, 1039, 1010, 2009, 2003, 2074, 2572, 4606, 2448, 7292, 1012, 102, 101, 16457, 2051, 2003, 4358, 2011, 4800, 22086, 2075, 1996, 2193, 1997, 11689, 4455, 2566, 1048, 2860, 6979, 2094, 13668, 2099, 4160, 4160, 2480, 2140, 26291, 26291, 7317, 2226, 2226, 27225, 15088, 2232, 2546, 13668, 2100, 23644, 19699, 2615, 2860, 2615, 2615, 27527, 2615, 21663, 2226, 25974, 5283, 14945, 13871, 11263, 14945, 13668, 2099, 4160, 27527, 2615, 21663, 2226, 6784, 20952, 2099, 4160, 2860, 2232, 1031, 1059, 1058, 2480, 2140, 2860, 24316, 2094, 4160, 13871, 27527, 2615, 2005, 1037, 5843, 1010, 19829, 1010, 2030, 4650, 8023, 4742, 2655, 1007, 1012, 102, 101, 1996, 2461, 1011, 4440, 2397, 9407, 1997, 9980, 1005, 2015, 3128, 6131, 2140, 2104, 28443, 1048, 2615, 2615, 1058, 3275, 1018, 1012, 102, 101, 12554, 1997, 7861, 29097, 2566, 1011, 3341, 7781, 2335, 2005, 2184, 1003, 1010, 2871, 1003, 1010, 3963, 1003, 1010, 1998, 2531, 1003, 1997, 6556, 7926, 1010, 3671, 3550, 2114, 3975, 1011, 1039, 1012, 102, 101, 1996, 7619, 7781, 2051, 1006, 1999, 3823, 1007, 2005, 2531, 1003, 1997, 6556, 7926, 2003, 5393, 2682, 1996, 7972, 6963, 1012, 102, 101, 1999, 7861, 29097, 1011, 5745, 1010, 1996, 2193, 1997, 3795, 3229, 2229, 2003, 2172, 3760, 2084, 1999, 7861, 29097, 1011, 2918, 1998, 1996, 5816, 2836, 28314, 2015, 2855, 2000, 1016, 29625, 2629, 2004, 1996, 2193, 1997, 6556, 3341, 7457, 1012, 102, 101, 2130, 2295, 9625, 15210, 5478, 2019, 3176, 6100, 1999, 10507, 1009, 1009, 1010, 2053, 3278, 2836, 4489, 2003, 5159, 1999, 7861, 29097, 1011, 9625, 1012, 102, 101, 2023, 2003, 2138, 1996, 2561, 2193, 1997, 27507, 4015, 2566, 3341, 2003, 2200, 2235, 1006, 2055, 1019, 27507, 1007, 1012, 102, 101, 2000, 2428, 11949, 1037, 3278, 2718, 1010, 1996, 3291, 2946, 2038, 2000, 2022, 3445, 2011, 1037, 5387, 1997, 2055, 3263, 1012, 102, 101, 2009, 2003, 2590, 2000, 5060, 2008, 1996, 20600, 2015, 2109, 1999, 2035, 2093, 4617, 1997, 7861, 29097, 5770, 3975, 1011, 1039, 1998, 10507, 1009, 1009, 8053, 1012, 102, 101, 2005, 2531, 1003, 6556, 7926, 1010, 7861, 29097, 1011, 5745, 13416, 1996, 7781, 2051, 1997, 7861, 29097, 1011, 2918, 2011, 6584, 1011, 6486, 1003, 1010, 1998, 7861, 29097, 1011, 9625, 13416, 2008, 1997, 7861, 29097, 1011, 5745, 2011, 2062, 2084, 5345, 1003, 2005, 2119, 4155, 29625, 5880, 1024, 3275, 1019, 3065, 1996, 2836, 1997, 1996, 2364, 102, 101, 2300, 1011, 9593, 3594, 2235, 7696, 2000, 3191, 2013, 1998, 4339, 2000, 1996, 6556, 10737, 1012, 102, 101, 1996, 2836, 6578, 2090, 10507, 1009, 1009, 1998, 3975, 1011, 1039, 2003, 1016, 29625, 2575, 2005, 4185, 10737, 1998, 1019, 29625, 2575, 2005, 24406, 10737, 1012, 102, 101, 1996, 2193, 1997, 6556, 3229, 2229, 1999, 10507, 1009, 1009, 7457, 17718, 23671, 3973, 2007, 1996, 7953, 2946, 1010, 4852, 2049, 2448, 7292, 8964, 1998, 2139, 16307, 2075, 2049, 5816, 2836, 1012, 102, 101, 2300, 1011, 9593, 2064, 2022, 2582, 23569, 27605, 5422, 2011, 6419, 1996, 9593, 3191, 11186, 2007, 13228, 3653, 7959, 10649, 2075, 1006, 2300, 1011, 3653, 7959, 10649, 1007, 1012, 102, 101, 2023, 6028, 5320, 1037, 2184, 29624, 10371, 7312, 1999, 6556, 3229, 2229, 1998, 2947, 16189, 1999, 2119, 3975, 1011, 1039, 1998, 10507, 1009, 1009, 1037, 3438, 1003, 7620, 2005, 4185, 10737, 1012, 102, 101, 2174, 1010, 2005, 24406, 10737, 1010, 10507, 1009, 1009, 24840, 2011, 4868, 1003, 4102, 2000, 3975, 1011, 1039, 1005, 2015, 2570, 1003, 1010, 5494, 1996, 2836, 6578, 2000, 1017, 29625, 2629, 1012, 102, 101, 1996, 4254, 1997, 2023, 20600, 2003, 3469, 1999, 10507, 1009, 1009, 2138, 1997, 3020, 4807, 2397, 14767, 1012, 102, 101, 10507, 1009, 1009, 2448, 7292, 6115, 2005, 2055, 2753, 1011, 3438, 1003, 1997, 1996, 6578, 1010, 1037, 2307, 3066, 1997, 2029, 2003, 2349, 2000, 2951, 5832, 2075, 1012, 102, 101, 1996, 2836, 6578, 1997, 1017, 29625, 2575, 2090, 10507, 1009, 1009, 1998, 3975, 1011, 1039, 2003, 3701, 2349, 2000, 1996, 4469, 2951, 24731, 2076, 8185, 3796, 15210, 1006, 2055, 2322, 1003, 1997, 1996, 6578, 1007, 1998, 2000, 26351, 8093, 10698, 9276, 1006, 2055, 3590, 1003, 1007, 1012, 102, 101, 1996, 5658, 2051, 1999, 10507, 1011, 11320, 2003, 2055, 1016, 2335, 3020, 2084, 1999, 8040, 1011, 11320, 1010, 3262, 2349, 2000, 5697, 3403, 1006, 17888, 1007, 1012, 102, 101, 1996, 11689, 5366, 2265, 2008, 4800, 2705, 16416, 4667, 1999, 1054, 15042, 6115, 2005, 2423, 1011, 2753, 1003, 1997, 1996, 2836, 6578, 2090, 10507, 1009, 1009, 1998, 3975, 1011, 1039, 29625, 26351, 8093, 10698, 9276, 4297, 9236, 1037, 3278, 3815, 1997, 8964, 1024, 2013, 2403, 1003, 1006, 1997, 1996, 2836, 6578, 1007, 1999, 2300, 10610, 7712, 1998, 2539, 1003, 1999, 7861, 29097, 102, 101, 5818, 1011, 5585, 1003, 1997, 2023, 8964, 2003, 2000, 5676, 18700, 1997, 4207, 2951, 1998, 11689, 1011, 3808, 1999, 1996, 2448, 7292, 1998, 4807, 9014, 1012, 102, 101, 2023, 2003, 4654, 10732, 28483, 3064, 2011, 1996, 8089, 2008, 2055, 5345, 1003, 1997, 5843, 19530, 2024, 18974, 29624, 3238, 1012, 102, 101, 1996, 3465, 1997, 11689, 2968, 2003, 11701, 1006, 2090, 2184, 1011, 2321, 1003, 1999, 10507, 1009, 1009, 5097, 1007, 1010, 2021, 2025, 27018, 1012, 102, 101, 2023, 2104, 9363, 6072, 1996, 2342, 2005, 1037, 3811, 15757, 16457, 7427, 2004, 1996, 5366, 2052, 2022, 23469, 14547, 2152, 2065, 1037, 2062, 8366, 2030, 3653, 6633, 24971, 7427, 2020, 2109, 1012, 102, 101, 4293, 1011, 5594, 1003, 1997, 2023, 3465, 2003, 2349, 2000, 6123, 15924, 1010, 1037, 2312, 12884, 1997, 2029, 2064, 2022, 7108, 2000, 1996, 17888, 11689, 1012, 102, 101, 2023, 8964, 2089, 2022, 24251, 2094, 1999, 1996, 2925, 2011, 8161, 1996, 3465, 1997, 4007, 17938, 2015, 1010, 2029, 11027, 2015, 1996, 2342, 2005, 1996, 17888, 11689, 29625, 3367, 12083, 1999, 19152, 2015, 1010, 2951, 5832, 2075, 1010, 1998, 4471, 18365, 4070, 2005, 2058, 2753, 1003, 1997, 1996, 2836, 6578, 1012, 102, 101, 1996, 8964, 1997, 4118, 2171, 5449, 2003, 11265, 25394, 18507, 2349, 2000, 1996, 24646, 2497, 6187, 8450, 1012, 102, 101, 2951, 24731, 8964, 2015, 2024, 2926, 17631, 2043, 2312, 8310, 1997, 2951, 2024, 4015, 1010, 2004, 1999, 11320, 1010, 1998, 2043, 1996, 4807, 2000, 22334, 6463, 2003, 2152, 1010, 2004, 1999, 2300, 1012, 102, 101, 2004, 2521, 2004, 2057, 2113, 1010, 2023, 2003, 1996, 2034, 2817, 2008, 22963, 1998, 16157, 2015, 1996, 2836, 1997, 6131, 26876, 4807, 2007, 4847, 2000, 11867, 26876, 2006, 1037, 4800, 29624, 9006, 18780, 2121, 1012, 102, 101, 3025, 2470, 2006, 6131, 26876, 3001, 1031, 2340, 29623, 17134, 1033, 2788, 20618, 2060, 5919, 2107, 2004, 3417, 8010, 1010, 16991, 1010, 1998, 21770, 10624, 6914, 20175, 2100, 1010, 2437, 2009, 3697, 2000, 6709, 1996, 8050, 8964, 2015, 1012, 102, 101, 9308, 1010, 2107, 3001, 2024, 2788, 16330, 1999, 12477, 29625, 2050, 3145, 2836, 7814, 1999, 1996, 6131, 26876, 2944, 2003, 1996, 8114, 8346, 1997, 4807, 1998, 16457, 1012, 102, 101, 1996, 21304, 2433, 1997, 2309, 1011, 26583, 6556, 4118, 1999, 19152, 2001, 3107, 2011, 3161, 7696, 1031, 2656, 1033, 1012, 102, 101, 21931, 3161, 7696, 1006, 1051, 3286, 1007, 1031, 2654, 1033, 15476, 8163, 2572, 2007, 16457, 1010, 9268, 2070, 1997, 1996, 9259, 1999, 2572, 28213, 2015, 1012, 102, 101, 2000, 10408, 1037, 3435, 1054, 15042, 1010, 1051, 3286, 21931, 3973, 15389, 2015, 1996, 28213, 3642, 2006, 1996, 9991, 1011, 1996, 28213, 2003, 11113, 15613, 1998, 25606, 2006, 1037, 3584, 11689, 2065, 2009, 5991, 1012, 102, 101, 2021, 1051, 3286, 15980, 2019, 11867, 26876, 2944, 1998, 2515, 2025, 4919, 4769, 1996, 4807, 5835, 18278, 2015, 2043, 2008, 11213, 2003, 2053, 2936, 9398, 1012, 102, 101, 26041, 2036, 3640, 1037, 7705, 2005, 22380, 16457, 2007, 4807, 1031, 2340, 1033, 1010, 2021, 2515, 2025, 8556, 1996, 2836, 4254, 1999, 5097, 29625, 2050, 2312, 3815, 1997, 3906, 1031, 1021, 29623, 12521, 29623, 16068, 29623, 11387, 29623, 17465, 1033, 5577, 12138, 21624, 1998, 2448, 7292, 11683, 2008, 5547, 1996, 3465, 1997, 11689, 2968, 1999, 4155, 2008, 2490, 2986, 17643, 2378, 24154, 1012, 102, 101, 2035, 1997, 2068, 3073, 7772, 4853, 2968, 1998, 7709, 1011, 4214, 4680, 2008, 5942, 1996, 21624, 2000, 9699, 3128, 2030, 3320, 1011, 2066, 1039, 3642, 1012, 102, 101, 2256, 3463, 2265, 2008, 2122, 20600, 2015, 2071, 9280, 5547, 1996, 2836, 6578, 2090, 11867, 26876, 1998, 6131, 26876, 5903, 5097, 2011, 2055, 2184, 2000, 2321, 1003, 1012, 102, 101, 19982, 2527, 1998, 10930, 2638, 19708, 3073, 1037, 7721, 12654, 1997, 2122, 11683, 1999, 1031, 2423, 1033, 1010, 1998, 16599, 1037, 3465, 1011, 4621, 1010, 3075, 1011, 2241, 7375, 1997, 16457, 2008, 7341, 3031, 1996, 2309, 9991, 7781, 2944, 1997, 1039, 1012, 102, 101, 2023, 3259, 28062, 1996, 24010, 1997, 2152, 1011, 2836, 6131, 26876, 5903, 9798, 2011, 20253, 1996, 2836, 12546, 1997, 1996, 6131, 26876, 4807, 20680, 1012, 102, 101, 1996, 4106, 2003, 2241, 2006, 1037, 3622, 7831, 1997, 2090, 2019, 6131, 26876, 2653, 1006, 10507, 1009, 1009, 1007, 1998, 2019, 11867, 26876, 2028, 1006, 3975, 1011, 1039, 1007, 2770, 2006, 2019, 9980, 11867, 4800, 29624, 9006, 18780, 2121, 1012, 102, 101, 3463, 2265, 2008, 3937, 6556, 2951, 3229, 1999, 10507, 1009, 1009, 2064, 2022, 23569, 27605, 5422, 2000, 2306, 1037, 5387, 1997, 2048, 2013, 3975, 1011, 1039, 1998, 3128, 24732, 9014, 1012, 102, 101, 2004, 1037, 2765, 1010, 2256, 10507, 1009, 1009, 5097, 4685, 2306, 1037, 5387, 1997, 2048, 2000, 2416, 2013, 3975, 1011, 1039, 1010, 1998, 2007, 2019, 2344, 1997, 10194, 7620, 2058, 3025, 10507, 1009, 1009, 24977, 1012, 102, 101, 1999, 2236, 1010, 1037, 12884, 1997, 1996, 3588, 6578, 2003, 2349, 2000, 11689, 26351, 8093, 10698, 9276, 1006, 2321, 1011, 2382, 1003, 1007, 1010, 2029, 2003, 4072, 2005, 8498, 11689, 1011, 3647, 4807, 29625, 2705, 16416, 2094, 2968, 3136, 2107, 2004, 4325, 1998, 6123, 11991, 4070, 2005, 2625, 2084, 2321, 1003, 1997, 1996, 6578, 1012, 102, 101, 1054, 15042, 8964, 2015, 2107, 2004, 24646, 2497, 1999, 19152, 2015, 1010, 6685, 7642, 3989, 1998, 4471, 18365, 9002, 2000, 1996, 3484, 1997, 1996, 6578, 1006, 2058, 2753, 1003, 1007, 1012, 102, 101, 2004, 1037, 2765, 1010, 2057, 2024, 2747, 11538, 21624, 1011, 2241, 5461, 2000, 5460, 4179, 24646, 2497, 1999, 19152, 2015, 1010, 2000, 11027, 2951, 24731, 10462, 2076, 6685, 7642, 3989, 1010, 1998, 2000, 18365, 7696, 2062, 18228, 2478, 20587, 1011, 3266, 11689, 19940, 29625, 15222, 2015, 2147, 6083, 2008, 1996, 6131, 26876, 2944, 2241, 2006, 1054, 15042, 2003, 9608, 2005, 102, 101, 1999, 2116, 3572, 1010, 1996, 17839, 1997, 1054, 15042, 24504, 2247, 2007, 1996, 4007, 1011, 3330, 6666, 2107, 2004, 19160, 3012, 1998, 2565, 5512, 2041, 27204, 2232, 1996, 2836, 6578, 2090, 11867, 26876, 1998, 6131, 26876, 1012, 102], "tgt": [1, 23208, 1996, 2836, 12546, 1997, 6131, 26876, 4807, 9610, 1011, 22455, 11132, 29466, 29625, 1997, 3274, 2671, 10921, 2118, 24665, 4371, 20255, 2480, 1039, 4143, 15992, 15249, 1006, 10921, 1007, 15321, 16173, 3854, 1041, 6799, 2368, 1006, 10921, 1007, 5529, 17710, 21218, 2386, 1006, 2003, 2072, 1013, 15529, 1007, 7705, 5903, 9798, 2006, 12906, 1997, 2573, 12516, 2015, 8051, 4807, 10968, 2015, 2024, 4471, 1011, 2241, 4730, 4275, 1024, 11867, 26876, 1998, 6131, 26876, 11867, 26876, 2003, 1996, 21047, 2944, 2339, 2224, 6131, 26876, 1029, 3, 6413, 2005, 5500, 1010, 21770, 10624, 6914, 14769, 4292, 1024, 18804, 9006, 18780, 2075, 5903, 4007, 2004, 6177, 2339, 2224, 1054, 15042, 1029, 3, 2157, 2504, 1997, 24504, 4471, 4458, 5942, 8393, 2000, 2113, 2043, 2000, 5987, 14932, 4807, 3001, 2007, 2714, 4695, 1024, 26041, 1010, 8009, 2129, 2079, 1054, 15042, 1011, 2241, 6131, 26876, 3001, 4685, 2006, 24854, 6131, 4523, 1029, 3, 3291, 6131, 26876, 3001, 2024, 2019, 2344, 1997, 10194, 12430, 2084, 11867, 26876, 3001, 2006, 24854, 6131, 4523, 2012, 10961, 1997, 2836, 1999, 1996, 24854, 2553, 3921, 2720, 15042, 1024, 2019, 6131, 26876, 1054, 15042, 2291, 7772, 2005, 6131, 4523, 2190, 2918, 1011, 2240, 1054, 15042, 2836, 2012, 1996, 10961, 1997, 21770, 10624, 6914, 20175, 2100, 2707, 2013, 3722, 11867, 26876, 1054, 15042, 1024, 3161, 7696, 10124, 2448, 7292, 2291, 2005, 6131, 26876, 17409, 2007, 1037, 6131, 26876, 5903, 2653, 1024, 10507, 1009, 1009, 2053, 12719, 2000, 2392, 1011, 2203, 11403, 2030, 2067, 1011, 2203, 21624, 3125, 2003, 2000, 8970, 2069, 1996, 4072, 1054, 15042, 2448, 7292, 8964, 2015, 2005, 6131, 26876, 16157, 2009, 1059, 29625, 2099, 29625, 2102, 29625, 1037, 3811, 1011, 15757, 11867, 26876, 2291, 3975, 1011, 1039, 2058, 3161, 7696, 2720, 15042, 7375, 3075, 1024, 1054, 15042, 1010, 3937, 4127, 5832, 2075, 1010, 6556, 2565, 7781, 2055, 1018, 2243, 3210, 1997, 1039, 29622, 29622, 1998, 1016, 2243, 3210, 1997, 1039, 7528, 2006, 2327, 1997, 3161, 7696, 1006, 8040, 5986, 1007, 18365, 2121, 28213, 2747, 3216, 2006, 1996, 9980, 11867, 2475, 1006, 28443, 1017, 29625, 2475, 29625, 2629, 1007, 6377, 2046, 10507, 1009, 1009, 1024, 16803, 2006, 10507, 1009, 1009, 3795, 20884, 2015, 2005, 1054, 15042, 8031, 17781, 2015, 1054, 15042, 24646, 2497, 4245, 2013, 10507, 1009, 1009, 2053, 14080, 2000, 2392, 1011, 2203, 21624, 12685, 2640, 3314, 1999, 2720, 15042, 2720, 15042, 1998, 10507, 1009, 1009, 2836, 3463, 4118, 2171, 5813, 21624, 2064, 2025, 5646, 1996, 4598, 2030, 3295, 1997, 1037, 6556, 7709, 10763, 3973, 11867, 26876, 1024, 2168, 2565, 3746, 6131, 26876, 1024, 3791, 12375, 29379, 1024, 1004, 29379, 29379, 1024, 29379, 1024, 29379, 29379, 1004, 29379, 1012, 1012, 1012, 1012, 1012, 1012, 1004, 29379, 2720, 15042, 1024, 4604, 2121, 1011, 2217, 24646, 2497, 4769, 6187, 8450, 24646, 2497, 4769, 6187, 8450, 1004, 1041, 29638, 14876, 2080, 1018, 1041, 29638, 14876, 2080, 1024, 18365, 2121, 1041, 29638, 14876, 2080, 1004, 1041, 29638, 14876, 2080, 1012, 1012, 1012, 1012, 1012, 1012, 1052, 5587, 2099, 1041, 29638, 14876, 2080, 1002, 1041, 29638, 14876, 2080, 1004, 1041, 29638, 14876, 2080, 1041, 29638, 14876, 2080, 3335, 3147, 1999, 19152, 1024, 2980, 1999, 19152, 1024, 14246, 1004, 1041, 29638, 14876, 2080, 2718, 1041, 29638, 14876, 2080, 1024, 18365, 2121, 1052, 5587, 2099, 1041, 29638, 14876, 2080, 1002, 14246, 6685, 5832, 2075, 9918, 1997, 1054, 15042, 2064, 2022, 15275, 5200, 2442, 2022, 5832, 2098, 1998, 4895, 7849, 7377, 11001, 2011, 1054, 15042, 24646, 5910, 2130, 2062, 6450, 1999, 21770, 10624, 6914, 14769, 4292, 6431, 2572, 1024, 2039, 2000, 1018, 1018, 1011, 24880, 9918, 1010, 15275, 17698, 2015, 1006, 20273, 3138, 2729, 1997, 5832, 2075, 1007, 2720, 15042, 1024, 8114, 2951, 24731, 23964, 2005, 24646, 5910, 2951, 4651, 20587, 24646, 2497, 2515, 2025, 2113, 2055, 1996, 4374, 17698, 2053, 20587, 1013, 2655, 4402, 26351, 8093, 10698, 9276, 6431, 2572, 1024, 20587, 27171, 6556, 17698, 4769, 2720, 15042, 1024, 8114, 17698, 2968, 1998, 14516, 4374, 17698, 2015, 14516, 4374, 17698, 2015, 1055, 1011, 20934, 2546, 14516, 1054, 1011, 20934, 2546, 10763, 1010, 2566, 1011, 13045, 17698, 14516, 1054, 1011, 20934, 2546, 1004, 1054, 1011, 20934, 2546, 2003, 8250, 1999, 1996, 17053, 1041, 29638, 14876, 2080, 18365, 2121, 1004, 1054, 1011, 20934, 2546, 1002, 6100, 1055, 1011, 20934, 2546, 2951, 2003, 2741, 2000, 10763, 17698, 2951, 2003, 2741, 3495, 2000, 1054, 1011, 20934, 2546, 3147, 1999, 19152, 1024, 2980, 1999, 19152, 1024, 1041, 29638, 14876, 2080, 16457, 2169, 1054, 15042, 5942, 1037, 2047, 1006, 11177, 1007, 11689, 2012, 1996, 4909, 2203, 2053, 9259, 2006, 3136, 2864, 1999, 6556, 8853, 2448, 7292, 2291, 2442, 2022, 11689, 3647, 6431, 3975, 1011, 1039, 1024, 2309, 11689, 1997, 2491, 2566, 13045, 2720, 15042, 1024, 7661, 1010, 2512, 29624, 28139, 6633, 24971, 16457, 7427, 4471, 7684, 4471, 7684, 2003, 2025, 8393, 1011, 7531, 4007, 17938, 2015, 1024, 2200, 6450, 6431, 6131, 2072, 1024, 2195, 2367, 3971, 2000, 4374, 1037, 4471, 1006, 8554, 1010, 2695, 1010, 4385, 1007, 11867, 26876, 1024, 5310, 4050, 14847, 4012, 2213, 12335, 2046, 2029, 10036, 17888, 2064, 2022, 3107, 4089, 2720, 15042, 1024, 17888, 11689, 10507, 1009, 1009, 2058, 2720, 15042, 14246, 2050, 1011, 1028, 29379, 1006, 1052, 1010, 1045, 1007, 1025, 1006, 2203, 13876, 29625, 5498, 16344, 15042, 1006, 14246, 2050, 1010, 4443, 29638, 14876, 2080, 1007, 1010, 2203, 13876, 1026, 29629, 1052, 1010, 2203, 13876, 1026, 29629, 1045, 1010, 2203, 13876, 29625, 5054, 13626, 15042, 1006, 1007, 1010, 2203, 13876, 1028, 29631, 2128, 9189, 2389, 1010, 2203, 13876, 29625, 6072, 3388, 1006, 1007, 1007, 1025, 3795, 2465, 1037, 1063, 1012, 1012, 1012, 1065, 1025, 3313, 1037, 1024, 1024, 29379, 1006, 20014, 1052, 1010, 20014, 1045, 1007, 1063, 1012, 1012, 1012, 1065, 1037, 1024, 1024, 4443, 29638, 14876, 2080, 1006, 1012, 1012, 1012, 1007, 1063, 1012, 1012, 1012, 2203, 13876, 29625, 2890, 2278, 19716, 15042, 1006, 1999, 8569, 2546, 1010, 1012, 1012, 1012, 1007, 1025, 2203, 13876, 1028, 29631, 12098, 2290, 2487, 1025, 2203, 13876, 1028, 29631, 12098, 2290, 2475, 1025, 3313, 2128, 9189, 2389, 1027, 29379, 1006, 12098, 2290, 2487, 1010, 12098, 2290, 2475, 1007, 1025, 2203, 13876, 1026, 29629, 2128, 9189, 2389, 1025, 2203, 13876, 29625, 2890, 22086, 14536, 2278, 1006, 1007, 1025, 1012, 1012, 1012, 1065, 2720, 15042, 8278, 1999, 4183, 14536, 2278, 4604, 14536, 2278, 28667, 19716, 15042, 7514, 14536, 2278, 25141, 10507, 1009, 1009, 1024, 20587, 21624, 1039, 29622, 29622, 20587, 24646, 2497, 10507, 1009, 1009, 1024, 2655, 4402, 1039, 29622, 29622, 2655, 4402, 24646, 2497, 21624, 19701, 1054, 15042, 1024, 2572, 1024, 4583, 2149, 10507, 1009, 1009, 1013, 2720, 15042, 1024, 6584, 2149, 26041, 1013, 6131, 2140, 1024, 11212, 1055, 1006, 5887, 2063, 1024, 1066, 2753, 1055, 1007, 3795, 20884, 3191, 1013, 4339, 1006, 1022, 27507, 1007, 3975, 1011, 1039, 1013, 2572, 1024, 5401, 1055, 10507, 1009, 1009, 1013, 2720, 15042, 1024, 6227, 1055, 9625, 3191, 1006, 8148, 27507, 1007, 3975, 1011, 1039, 1013, 2572, 1024, 6356, 1055, 10507, 1009, 1009, 1013, 2720, 15042, 1024, 16666, 1055, 9980, 6131, 2072, 1011, 1042, 1998, 6131, 2140, 1006, 28443, 1017, 29625, 2475, 29625, 2629, 1007, 1024, 6070, 2149, 3937, 4012, 2213, 5366, 1999, 10507, 1009, 1009, 1013, 2720, 15042, 2024, 2306, 1016, 2595, 2007, 3975, 1011, 1039, 1013, 2572, 1998, 2060, 24732, 9014, 12702, 29624, 10609, 2818, 27373, 5097, 10439, 3975, 1011, 1039, 1013, 2572, 10507, 1009, 1009, 1013, 26041, 10507, 1009, 1009, 1013, 2720, 15042, 7861, 29097, 5603, 14122, 5385, 2300, 1011, 3653, 2546, 24406, 9587, 2140, 21461, 2102, 1015, 2213, 1014, 29625, 2581, 2620, 1055, 2603, 29625, 2487, 1055, 1006, 2756, 29625, 2575, 1060, 1007, 1016, 29625, 2620, 1055, 1006, 1017, 29625, 2575, 1060, 1007, 11320, 24406, 1014, 29625, 2620, 2487, 1055, 2321, 29625, 2629, 1055, 1006, 2539, 29625, 2487, 1060, 1007, 1016, 29625, 2683, 1055, 1006, 1017, 29625, 2575, 1060, 1007, 1017, 4617, 1997, 7861, 29097, 1010, 1016, 4617, 1997, 2300, 1010, 11320, 1998, 21461, 2102, 10507, 1009, 1009, 4617, 2241, 2006, 2434, 3975, 1011, 1039, 3642, 3216, 2579, 2005, 1018, 1998, 1022, 18017, 2006, 9980, 11867, 1011, 1016, 2300, 1039, 1011, 1018, 1039, 1039, 1011, 1018, 1055, 1039, 1011, 1022, 1039, 1039, 1011, 1022, 1055, 1039, 1011, 1018, 1039, 1039, 1011, 1018, 1055, 1039, 1011, 1022, 1039, 1039, 1011, 1022, 9409, 1009, 6100, 11689, 26351, 11689, 15418, 2102, 5658, 17368, 9593, 24406, 3653, 7959, 10649, 24406, 6594, 10507, 1009, 1009, 5097, 4685, 2306, 1037, 5387, 1997, 1016, 2000, 1020, 1997, 3975, 1011, 1039, 2344, 1997, 10194, 7620, 2058, 3025, 17727, 2140, 4118, 2171, 5813, 5377, 3465, 1010, 2471, 11265, 25394, 18507, 1999, 18726, 16457, 6115, 2005, 1066, 2423, 1011, 2753, 1003, 1997, 1996, 6578, 1010, 2164, 1024, 26351, 8093, 10698, 9276, 1006, 1066, 2321, 1011, 3486, 1003, 1997, 1996, 6578, 1007, 2349, 2000, 11689, 3808, 11689, 2968, 1006, 1066, 2184, 1011, 2321, 1003, 1997, 1996, 6578, 1007, 1010, 4293, 1003, 6123, 15924, 6685, 5832, 2075, 1998, 2951, 6100, 2312, 12884, 1997, 1996, 3588, 6578, 1006, 1066, 2753, 1011, 4293, 1003, 1007, 4495, 2005, 21624, 1011, 2504, 20600, 2015, 3141, 2147, 12038, 1054, 15042, 1048, 14536, 2278, 1024, 1054, 15042, 28031, 2005, 2334, 2553, 2152, 1011, 2836, 1054, 15042, 1999, 6131, 4523, 4164, 1010, 7473, 1009, 1009, 1010, 5925, 2140, 22380, 16457, 2007, 4807, 21931, 3161, 7696, 26041, 21953, 5461, 7772, 4853, 15418, 2102, 1998, 4214, 12472, 1010, 13971, 16457, 1010, 4385, 29625, 1006, 19982, 8180, 20228, 4305, 5989, 1007, 7091, 2825, 2000, 10408, 2019, 1054, 15042, 1011, 2241, 6131, 26876, 2291, 2008, 2003, 6975, 2007, 11867, 26876, 3001, 2006, 24854, 6131, 4523, 2168, 2344, 1997, 10194, 2836, 3119, 1011, 2125, 2090, 2236, 3012, 1998, 2836, 3980, 3588, 1024, 26743, 8553, 2005, 3469, 2193, 1997, 14164, 8346, 2007, 21770, 10624, 6914, 14769, 2448, 7292, 6502, 14816, 1024, 8299, 29627, 29626, 29626, 2860, 2860, 2860, 29625, 6169, 29625, 27108, 9091, 29625, 2098, 2226, 29626, 23393, 2063, 29626, 5428, 7507, 2080, 2720, 15042, 1010, 10507, 1009, 1009, 18726, 3120, 3642, 1024, 9610, 7507, 2080, 29633, 6169, 29625, 27108, 9091, 29625, 2098, 2226, 2], "src_sent_labels": [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0], "segs": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "clss": [0, 40, 57, 89, 116, 162, 202, 229, 264, 289, 313, 334, 357, 376, 423, 443, 473, 533, 569, 626, 657, 688, 705, 725, 743, 809, 828, 887, 906, 952, 1007, 1029, 1071, 1130, 1189, 1220, 1257, 1318, 1362, 1385, 1445, 1474, 1502, 1518, 1548, 1569, 1635, 1696, 1735, 1753, 1783, 1815, 1848, 1879, 1904, 1920, 1941, 1965, 1992, 2005, 2021, 2052, 2111, 2177, 2221, 2278, 2309, 2341, 2401, 2425, 2449, 2476, 2508, 2535, 2572, 2639, 2676, 2715, 2734, 2795, 2810, 2861, 2892, 2930, 2975, 2995, 3057, 3097, 3131, 3170, 3189, 3200, 3235, 3263, 3301, 3313, 3342, 3374, 3410, 3435, 3487, 3543, 3593, 3613, 3635, 3653, 3699, 3722, 3768, 3811, 3823, 3881, 3910, 3950, 3981, 4003, 4079, 4127, 4173, 4238, 4255, 4268, 4285, 4326, 4355, 4374, 4402, 4417, 4508, 4532, 4567, 4590, 4632, 4659, 4681, 4704, 4733, 4791, 4809, 4837, 4871, 4902, 4936, 4970, 4990, 5020, 5069, 5098, 5162, 5190, 5213, 5239, 5273, 5301, 5354, 5374, 5409, 5446, 5487, 5517, 5539, 5567, 5604, 5632, 5697, 5725, 5755, 5799, 5826, 5868, 5901, 5939, 5996, 6029, 6091], "src_txt": ["the mpmd approach for parallel computing is attractive for programmers who seek fast development cycles , high code re-use , and modular programming , or whose applications exhibit irregular computation loads and communication patterns .", "rpc is widely adopted as the communication abstraction for crossing address space boundaries .", "however , the communication overheads of existing rpc - based systems are usually an order of magnitude higher than those found in highly tuned spmd systems .", "this problem has thus far limited the appeal of high - level programming languages based on mpmd models in the parallel computing community .", "this paper investigates the fundamental limitations of mpmd communication using a case study of two parallel programming languages , compositional c++ ( cc + + ) and split - c , that provide support for a global name space .", "to establish a common comparison basis , our implementation of cc + + was developed to use mrpc , a rpc system optimized for mpmd parallel computing and based on active messages .", "basic rpc performance in cc + + is within a factor of two from those of split - c and other messaging layers .", "cc + + applications perform within a factor of two to six from comparable split - c versions , which represent an order of magnitude improvement over previous cc + + implementations .", "the results suggest that rpc - based communication can be used effectively in many high - performance mpmd parallel applications .", "split - c is a parallel extension of c that supports efficient access to global address space using global pointers .", "it provides a small set of global access primitives and simple parallel - storage layout declarations .", "the compiler performs simple source - to - source transformations , converting the language extensions into runtime library calls .", "the global name space assumes an spmd model : all processors execute the same program .", "split - c has been ported to several distributed memory multiprocessors and is generally very efficient.cc + + is a parallel extension of c++ designed for the development of task - parallel object - oriented programs .", "cc + + uses processor objects to abstract the different address spaces in an mpmd application .", "it provides a global name space across processor objects through global pointers , and parallel control structures that allow blocks of code to be executed concurrently .", "a regular c++ class can be elevated to a processor object through language extensions , making all its public methods and data accessible by other processor objects using global pointers.the key differences between these languages are : control and synchronization : in split - c , the program executing on one node is single - threaded and synchronizes with the other nodes through barrier calls .", "in cc + + , new threads of control can be created using spawn , and control blocks can execute concurrently if annotated with the par and parfor keywords .", "synchronization is achieved using write - once sync variables.global name space : the structure of split - c 's global name space is made visible to the programmer in that a global pointer consists of a processing node number and a local address on that node .", "in particular , arithmetic on the node part of the global pointer is used to access static variables on arbitrary nodes and to spread arrays across all nodes .", "the split - c type system distinguishes global pointers from ordinary local ones and communication takes place automatically when a remote pointer is dereferenced .", "unlike split - c , global pointers in cc + + are opaque .", "the compiler front - end translates all global pointer dereferences into rpcs .", "member methods 1 of remote objects referenced by a global pointer can be invoked directly .", "method invocation stubs with argument marshalling and unmarshalling code and communication calls into the runtime system are generated automatically.communication : split - c uses a number of variants of the c assignment statement to access remote locations synchronously , to issue split - phase gets , puts , and one - way stores .", "a number of bulk - transfer primitives support the efficient transfer of contiguous memory blocks .", "in cc + + , all communication takes place in the form of rpcs.although there is no restriction on the number and types of arguments and of the result value that a remote method can have , cc + + programmers have to provide their own data marshalling operations for complex data structures .", "bulk data transfer is attained by passing all the data as arguments to an rpc .", "rpc introduces a number of issues into the communication layer that are absent from split - c : method names must be resolved to entry point addresses , arguments must be marshaled , and multiple threads of control must be supported .", "in addition , the modularity and higher levels of abstraction offered by cc + + require a more local view of the interactions of communication and computation than in split - c , which affects how the arrival of messages is detected and how atomic actions are implemented.the issues discussed in the section arise due to the semantics of rpc , and as a result , communication in mpmd systems is inherently more expensive than in spmd ones.method name resolution : a cc + + application can be composed of multiple , separately compiled program images .", "this means that the compiler can not generally determine the existence or location of a remote method statically .", "the mapping from the method name to its entry point address must be made at runtime , which requires either extra round - trip inquiry messages or the transmission of the name instead of its address in messages .", "in contrast , the split - c runtime system handles only a single program image and assumes that remote code and data are located at the same addresses as on the local node.argument marshalling : in cc + + the arguments of an rpc can be arbitrary objects , requiring the compiler to generate stubs that serialize each argument into the outgoing message buffer and that extract the arguments or the return value on message reception .", "this flexibility makes cc + + 's rpc strictly more powerful than the global 1 in this paper , we use the terms method and procedure interchangeably.memory access primitives in split - c , which only supports a \" shallow copy \" of user - defined data types .", "on the other hand , this flexibility incurs at least one extra copying of the data as well as the overhead of calling the serialization methods .", "the cc + + compiler can only inline these calls in simple cases , but in other cases ( especially in the presence of inheritance ) a full dynamic method invocation is required .", "some systems [ 1,19 ] attempt to reduce the cost of rpc by restricting the types that can be marshaled or by only supporting shallow copies of rpc arguments.data transfer : split - c supports efficient data transfer by requiring the sender to specify a remote buffer address where the data will be placed , avoiding dynamic memory allocation on message reception .", "in cc + + , the compilergenerated stub allocates a receive buffer from which data will be unmarshaled , but the sender does not find out about this buffer until runtime .", "so , at first , data must be shipped to a generic buffer and then copied into the receive buffer .", "this incurs two additional copies ( one for arguments and another for the return value ) into rpc besides those required for data marshalling.control transfer : an rpc requires that control be transferred to a new thread at the receiving end because no restrictions are placed on the operations performed in remotely invoked methods .", "in particular , a method may block on a lock held by the interrupted computation , requiring the latter to proceed before the former can complete .", "this requires that each program have multiple threads and that the reception of a message , at least logically , create a new thread .", "the need for multiple threads adds a significant overhead in cc + + .", "besides the cost of context switching , it requires judicious introduction of locks into the runtime and communication layer to maintain thread - safety .", "the overhead of thread scheduling can become significant when handling a large number of incoming rpc messages .", "one benefit of multithreading is the ability to hide the communication latency , but its effectiveness depends on the relative costs of the thread operations ( creation , context switching , and synchronization ) with respect to the latency.most threaded spmd systems [ 3,7 ] minimize the threading costs by making threads run to completion to eliminate context switches , by performing custom stack management ( e.g. using stacklets [ 12 ] or spaghetti stacks ) , or by reducing synchronization costs through custom code generation [ 12 ] .", "split - c takes an even more radical approach - offering only a single computation threadand relies on split - phase remote accesses to tolerate latencies.message reception : a critical component of the communication latency is the queuing delay incurred by messages at the receiving end before they are serviced .", "in an spmd system , where communication phases can be planned globally , it is feasible to require the programmer ( or the compiler ) to introduce explicit poll operations to check for message arrival .", "polling is generally very cheap and can yield low latencies if executed often enough .", "this approach is used in split - c.the more modular programming style promoted by cc + + generally favor an interrupt - driven message reception .", "the software interrupt generated on message arrival is propagated to the application 's runtime system , which creates a new thread to handle the message .", "however , the overheads of the interrupt and of the kernel layers propagating it to the application are often significant , increasing the overall communication latency .", "mrpc is an rpc system designed and optimized for mpmd parallel computing on a homogeneous , distributed memory multi-computer .", "the system consists of a runtime library that performs communication , marshalling of basic data types and remote program execution .", "the current implementation runs on the ibm sp multi-computer .", "the total source code size is 4028 lines of c++ and 1881 lines of c .", "the communication module is layered on top of am and uses a custom , non-preemptive threads package .", "we present a brief overview of the mrpc implementation in this section - a thorough description can be found in [ 5 ] .", "cc + + has been ported to use mrpc .", "it provides mrpc with stub generation and a global name space .", "the system is composed of a front - end ( cc + + to c++ ) translator and a back - end c++ compiler .", "the front - end translates all global pointer accesses into caller stubs and wraps global procedure entry points with callee stubs.after compilation , a cc + + program consists of an executable ( which contains the main entry point ) and possibly a number of processor objects .", "at first , the master node ( typically processing node 0 ) starts the main executable and the other nodes remain idle waiting for an incoming request to dynamically load processor objects.the caller stub instantiates a bi-directional endpoint that holds a send ( s - ) and a receive buffer ( r - buffer ) .", "it transmits the contents of the s - buffer ( control information , callee stub entry point and call arguments ) using am to a static , per - node buffer zone , and blocks the caller thread .", "upon arrival of the message in the callee side , a dispatch handler is responsible for extracting the control information from the static buffer , copying the arguments from the static buffer to a newly allocated r - buffer , looking up and invoking the callee stub with the r - buffer .", "the callee stub unmarshals the arguments , calls the method , and issues a reply am to the caller with the return value .", "a return handler 2 is responsible for copying the return value from the static buffer into the caller r - buffer and for unblocking the caller thread .", "the use of the static buffer zone eliminates the need for the caller to issue an extra roundtrip message to determine an r - buffer , but still requires two data copies on the caller ( during rpc reply ) and callee sides.stub caching is used to eliminate the overhead of name mapping .", "the entry point addresses for callee stubs are resolved using a look - up into a local hash table .", "each processing node maintains a table of stub addresses which is indexed by processor number and method name hash value .", "during runtime initialization , local callee stubs are registered into the table , and remote entries are marked as invalid .", "the initiator of an rpc uses the processor number ( taken from the global pointer ) and the method hash value to index into the table .", "if the entry is valid , the stub entry point address is fetched and passed to the remote node in the message .", "if the entry is invalid , the entire method name is passed in the message and the resolution occurs at the remote end with a message being sent back to update the local entry .", "the main benefits of resolving the name on the caller side are to reduce the size of the messages and calculate the hash value at runtime initialization.to reduce the marshalling overheads , s - and r - buffers are pre-allocated , and r - buffers are made persistent , i.e. for recently invoked procedures are kept allocated so they can be managed by the caller .", "initially , for a \" cold \" rpc , arguments are marshaled into the s - buffer and transferred to a per - node static buffer area at the callee side .", "the dispatch handler allocates a new r - buffer , copies the data from the static buffer area into the r - buffer , and marks it as attached to the method being called .", "the address of the rbuffer is returned with the stub table update message .", "subsequent cached invocations will copy data directly into the persistent , per - node r - buffer associated with the remote procedure , thus eliminating one extra data copy on the callee side.to eliminate a data copy on the caller side during the rpc reply , the caller can allocate an r - buffer and pass its address into the rpc message .", "the callee can ship the return value directly into this buffer .", "this optimization has not been incorporated into the current implementation.due to the high cost of software interrupts on message arrival on the ibm sp , message reception is based on polling that occurs on a node every time a message is sent [ 6 ] .", "in order to avoid deadlocks when there is no runnable thread , mrpc forks a polling thread on each processing node at initialization .", "the experimental setup consists of a series of cc + + and split - c communication micro-benchmarks and three applications : em3d , water , and blocked lu decomposition 3 .", "the am layer and the threads package have been carefully instrumented to account for the number , types , and sizes of message transfers as well as the number of threads , context switches , and synchronization operations .", "all experiments run on an ibm sp with an aix 3.2.5 operating system .", "although the languages use different back - end compilers ( cc + + uses ibm c++ and split - c uses gcc ) , the performance of the fp kernel in all three applications is virtually the same for both compilers.micro - benchmarks : figure 2 and figure 1 show the micro-benchmarks used : \u2022 several variations on ping - pong to measure the roundtrip time of the null rpc ( calling a null method of a remote object referenced by a global pointer and waiting for its completion ) : 0 - word simple ( no thread switches at the caller or callee ) , 0 - word , 1 - word , 2 - 3 the cc + + version of these applications is heavily based on the original split - c implementations [ 17 ] to allow for a fair comparison.word ( each with a thread switch at the caller side only ) , 0 - word threaded 4 ( thread switches at both caller and callee sides ) , and 0 - word atomic ( 0 - word threaded with the method executed atomically ) .", "\u2022 remote access to a 64 - bit double through a global pointer ( gp read / write ) , which consists of an rpc plus a reply message with the return value ( double ) .", "\u2022 bulk transfer of an array of 20 doubles using a cc + + rpc and split - c bulk reads and writes ( bulkread / write ) .", "\u2022 prefetching of 20 remote doubles accessed through global pointers using parfor blocks in cc + + and split - phase gets in split - c ( prefetch ) .", ": is a parallel application that simulates electromagnetic wave propagation [ 8,18 ] .", "the main data structure is a distributed graph .", "half of its nodes represent values of an electric field ( e ) at selected points in space , and the other corresponds to values of the magnetic field ( h ) .", "the graph is bipartite : no two nodes of the same type ( e.g. e or h ) are adjacent .", "each of the processors has the three versions of em3d in cc + + and split - c are compared here by varying the percentage of adjacent nodes that are located on remote processors .", "each version uses a different method to transfer data .", "the first version ( em3d - base ) dereferences a global pointer to a remote node each time the value is needed .", "since some co-located graph nodes may share remote neighbors , introducing local ghost nodes , which represent remote graph elements can eliminate redundant global accesses .", "this simple form of caching is used in em3d - ghost , where first the values of all ghost nodes are fetched and the main computation loop is purely local .", "this version can be further optimized by aggregating all ghost nodes being transferred from one processor to another .", "em3d - bulk uses this optimization to issue bulk transfers instead of many individual fetches.the benchmark runs shown in this paper uses a synthetic graph of 800 nodes distributed across 4 processors where each node has degree 20 for a total of 4000 edges .", "the fraction of edges that cross processor boundaries is varied from 10 % to 100 % in order to change the computation to communication ratio.water : is an n - body molecular dynamics application taken from the splash benchmark suite [ 22 ] that computes the forces and energies of a system of water molecules .", "the computation iterates over a number of steps , and each of which involves computing the intra-and inter-molecular forces for molecules contained in a \" cubical \" box , which runs in o ( n 2 ) time .", "a predictor - corrector method is used to integrate motion of water molecules over time .", "the total potential energy is calculated as the sum of intra-and intermolecular potentials .", "the main data structure is an array of molecules distributed statically across all processors .", "the intra-molecule interactions are computed locally , whereas the inter-molecule ones require reads and writes of remote data.two versions of water written in cc + + and split - c are compared .", "the base version ( water - atomic ) issues atomic reads and writes to access and update the remote molecules .", "the optimized version ( water - prefetch ) replaces the atomic read requests with selective prefetching , where selected data of remote molecules are bundled and fetched from their respective processors prior to local computing .", "both versions are run with inputs of 64 and 512 molecules distributed over 4 processors.blocked lu decomposition : implements lu factorization of a dense matrix as described in the splash benchmark suite [ 22 ] .", "the matrix is divided into blocks distributed among processors .", "every step comprises three sub-steps : first , the pivot block ( i , i ) is factored by its owner ; second , all processors which have blocks in the i - th row or i - th column obtain the updated pivot block ; third , all internal blocks are updated .", "all remote blocks requested in a given sub-step need to be fetched since they were modified in preceding sub-steps .", "the base split - c version ( sc - lu ) uses one - way stores for explicitly transferring pivot blocks and prefetches all blocks before beginning the third sub-step .", "in the cc + + version ( cc - lu ) , the one - way stores and prefetches are replaced by rpcs .", "the input is a 512x512 matrix of doubles with a block size of 16x16 .", "micro-benchmarks : as seen in although the marshalling of basic types introduces a negligible cost in the cc + + runtime , the data is sent using am bulk transfer primitives , which incurs an additional 15 vhfvvryhukhdggdvvvhhqqlqq1 - word , 2 - word ) .", "this overhead is avoided in gp read / write since accesses to simple data types through global pointers are optimized using small request / reply active messages.the cost of marshalling becomes significant for the array of 20 doubles .", "bulk reads cost more than bulk writes in cc + + because the return data has to be copied twice : once from the static buffer to the receive buffer , and again from the receive buffer to the cc + + object .", "this cost would be eliminated if the initiator of a bulk read passed an r - buffer address where the return value would be stored , as described earlier.the prefetching benchmark shows that the overhead of thread management reduces the effectiveness of latency hiding substantially.instrumentation : the execution times of the main computation kernels for each of the applications are broken down into a cpu component for ( mostly ) integer and fp computations , a net component for communication latencies and overheads , a thread mgmt component for thread creations , scheduling , and context switches , a thread sync component for locks and signals ( but excluding the waiting time , which is accounted for in net ) , and a runtime component for stub invocations , argument marshalling , method name lookup , and other runtime overheads in cc + + .", "split - c 's runtime is accounted for in the cpu component .", "figure 4 shows the per - edge em3d performance .", "cc + + is competitive with split - c for each of the versions .", "in em3d - base , the big difference between cc + + and split - c for low remote edge percentages is due to the overhead of accesses to local data through global pointers .", "as the percentage of remote edges increases , the relative performance of cc + + converges to about a factor of 2 of table 3 .", "the total time reported for each test was obtained by averaging over 10000 iterations .", "in cc + + , total is the sum of the messaging layer ( am ) , the threads time , and the runtime .", "in split - c , it is just am plus runtime .", "threads time is estimated by multiplying the number of thread calls per lwhudwlrqqzlwkwkhluuuhvshfwlyhhfrvwvv vhfvviruuwkuhdggfuhdwlrq vhfvviruuddfrqwh [ w vzlwfkdqgg vhfv for a lock , unlock , or condition variable signal call ) .", "the round - trip latency of ibm 's native mpl under aix lvv v figure 4 .", "breakdown of em3d per - edge execution times for 10 % , 40 % , 70 % , and 100 % of remote edges , normalized against split - c .", "the absolute execution time ( in seconds ) for 100 % of remote edges is indicated above the respective bars .", "in em3d - ghost , the number of global accesses is much smaller than in em3d - base and the relative performance converges quickly to 2.5 as the number of remote edge increases .", "even though bulk transfers require an additional copy in cc + + , no significant performance difference is observed in em3d - bulk .", "this is because the total number of bytes transferred per edge is very small ( about 5 bytes ) .", "to really observe a significant hit , the problem size has to be increased by a factor of about 200 .", "it is important to notice that the optimizations used in all three versions of em3d benefit split - c and cc + + equally .", "for 100 % remote edges , em3d - ghost reduces the execution time of em3d - base by 87 - 89 % , and em3d - bulk reduces that of em3d - ghost by more than 95 % for both languages.water : figure 5 shows the performance of the main computation loop in water .", "water - atomic uses small messages to read from and write to the remote molecules .", "the performance gap between cc + + and split - c is 2.6 for 64 molecules and 5.6 for 512 molecules .", "the number of remote accesses in cc + + increases quadratically with the input size , increasing its runtime overhead and degrading its relative performance .", "water - atomic can be further optimized by replacing the atomic read requests with selective prefetching ( water - prefetch ) .", "this technique causes a 10-fold reduction in remote accesses and thus yields in both split - c and cc + + a 60 % improvement for 64 molecules .", "however , for 512 molecules , cc + + improves by 51 % compared to split - c 's 22 % , closing the performance gap to 3.5 .", "the impact of this optimization is larger in cc + + because of higher communication latencies .", "cc + + runtime accounts for about 50 - 60 % of the gap , a great deal of which is due to data marshalling .", "the performance gap of 3.6 between cc + + and split - c is mainly due to the extra data copying during matrix block transfers ( about 20 % of the gap ) and to synchronization ( about 32 % ) .", "the net time in cc - lu is about 2 times higher than in sc - lu , mostly due to busy waiting ( polling ) .", "the thread costs show that multithreading in rpc accounts for 25 - 50 % of the performance gap between cc + + and split - c. synchronization incurs a significant amount of overhead : from 14 % ( of the performance gap ) in wateratomic and 19 % in em3d - ghost to as high as 32 % in cc - lu .", "98 - 99 % of this overhead is to ensure consistency of shared data and thread - safety in the runtime and communication layers .", "this is exacerbated by the observation that about 95 % of lock acquisitions are contention-less .", "the cost of thread management is acceptable ( between 10 - 15 % in cc + + applications ) , but not insignificant .", "this underscores the need for a highly tuned threads package as the costs would be prohibitively high if a more heavyweight or preemptive package were used .", "75 - 85 % of this cost is due to context switches , a large fraction of which can be attributed to the polling thread .", "this overhead may be alleviated in the future by reducing the cost of software interrupts , which eliminates the need for the polling thread.stub invocations , data marshalling , and message dispatch account for over 50 % of the performance gap .", "the overhead of method name translation is negligible due to the stub caching .", "data copying overheads are especially harmful when large amounts of data are transferred , as in lu , and when the communication to computation ratio is high , as in water .", "as far as we know , this is the first study that compares and evaluates the performance of mpmd communication with respect to spmd on a multi-computer .", "previous research on mpmd systems [ 11,13 ] usually emphasizes other aspects such as portability , flexibility , and heterogeneity , making it difficult to identify the fundamental overheads .", "moreover , such systems are usually evaluated in isolation.a key performance aspect in the mpmd model is the efficient integration of communication and threads .", "the simplest form of single - threaded remote method invocation was introduced by active messages [ 26 ] .", "optimistic active messages ( oam ) [ 28 ] augments am with threads , removing some of the restrictions in am handlers .", "to implement a fast rpc , oam optimistically executes the handler code on the stack - the handler is aborted and restarted on a separate thread if it blocks .", "but oam assumes an spmd model and does not specifically address the communication bottlenecks when that assumption is no longer valid .", "nexus also provides a framework for integrating threads with communication [ 11 ] , but does not investigate the performance impact in applications.a large amount of literature [ 7,12,15,20,21 ] describes sophisticated compiler and runtime schemes that reduce the cost of thread management in languages that support finegrain concurrency .", "all of them provide specialized frame management and procedure - calling convention that requires the compiler to generate native or assembly - like c code .", "our results show that these optimizations could potentially reduce the performance gap between spmd and mpmd parallel applications by about 10 to 15 % .", "taura and yonezawa provide a comprehensive summary of these schemes in [ 25 ] , and propose a cost - effective , library - based implementation of threads that maps onto the single stack execution model of c .", "this paper investigates the feasibility of high - performance mpmd parallel computing by analyzing the performance limitations of the mpmd communication paradigm .", "the analysis is based on a direct comparison of between an mpmd language ( cc + + ) and an spmd one ( split - c ) running on an ibm sp multi-computer .", "results show that basic remote data access in cc + + can be optimized to within a factor of two from split - c and native messaging layers .", "as a result , our cc + + applications perform within a factor of two to six from split - c , and with an order of magnitude improvement over previous cc + + implementations .", "in general , a fraction of the remaining gap is due to thread synchronization ( 15 - 30 % ) , which is necessary for maintaining thread - safe communication.thread management operations such as creation and context switching account for less than 15 % of the gap .", "rpc overheads such as stub invocations , argument serialization and message dispatch contribute to the majority of the gap ( over 50 % ) .", "as a result , we are currently investigating compiler - based techniques to streamline stub invocations , to eliminate data copying altogether during argument serialization , and to dispatch messages more efficiently using caller - managed thread scheduling.this work suggests that the mpmd model based on rpc is reasonable for high - performance applications running on multi-computers .", "in many cases , the simplicity of rpc abstraction along with the software - engineering benefits such as modularity and program composition outweigh the performance gap between spmd and mpmd ."], "tgt_txt": "evaluating the performance limitations of mpmd communication chi - chao chang dept. of computer science cornell university grzegorz czajkowski ( cornell ) thorsten von eicken ( cornell ) carl kesselman ( isi / usc ) framework parallel computing on clusters of workstations hardware communication primitives are message - based programming models : spmd and mpmd spmd is the predominant model why use mpmd ?<q>appropriate for distributed , heterogeneous setting : metacomputing parallel software as components why use rpc ?<q>right level of abstraction message passing requires receiver to know when to expect incoming communication systems with similar philosophy : nexus , legion how do rpc - based mpmd systems perform on homogeneous mpps ?<q>problem mpmd systems are an order of magnitude slower than spmd systems on homogeneous mpps at expense of performance in the homogeneous case approach mrpc : an mpmd rpc system specialized for mpps best base - line rpc performance at the expense of heterogeneity start from simple spmd rpc : active messages minimal runtime system for mpmd integrate with a mpmd parallel language : cc + + no modifications to front - end translator or back - end compiler goal is to introduce only the necessary rpc runtime overheads for mpmd evaluate it w.r.t. a highly - tuned spmd system split - c over active messages mrpc implementation library : rpc , basic types marshalling , remote program execution about 4k lines of c++ and 2k lines of c implemented on top of active messages ( sc 96 ) dispatcher handler currently runs on the ibm sp2 ( aix 3.2.5 ) integrated into cc + + : relies on cc + + global pointers for rpc binding borrows rpc stub generation from cc + + no modification to front - end compiler outline design issues in mrpc mrpc and cc + + performance results method name resolution compiler can not determine the existence or location of a remote procedure statically spmd : same program image mpmd : needs mapping foo : & foo foo : foo : foo foo & foo . . . . . . & foo mrpc : sender - side stub address caching stub address caching & e_foo 4 e_foo : dispatcher e_foo & e_foo . . . . . . p addr e_foo $ e_foo & e_foo e_foo miss cold invocation : hot invocation : gp & e_foo hit e_foo : dispatcher p addr e_foo $ gp argument marshalling arguments of rpc can be arbitrary objects must be marshalled and unmarshalled by rpc stubs even more expensive in heterogeneous setting versus am : up to 4 4 - byte arguments , arbitrary buffers ( programmer takes care of marshalling ) mrpc : efficient data copying routines for stubs data transfer caller stub does not know about the receive buffer no caller / callee synchronization versus am : caller specifies remote buffer address mrpc : efficient buffer management and persistent receive buffers persistent receive buffers s - buf persistent r - buf static , per - node buffer persistent r - buf & r - buf is stored in the cache e_foo dispatcher & r - buf $ copy s - buf data is sent to static buffer data is sent directly to r - buf cold invocation : hot invocation : e_foo threads each rpc requires a new ( logical ) thread at the receiving end no restrictions on operations performed in remote procedures runtime system must be thread safe versus split - c : single thread of control per node mrpc : custom , non-preemptive threads package message reception message reception is not receiver - initiated software interrupts : very expensive versus mpi : several different ways to receive a message ( poll , post , etc ) spmd : user typically identifies comm phases into which cheap polling can be introduced easily mrpc : polling thread cc + + over mrpc gpa - > foo ( p , i ) ; ( endpt.initrpc ( gpa , entry_foo ) , endpt << p , endpt << i , endpt.sendrpc ( ) , endpt >> retval , endpt.reset ( ) ) ; global class a { . . . } ; double a : : foo ( int p , int i ) { . . . } a : : entry_foo ( . . . ) { . . . endpt.recvrpc ( inbuf , . . . ) ; endpt >> arg1 ; endpt >> arg2 ; double retval = foo ( arg1 , arg2 ) ; endpt << retval ; endpt.replyrpc ( ) ; . . . } mrpc interface initrpc sendrpc recvrpc replyrpc reset cc + + : caller compiler c++ caller stub cc + + : callee c++ callee stub compiler null rpc : am : 55 us cc + + / mrpc : 87 us nexus / mpl : 240 s ( dce : ~ 50 s ) global pointer read / write ( 8 bytes ) split - c / am : 57 s cc + + / mrpc : 92 s bulk read ( 160 bytes ) split - c / am : 74 s cc + + / mrpc : 154 s ibm mpi - f and mpl ( aix 3.2.5 ) : 88 us basic comm costs in cc + + / mrpc are within 2x with split - c / am and other messaging layers micro-benchmarks applications app split - c / am cc + + / nexus cc + + / mrpc em3dghost 800 water - pref 512 mol fft 1m 0.78 s 23.1 s ( 29.6 x ) 2.8 s ( 3.6 x ) lu 512 0.81 s 15.5 s ( 19.1 x ) 2.9 s ( 3.6 x ) 3 versions of em3d , 2 versions of water , lu and fft cc + + versions based on original split - c code runs taken for 4 and 8 processors on ibm sp - 2 water c - 4 c c - 4 s c - 8 c c - 8 s c - 4 c c - 4 s c - 8 c c - 8 marsh + copy thread sync thread mgmt net cpu atomic 512 prefetch 512 discussion cc + + applications perform within a factor of 2 to 6 of split - c order of magnitude improvement over previous impl method name resolution constant cost , almost negligible in apps threads accounts for ~ 25 - 50 % of the gap , including : synchronization ( ~ 15 - 35 % of the gap ) due to thread safety thread management ( ~ 10 - 15 % of the gap ) , 75 % context switches argument marshalling and data copy large fraction of the remaining gap ( ~ 50 - 75 % ) opportunity for compiler - level optimizations related work lightweight rpc lrpc : rpc specialization for local case high - performance rpc in mpps concert , pc + + , abcl integrating threads with communication optimistic active messages nexus compiling techniques specialized frame mgmt and calling conventions , lazy threads , etc. ( tauras pldi 97 ) conclusion possible to implement an rpc - based mpmd system that is competitive with spmd systems on homogeneous mpps same order of magnitude performance trade - off between generality and performance questions remaining : scalability for larger number of nodes integration with heterogeneous runtime infrastructure slides : http://www.cs.cornell.edu/home/chichao mrpc , cc + + apps source code : chichao@cs.cornell.edu", "sections": [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11], "token_sections": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11]}